// This file is auto-generated by @hey-api/openapi-ts

/**
 * Assembly to be passed on the command line.
 *
 * Copy from annonars with extension to derive `utoipa::ToSchema`.
 */
export type Assembly = 'grch37' | 'grch38';

/**
 * Putative impact.
 */
export type Consequence = 'transcript_ablation' | 'exon_loss_variant' | 'splice_acceptor_variant' | 'splice_donor_variant' | 'stop_gained' | 'frameshift_variant' | 'stop_lost' | 'start_lost' | 'transcript_amplification' | 'feature_elongation' | 'feature_truncation' | 'disruptive_inframe_insertion' | 'disruptive_inframe_deletion' | 'conservative_inframe_insertion' | 'conservative_inframe_deletion' | 'missense_variant' | 'splice_donor_5th_base_variant' | 'splice_region_variant' | 'splice_donor_region_variant' | 'splice_polypyrimidine_tract_variant' | 'start_retained_variant' | 'stop_retained_variant' | 'synonymous_variant' | 'coding_sequence_variant' | 'mature_miRNA_variant' | '5_prime_UTR_exon_variant' | '5_prime_UTR_intron_variant' | '3_prime_UTR_exon_variant' | '3_prime_UTR_intron_variant' | 'non_coding_transcript_exon_variant' | 'non_coding_transcript_intron_variant' | 'upstream_gene_variant' | 'downstream_gene_variant' | 'TFBS_ablation' | 'TFBS_amplification' | 'TF_binding_site_variant' | 'regulatory_region_ablation' | 'regulatory_region_amplification' | 'regulatory_region_variant' | 'intergenic_variant' | 'intron_variant' | 'gene_variant';

export type CustomError = {
    err: string;
};

/**
 * Specification of data version for a given genome build.
 */
export type DataVersionEntry = {
    genome_build: Assembly;
    /**
     * Version of the RefSeq database, if any.
     */
    version_refseq?: (string) | null;
    /**
     * Version of the Ensembl database, if any.
     */
    version_ensembl?: (string) | null;
    /**
     * Version of cdot used.
     */
    version_cdot: string;
};

/**
 * Encode feature biotype.
 */
export type FeatureBiotype = 'coding' | 'noncoding' | 'mane_select' | 'mane_plus_clinical';

/**
 * Enum for `AnnField::feature_type`.
 */
export type FeatureType = {
    so_term: {
        term: SoFeature;
    };
} | {
    custom: {
        value: string;
    };
};

/**
 * Select the genome release to use.
 */
export type GenomeRelease = 'grch37' | 'grch38';

/**
 * A message to be used in `AnnField::messages`.
 */
export type Message = 'error_chromosome_not_found' | 'error_out_of_chromosome_range' | 'warning_ref_does_not_match_genome' | 'warning_sequence_not_available' | 'warning_transcript_incomplete' | 'warning_transcript_multiple_stop_codons' | 'warning_transcripts_no_start_codon' | 'info_realign_three_prime' | 'info_compound_annotation' | 'info_non_reference_annotation';

/**
 * Position, optionally with total length.
 */
export type Pos = {
    ord: number;
    total?: (number) | null;
};

/**
 * Putative impact level.
 */
export type PutativeImpact = 'high' | 'moderate' | 'low' | 'modifier';

/**
 * Encode exon/intron rank.
 */
export type Rank = {
    ord: number;
    total: number;
};

/**
 * Query parameters of the `/api/v1/seqvars/csq` endpoint.
 */
export type SeqvarsCsqQuery = {
    genome_release: GenomeRelease;
    /**
     * SPDI sequence.
     */
    chromosome: string;
    /**
     * SPDI position.
     */
    position: number;
    /**
     * SPDI deletion.
     */
    reference: string;
    /**
     * SPDI insertion.
     */
    alternative: string;
    /**
     * Optionally, the HGNC ID of the gene to limit to.
     */
    hgnc_id?: (string) | null;
};

/**
 * Response of the `/api/v1/seqvars/csq` endpoint.
 */
export type SeqvarsCsqResponse = {
    version: VersionsInfoResponse;
    query: SeqvarsCsqQuery;
    /**
     * The resulting records for the scored genes.
     */
    result: Array<SeqvarsCsqResultEntry>;
};

/**
 * One entry in `SeqvarsCsqResponse`.
 */
export type SeqvarsCsqResultEntry = {
    /**
     * The consequences of the allele.
     */
    consequences: Array<Consequence>;
    putative_impact: PutativeImpact;
    /**
     * The gene symbol.
     */
    gene_symbol: string;
    /**
     * The gene identifier.
     */
    gene_id: string;
    feature_type: FeatureType;
    /**
     * The feature identifier.
     */
    feature_id: string;
    feature_biotype: FeatureBiotype;
    /**
     * The feature tags.
     */
    feature_tag: Array<FeatureBiotype>;
    rank?: ((Rank) | null);
    /**
     * HGVS c. notation.
     */
    hgvs_t?: (string) | null;
    /**
     * HGVS p. notation.
     */
    hgvs_p?: (string) | null;
    tx_pos?: ((Pos) | null);
    cds_pos?: ((Pos) | null);
    protein_pos?: ((Pos) | null);
    /**
     * Distance to feature.
     */
    distance?: (number) | null;
    /**
     * Optional list of warnings and error messages.
     */
    messages?: Array<Message> | null;
};

/**
 * Sequence ontology feature.
 */
export type SoFeature = 'Transcript';

/**
 * Software version specification.
 */
export type SoftwareVersions = {
    /**
     * Version of `mehari`.
     */
    mehari: string;
    /**
     * Version of the `hgvs` crate.
     */
    hgvs_rs: string;
};

/**
 * Query parameters of the `/api/v1/strucvars/csq` endpoint.
 */
export type StrucvarsCsqQuery = {
    genome_release: GenomeRelease;
    /**
     * Chromosome.
     */
    chromosome: string;
    /**
     * 1-based start position.
     */
    start: number;
    /**
     * 1-based stop position, ignored for INS.
     */
    stop?: (number) | null;
    sv_type: StrucvarsSvType;
};

/**
 * Response of the `/api/v1/strucvars/csq` endpoint.
 */
export type StrucvarsCsqResponse = {
    version: VersionsInfoResponse;
    query: StrucvarsCsqQuery;
    /**
     * The resulting records for the affected genes.
     */
    result: Array<StrucvarsGeneTranscriptEffects>;
};

/**
 * Explanation of transcript effect per individual gene.
 */
export type StrucvarsGeneTranscriptEffects = {
    /**
     * HGNC identifier
     */
    hgnc_id: string;
    /**
     * Transcript effects for the gene.
     */
    transcript_effects: Array<StrucvarsTranscriptEffect>;
};

/**
 * Structural Variant type.
 */
export type StrucvarsSvType = 'DEL' | 'DUP' | 'INS' | 'INV' | 'BND';

/**
 * Enumeration for effect on transcript.
 */
export type StrucvarsTranscriptEffect = 'transcript_variant' | 'exon_variant' | 'splice_region_variant' | 'intron_variant' | 'upstream_variant' | 'downstream_variant' | 'intergenic_variant';

/**
 * Response of the `/api/v1/version` endpoint.
 */
export type VersionsInfoResponse = {
    software: SoftwareVersions;
    /**
     * Data versions specification.
     */
    data: Array<DataVersionEntry>;
};

export type SeqvarsCsqData = {
    query: {
        /**
         * SPDI insertion.
         */
        alternative: string;
        /**
         * SPDI sequence.
         */
        chromosome: string;
        /**
         * The assembly.
         */
        genome_release: GenomeRelease;
        /**
         * Optionally, the HGNC ID of the gene to limit to.
         */
        hgnc_id?: (string) | null;
        /**
         * SPDI position.
         */
        position: number;
        /**
         * SPDI deletion.
         */
        reference: string;
    };
};

export type SeqvarsCsqResponse2 = (SeqvarsCsqResponse);

export type SeqvarsCsqError = (CustomError);

export type StrucvarsCsqData = {
    query: {
        /**
         * Chromosome.
         */
        chromosome: string;
        /**
         * The assembly.
         */
        genome_release: GenomeRelease;
        /**
         * 1-based start position.
         */
        start: number;
        /**
         * 1-based stop position, ignored for INS.
         */
        stop?: (number) | null;
        /**
         * The variant type to use for annotation.
         */
        sv_type: StrucvarsSvType;
    };
};

export type StrucvarsCsqResponse2 = (StrucvarsCsqResponse);

export type StrucvarsCsqError = (CustomError);

export type VersionsInfoResponse2 = (VersionsInfoResponse);

export type VersionsInfoError = (CustomError);
// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/vue-query';
import type { SeqvarsCsqData, StrucvarsCsqData, StrucvarsCsqError, StrucvarsCsqResponse2 } from '../types.gen';
import { client, seqvarsCsq, strucvarsCsq, versionsInfo } from '../services.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const seqvarsCsqQueryKey = (options: Options<SeqvarsCsqData>) => [
    createQueryKey('seqvarsCsq', options)
];

export const seqvarsCsqOptions = (options: Options<SeqvarsCsqData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await seqvarsCsq({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: seqvarsCsqQueryKey(options)
    });
};

export const strucvarsCsqQueryKey = (options: Options<StrucvarsCsqData>) => [
    createQueryKey('strucvarsCsq', options)
];

export const strucvarsCsqOptions = (options: Options<StrucvarsCsqData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await strucvarsCsq({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: strucvarsCsqQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path,
            ...page.path
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query,
            ...page.query
        };
    }
    return params as unknown as typeof page;
};

export const strucvarsCsqInfiniteQueryKey = (options: Options<StrucvarsCsqData>): QueryKey<Options<StrucvarsCsqData>> => [
    createQueryKey('strucvarsCsq', options, true)
];

export const strucvarsCsqInfiniteOptions = (options: Options<StrucvarsCsqData>) => {
    return infiniteQueryOptions<StrucvarsCsqResponse2, StrucvarsCsqError, InfiniteData<StrucvarsCsqResponse2>, QueryKey<Options<StrucvarsCsqData>>, number | Pick<QueryKey<Options<StrucvarsCsqData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<StrucvarsCsqData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    start: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await strucvarsCsq({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: strucvarsCsqInfiniteQueryKey(options)
    });
};

export const versionsInfoQueryKey = (options?: Options) => [
    createQueryKey('versionsInfo', options)
];

export const versionsInfoOptions = (options?: Options) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await versionsInfo({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: versionsInfoQueryKey(options)
    });
};
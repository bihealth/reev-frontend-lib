// This file is auto-generated by @hey-api/openapi-ts
import type { Options } from '@hey-api/client-fetch'
import { type InfiniteData, infiniteQueryOptions, queryOptions } from '@tanstack/vue-query'

import {
  client,
  genesClinvar,
  genesInfo,
  genesLookup,
  genesSearch,
  seqvarsAnnosQuery,
  strucvarsClinvarQuery,
  versionsInfo
} from '../services.gen'
import type {
  GenesClinvarData,
  GenesInfoData,
  GenesLookupData,
  GenesSearchData,
  SeqvarsAnnosQueryData,
  StrucvarsClinvarQueryData,
  StrucvarsClinvarQueryError,
  StrucvarsClinvarQueryResponse
} from '../types.gen'

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  }
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const genesClinvarQueryKey = (options?: Options<GenesClinvarData>) => [
  createQueryKey('genesClinvar', options)
]

export const genesClinvarOptions = (options?: Options<GenesClinvarData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genesClinvar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: genesClinvarQueryKey(options)
  })
}

export const genesInfoQueryKey = (options?: Options<GenesInfoData>) => [
  createQueryKey('genesInfo', options)
]

export const genesInfoOptions = (options?: Options<GenesInfoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genesInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: genesInfoQueryKey(options)
  })
}

export const genesLookupQueryKey = (options: Options<GenesLookupData>) => [
  createQueryKey('genesLookup', options)
]

export const genesLookupOptions = (options: Options<GenesLookupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genesLookup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: genesLookupQueryKey(options)
  })
}

export const genesSearchQueryKey = (options: Options<GenesSearchData>) => [
  createQueryKey('genesSearch', options)
]

export const genesSearchOptions = (options: Options<GenesSearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genesSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: genesSearchQueryKey(options)
  })
}

export const seqvarsAnnosQueryQueryKey = (options: Options<SeqvarsAnnosQueryData>) => [
  createQueryKey('seqvarsAnnosQuery', options)
]

export const seqvarsAnnosQueryOptions = (options: Options<SeqvarsAnnosQueryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await seqvarsAnnosQuery({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: seqvarsAnnosQueryQueryKey(options)
  })
}

export const strucvarsClinvarQueryQueryKey = (options: Options<StrucvarsClinvarQueryData>) => [
  createQueryKey('strucvarsClinvarQuery', options)
]

export const strucvarsClinvarQueryOptions = (options: Options<StrucvarsClinvarQueryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await strucvarsClinvarQuery({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: strucvarsClinvarQueryQueryKey(options)
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any)
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers
    }
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path
    }
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query
    }
  }
  return params as unknown as typeof page
}

export const strucvarsClinvarQueryInfiniteQueryKey = (
  options: Options<StrucvarsClinvarQueryData>
): QueryKey<Options<StrucvarsClinvarQueryData>> => [
  createQueryKey('strucvarsClinvarQuery', options, true)
]

export const strucvarsClinvarQueryInfiniteOptions = (
  options: Options<StrucvarsClinvarQueryData>
) => {
  return infiniteQueryOptions<
    StrucvarsClinvarQueryResponse,
    StrucvarsClinvarQueryError,
    InfiniteData<StrucvarsClinvarQueryResponse>,
    QueryKey<Options<StrucvarsClinvarQueryData>>,
    | number
    | Pick<QueryKey<Options<StrucvarsClinvarQueryData>>[0], 'body' | 'headers' | 'path' | 'query'>
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<StrucvarsClinvarQueryData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  start: pageParam
                }
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await strucvarsClinvarQuery({
          ...options,
          ...params,
          signal,
          throwOnError: true
        })
        return data
      },
      queryKey: strucvarsClinvarQueryInfiniteQueryKey(options)
    }
  )
}

export const versionsInfoQueryKey = (options?: Options) => [createQueryKey('versionsInfo', options)]

export const versionsInfoOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await versionsInfo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true
      })
      return data
    },
    queryKey: versionsInfoQueryKey(options)
  })
}

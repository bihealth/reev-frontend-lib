// This file is auto-generated by @hey-api/openapi-ts

/**
 * Encode annotation database.
 */
export type AnnoDb =
  | 'other'
  | 'cadd'
  | 'dbsnp'
  | 'dbnsfp'
  | 'dbscsnv'
  | 'gnomad_mtdna'
  | 'gnomad_exomes'
  | 'gnomad_genomes'
  | 'helixmtdb'
  | 'ucsc_conservation'
  | 'clinvar'

/**
 * Local type for `ClinVarAccession`
 */
export type ClinvarAccession = {
  /**
   * Accession.
   */
  accession: string
  /**
   * Version.
   */
  version: number
  submitter_identifiers?: null | ClinvarSubmitterIdentifiers
  /**
   * The date that the latest update to the submitted
   * record (SCV) became public in ClinVar.
   */
  date_updated?: string | null
  /**
   * DateCreated is the date when the record first became
   * public in ClinVar.
   */
  date_created?: string | null
}

/**
 * Local enumeration for the affected status.
 */
export type ClinvarAffectedStatus = 'yes' | 'no' | 'not_provided' | 'unknown' | 'not_applicable'

/**
 * Local type for an age.
 */
export type ClinvarAge = {
  /**
   * The age value.
   */
  value: number
  /**
   * The age unit.
   */
  unit: ClinvarAgeUnit
  /**
   * The age type.
   */
  type: ClinvarAgeType
}

/**
 * Local enumeration for an age type.
 */
export type ClinvarAgeType = 'minimum' | 'maximum' | 'single'

/**
 * Local enumeration for an age unit.
 */
export type ClinvarAgeUnit =
  | 'days'
  | 'weeks'
  | 'months'
  | 'years'
  | 'weeks_gestation'
  | 'months_gestation'

/**
 * Used to bundle different types of Classifications (germline,
 * oncogenic, somatic clinical impact) ; Supports summary as
 * well as submission details.
 *
 * NB: called "typeAggregateClassificationSet" in XSD.
 */
export type ClinvarAggregateClassificationSet = {
  germline_classification?: null | ClinvarAggregatedGermlineClassification
  somatic_clinical_impact?: null | ClinvarAggregatedSomaticClinicalImpact
  oncogenicity_classification?: null | ClinvarAggregatedOncogenicityClassification
}

/**
 * Aggregated germline classification info.
 *
 * Corresponds to ``typeAggregatedGermlineClassification`` in XSD.
 *
 * nested elements
 */
export type ClinvarAggregatedGermlineClassification = {
  /**
   * The aggregate review status based on all germline submissions
   * for this record.
   */
  review_status: ClinvarAggregateGermlineReviewStatus
  /**
   * We are not providing an enumeration for the values we report
   * for germline classification within the xsd. Details are in
   * <https://github.com/ncbi/clinvar/ClassificationOnClinVar.md>
   *
   */
  description?: string | null
  explanation?: null | ClinvarComment
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * History information.
   */
  history_records: Array<ClinvarDescriptionHistory>
  /**
   * List of conditions.
   */
  conditions: Array<ClinvarTraitSet>
  /**
   * Date of last evaluation.
   */
  date_last_evaluated?: string | null
  /**
   * Date of creation.
   */
  date_created?: string | null
  /**
   * Date of most recent submission.
   */
  most_recent_submission?: string | null
  /**
   * Number of submitters.
   */
  number_of_submitters?: number | null
  /**
   * Number of submissions.
   */
  number_of_submissions?: number | null
}

/**
 * Aggregated oncogenicity classification info.
 *
 * nested elements
 */
export type ClinvarAggregatedOncogenicityClassification = {
  /**
   * The aggregate review status based on all somatic clinical
   * impact submissions for this record.
   */
  review_status: ClinvarAggregateOncogenicityReviewStatus
  /**
   * We are not providing an enumeration for the values we report
   * for somatic clinical impact classification within the xsd. Details are in
   * <https://github.com/ncbi/clinvar/ClassificationOnClinVar.md>
   */
  description?: string | null
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * History information.
   */
  history_records: Array<ClinvarDescriptionHistory>
  /**
   * List of conditions.
   */
  conditions: Array<ClinvarTraitSet>
  /**
   * Date of last evaluation.
   */
  date_last_evaluated?: string | null
  /**
   * Date of creation.
   */
  date_created?: string | null
  /**
   * Date of most recent submission.
   */
  most_recent_submission?: string | null
  /**
   * Number of submitters.
   */
  number_of_submitters?: number | null
  /**
   * Number of submissions.
   */
  number_of_submissions?: number | null
}

/**
 * Aggregated somatic clinical impact info.
 *
 * nested elements
 */
export type ClinvarAggregatedSomaticClinicalImpact = {
  /**
   * The aggregate review status based on all somatic clinical
   * impact submissions for this record.
   */
  review_status: ClinvarAggregateSomaticClinicalImpactReviewStatus
  /**
   * We are not providing an enumeration for the values we report
   * for somatic clinical impact classification within the xsd. Details are in
   * <https://github.com/ncbi/clinvar/ClassificationOnClinVar.md>
   */
  description?: string | null
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * History information.
   */
  history_records: Array<ClinvarDescriptionHistory>
  /**
   * List of conditions.
   */
  conditions: Array<ClinvarTraitSet>
  /**
   * Date of last evaluation.
   */
  date_last_evaluated?: string | null
  /**
   * Date of creation.
   */
  date_created?: string | null
  /**
   * Date of most recent submission.
   */
  most_recent_submission?: string | null
  /**
   * Number of submitters.
   */
  number_of_submitters?: number | null
  /**
   * Number of submissions.
   */
  number_of_submissions?: number | null
}

/**
 * Enumeration describing aggregate germline review status value.
 */
export type ClinvarAggregateGermlineReviewStatus =
  | 'no_classification_provided'
  | 'no_assertion_criteria_provided'
  | 'criteria_provided_single_submitter'
  | 'criteria_provided_multiple_submitters_no_conflicts'
  | 'criteria_provided_conflicting_classifications'
  | 'reviewed_by_expert_panel'
  | 'practice_guideline'
  | 'no_classifications_from_unflagged_records'
  | 'no_classification_for_the_single_variant'

/**
 * Enumeration describing aggregate oncogenicity review status value.
 */
export type ClinvarAggregateOncogenicityReviewStatus =
  | 'no_classification_provided'
  | 'no_assertion_criteria_provided'
  | 'criteria_provided_single_submitter'
  | 'criteria_provided_multiple_submitters_no_conflicts'
  | 'criteria_provided_conflicting_classifications'
  | 'reviewed_by_expert_panel'
  | 'practice_guideline'
  | 'no_classifications_from_unflagged_records'
  | 'no_classification_for_the_single_variant'

/**
 * Enumeration describing aggregate somatic clinical impact review status value.
 */
export type ClinvarAggregateSomaticClinicalImpactReviewStatus =
  | 'no_classification_provided'
  | 'no_assertion_criteria_provided'
  | 'criteria_provided_single_submitter'
  | 'criteria_provided_multiple_submitters'
  | 'reviewed_by_expert_panel'
  | 'practice_guideline'
  | 'no_classifications_from_unflagged_records'
  | 'no_classification_for_the_single_variant'

/**
 * This is a record per variant (Measure/@ID,AlleleID).
 *
 * Corresponds to "typeAllele" in XSD.
 */
export type ClinvarAllele = {
  /**
   * Gene list.
   */
  genes: Array<ClinvarAlleleGene>
  /**
   * Name.
   */
  name: string
  /**
   * Canonical SPDI.
   */
  canonical_spdi?: string | null
  /**
   * Variant type(s).
   */
  variant_types: Array<string>
  /**
   * Location.
   */
  locations: Array<ClinvarLocation>
  /**
   * List of other names.
   */
  other_names: Array<ClinvarOtherName>
  /**
   * These are the single-letter representations of the protein change.
   */
  protein_changes: Array<string>
  /**
   * List of HGVS expressions.
   */
  hgvs_expressions: Array<ClinvarHgvsExpression>
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * List of functional consequences.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  /**
   * Allele frequencies.
   */
  allele_frequencies: Array<ClinvarAlleleFrequency>
  global_minor_allele_frequency?: null | ClinvarGlobalMinorAlleleFrequency
  /**
   * Allele ID.
   */
  allele_id: number
  /**
   * Variation ID.
   */
  variation_id: number
}

/**
 * This is to be used within co-occurrence set.
 *
 * Corresponds to `typeAlleleDescr` in XSD.
 */
export type ClinvarAlleleDescription = {
  /**
   * The name of the allele.
   */
  name: string
  relative_orientation?: null | ClinvarRelativeOrientation
  zygosity?: null | ClinvarZygosity
  clinical_significance?: null | ClinvarClinicalSignificance
}

/**
 * Local type for allele frequency.
 */
export type ClinvarAlleleFrequency = {
  /**
   * Value.
   */
  value: number
  /**
   * Source.
   */
  source: string
  /**
   * URL.
   */
  url?: string | null
}

/**
 * Local type for Gene.
 *
 * nested elements
 */
export type ClinvarAlleleGene = {
  /**
   * Gene's locations.
   */
  locations: Array<ClinvarLocation>
  /**
   * OMIM ID.
   */
  omims: Array<number>
  haploinsufficiency?: null | ClinvarDosageSensitivity
  triplosensitivity?: null | ClinvarDosageSensitivity
  /**
   * Used to set key words for retrieval or
   * display about a gene, such as genes listed by the
   * ACMG guidelines.
   */
  properties: Array<string>
  /**
   * Optional gene symbol.
   */
  symbol?: string | null
  /**
   * Full gene name.
   */
  full_name: string
  /**
   * Gene ID.
   */
  gene_id: number
  /**
   * Optional HGNC ID.
   */
  hgnc_id?: string | null
  /**
   * Source of gene (calculated or submitted).
   */
  source: string
  relationship_type?: null | ClinvarGeneVariantRelationship
}

/**
 * Local type for allele name.
 */
export type ClinvarAlleleName = {
  /**
   * The name's value.
   */
  value: string
  /**
   * The name's type.
   */
  type?: string | null
}

/**
 * This is a record per variant (Measure/@ID,AlleleID) as submitted for
 * accessioning in an SCV.
 *
 * Corresponds to "typeAlleleSCV" in XSD.
 */
export type ClinvarAlleleScv = {
  /**
   * 0 to many genes (and related data ) related to the allele
   * being reported.
   */
  genes: Array<ClinvarAlleleScvGene>
  name?: null | ClinvarOtherName
  /**
   * Variant type.
   */
  variant_type?: string | null
  location?: null | ClinvarLocation
  /**
   * List of other names.
   */
  other_names: Array<ClinvarOtherName>
  /**
   * Single letter representation of the amino acid change and its
   * location.
   */
  protein_changes: Array<string>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Currently redundant with the MolecularConsequence element of
   * the HGVS element?
   */
  molecular_consequences: Array<ClinvarMolecularConsequence>
  /**
   * Functional consequences.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  /**
   * Attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * Allele ID.
   */
  allele_id?: number | null
}

/**
 * Local type for Gene.
 *
 * nested elements
 */
export type ClinvarAlleleScvGene = {
  /**
   * Gene name.
   */
  name?: string | null
  /**
   * Used to set key words for retrieval or
   * display about a gene, such as genes listed by the
   * ACMG guidelines.
   */
  properties: Array<string>
  /**
   * Used for gene specific identifiers
   * such as MIM number, Gene ID, HGNC ID, etc.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Optional gene symbol.
   */
  symbol?: string | null
  relationship_type?: null | ClinvarGeneVariantRelationship
}

/**
 * Local enum for the assembly status.
 */
export type ClinvarAssemblyStatus = 'current' | 'previous'

/**
 * Enumeration describing assertion type attributes.
 */
export type ClinvarAssertion =
  | 'variation_to_disease'
  | 'variation_to_included_disease'
  | 'variation_in_modifier_gene_to_disease'
  | 'confers_sensitivity'
  | 'confers_resistance'
  | 'variant_to_named_protein'

/**
 * Extend the BaseAttribute with a `type` field.
 */
export type ClinvarAttribute = {
  base?: null | ClinvarBaseAttribute
  /**
   * The type of the attribute.
   */
  type: string
}

/**
 * Common type for an entry in a set of attributes.
 *
 * Called ``typeAttributeSet`` in XSD.
 */
export type ClinvarAttributeSetElement = {
  attribute?: null | ClinvarAttribute
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
}

/**
 * Local enum for types.
 */
export type ClinvarAttributeSetElementType =
  | 'mode_of_inheritance'
  | 'penetrance'
  | 'age_of_onset'
  | 'severity'
  | 'classification_history'
  | 'severity_description'
  | 'assertion_method'

/**
 * The attribute is a general element to represent a defined set of data
 * qualified by an enumerated set of types. For each attribute element, the value will
 * be a character string and is optional. Source shall be used to store identifiers for
 * supplied data from source other than the submitter (e.g. SequenceOntology). The data
 * submitted where Type="variation" shall be validated against sequence_alternation in
 * Sequence Ontology <http://www.sequenceontology.org/.> This is to be a generic version
 * of AttributeType and should be used with extension when it is used to specify Type
 * and its enumerations.
 */
export type ClinvarBaseAttribute = {
  /**
   * The attribute's value; can be empty.
   */
  value?: string | null
  /**
   * The optional integer value.
   */
  integer_value?: number | null
  /**
   * The optional date value.
   */
  date_value?: string | null
}

/**
 * Enumeration describing chromosome.
 */
export type ClinvarChromosome =
  | 'chromosome1'
  | 'chromosome2'
  | 'chromosome3'
  | 'chromosome4'
  | 'chromosome5'
  | 'chromosome6'
  | 'chromosome7'
  | 'chromosome8'
  | 'chromosome9'
  | 'chromosome10'
  | 'chromosome11'
  | 'chromosome12'
  | 'chromosome13'
  | 'chromosome14'
  | 'chromosome15'
  | 'chromosome16'
  | 'chromosome17'
  | 'chromosome18'
  | 'chromosome19'
  | 'chromosome20'
  | 'chromosome21'
  | 'chromosome22'
  | 'x'
  | 'y'
  | 'mt'
  | 'par'
  | 'un'

/**
 * Description of a citation.
 */
export type ClinvarCitation = {
  /**
   * Optional list of IDs.
   */
  ids: Array<ClinvarIdType>
  /**
   * Optional URL.
   */
  url?: string | null
  /**
   * Optional citation text.
   */
  citation_text?: string | null
  /**
   * This maintained distinct from publication types in PubMed and
   * established by GTR curators.  The default is 'general'.
   */
  type?: string | null
  /**
   * Corresponds to the abbreviation reported by GTR.
   */
  abbrev?: string | null
}

/**
 * Classification score description.
 */
export type ClinvarClassificationScore = {
  /**
   * The score's value.
   */
  value: number
  /**
   * The score's type; optional.
   */
  type?: string | null
}

/**
 * Report classification of a variant for a SCV.
 *
 * Corresponds to `ClassificationTypeSCV` in XSD.
 */
export type ClinvarClassificationScv = {
  /**
   * The field's review status.
   */
  review_status: ClinvarSubmitterReviewStatus
  /**
   * The germline classification; mutually exlusive with `somatic_clinical_impact`
   * and `oncogenicity_classification`.
   */
  germline_classification?: string | null
  somatic_clinical_impact?: null | ClinvarClassificationScvSomaticClinicalImpact
  /**
   * The oncogenicity classification; mutually exlusive with `germline_classification`
   * and `oncogenicity_classification`.
   */
  oncogenicity_classification?: string | null
  /**
   * Optional explanation of classification.
   */
  explanation_of_classification?: string | null
  /**
   * List of classification scores.
   */
  classification_scores: Array<ClinvarClassificationScore>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Date of last evaluation.
   */
  date_last_evaluated?: string | null
}

/**
 * Clinical impact of a somatic variatn.
 */
export type ClinvarClassificationScvSomaticClinicalImpact = {
  /**
   * The somatic clinical impact value.
   */
  value: string
  /**
   * Type of the clinical impact assertion.
   */
  clinical_impact_assertion_type?: string | null
  /**
   * Clinical impact significance.
   */
  clinical_impact_clinical_significance?: string | null
  /**
   * Name of the drug for the therapeutic assertion.
   */
  drug_for_therapeutic_assertion?: string | null
}

/**
 * Interpreted condition for an RCV record.
 *
 * Corresponds to `typeRCVInterpretedCondition` in XSD.
 */
export type ClinvarClassifiedCondition = {
  /**
   * Condition value.
   */
  value: string
  /**
   * Database name.
   */
  db?: string | null
  /**
   * Identifier in database.
   */
  id?: string | null
}

/**
 * This element is restricted to variation records for which an explicit
 * classification was submitted.  Compare to IncludedRecord, which provides aggregate
 * information about variants that are part of another submission, but for which
 * ClinVar has *not* received a submission specific to that variant independently.
 */
export type ClinvarClassifiedRecord = {
  simple_allele?: null | ClinvarAllele
  haplotype?: null | ClinvarHaplotype
  genotype?: null | ClinvarGenotype
  rcv_list?: null | ClinvarRcvList
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * List of clinical assertions.
   */
  clinical_assertions: Array<ClinvarClinicalAssertion>
  /**
   * This element is used to report how each user-submitted
   * trait name was mapped to a MedGen CUI identifier and a preferred name.
   * The structure may be used in the future to report, when a trait is
   * identified by a source's identifier (e.g. MIM number), the preferred
   * name used by that source at the time of submission. For MappingType
   * XRef, MappingRef is the database name and MappingValue is the database's
   * identifier. For MappingType Name, MappingRef is Alternate or Preferred,
   * and MappingValue is the submitted name of the trait. ClinicalAssertionID
   * is an integer identifier that corresponds 1:1 to the SCV assigned to the
   * submission.
   */
  trait_mappings: Array<ClinvarRcvTraitMapping>
  /**
   * List of deleted SCVs.
   */
  deleted_scvs: Array<ClinvarDeletedScv>
  /**
   * List of general citations.
   */
  general_citations: Array<ClinvarGeneralCitations>
}

/**
 * Local type for tag `ClassifiedVariation`.
 */
export type ClinvarClassifiedVariation = {
  /**
   * Variation ID.
   */
  variation_id: number
  /**
   * Optional accession.
   */
  accession?: string | null
  /**
   * Version.
   */
  version: number
}

/**
 * A clinical assertion as submitted (SCV record).
 *
 * Corresponds to `MeasureTraitType` in XSD and `<ClinicalAssertion>` in XML
 */
export type ClinvarClinicalAssertion = {
  clinvar_submission_id?: null | ClinvarSubmissionId
  clinvar_accession?: null | ClinvarAccession
  /**
   * Optional list of additional submitters.
   */
  additional_submitters: Array<ClinvarSubmitter>
  /**
   * Record status.
   */
  record_status: ClinvarClinicalAssertionRecordStatus
  /**
   * Replaces; mutually exclusive with replaceds
   */
  replaces: Array<string>
  /**
   * Replaced list; mutually exclusive with replaces
   */
  replaceds: Array<ClinvarClinicalAssertionRecordHistory>
  classifications?: null | ClinvarClassificationScv
  /**
   * The assertion.
   */
  assertion: ClinvarAssertion
  /**
   * Attributes.
   */
  attributes: Array<ClinvarClinicalAssertionAttributeSetElement>
  /**
   * Observed in.
   */
  observed_ins: Array<ClinvarObservedIn>
  simple_allele?: null | ClinvarAlleleScv
  haplotype?: null | ClinvarHaplotypeScv
  genotype?: null | ClinvarGenotypeScv
  trait_set?: null | ClinvarTraitSet
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * Optional study name.
   */
  study_name?: string | null
  /**
   * Optional study description.
   */
  study_description?: string | null
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * List of submissions.
   */
  submission_names: Array<string>
  /**
   * Date of creation.
   */
  date_created?: string | null
  /**
   * Date of creation.
   */
  date_last_updated?: string | null
  /**
   * Date of creation.
   */
  submission_date?: string | null
  /**
   * ID.
   */
  id?: number | null
  /**
   * Whether it is an FDA recognized database.
   */
  fda_recognized_database?: boolean | null
}

/**
 * Local type for attribute set.
 */
export type ClinvarClinicalAssertionAttributeSetElement = {
  attribute?: null | ClinvarBaseAttribute
  /**
   * The type of the attribute.
   */
  type: ClinvarAttributeSetElementType
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
}

/**
 * Inside ClinicalAssertion, a structure to support reporting of an
 * accession, its version, the date its status changed, and text describing that
 * change.
 *
 * Corresponds to `typeClinicalAssertionRecordHistory` in XSD.
 */
export type ClinvarClinicalAssertionRecordHistory = {
  comment?: null | ClinvarComment
  /**
   * Accession.
   */
  accession: string
  /**
   * Optional version.
   */
  version?: number | null
  /**
   * Date of the record.
   */
  date_changed?: string | null
}

/**
 * Local enum for record status.
 */
export type ClinvarClinicalAssertionRecordStatus = 'current' | 'replaced' | 'removed'

/**
 * Enumeration describing clinical features affected status.
 */
export type ClinvarClinicalFeaturesAffectedStatusType = 'present' | 'absent' | 'not_tested'

/**
 * Describes the clinical significance of a variant.
 *
 * Corresponds to `ClinicalSignificanceType` in XSD.
 *
 * contained elements
 */
export type ClinvarClinicalSignificance = {
  review_status?: null | ClinvarSubmitterReviewStatus
  /**
   * Structure used to support old data of AlleleDescriptionSet
   * within Co-occurenceSet.
   *
   * NB: unused in XML
   */
  description?: string | null
  explanation?: null | ClinvarComment
  /**
   * Optional list of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Optional list of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * Optional list of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Date of last evaluation.
   *
   * NB: unused in XML
   */
  date_last_evaluated?: string | null
}

/**
 * A structure to support reporting unformatted content, with type and
 * source specified.
 */
export type ClinvarComment = {
  /**
   * The comment's value.
   */
  value: string
  /**
   * The optional comment data source.
   */
  data_source?: string | null
  type?: null | ClinvarCommentType
}

/**
 * Enumeration describing comment type.
 */
export type ClinvarCommentType =
  | 'public'
  | 'converted_by_ncb'
  | 'missing_from_assembly'
  | 'genomic_location_not_established'
  | 'location_on_genome_and_product_not_aligned'
  | 'deletion_comment'
  | 'merge_comment'
  | 'assembly_specific_allele_definition'
  | 'alignment_gap_makes_appear_inconsistent'
  | 'explanation_of_classification'
  | 'flagged_comment'

/**
 * This refers to the zygosity of the variant being asserted.
 */
export type ClinvarCooccurrence = {
  zygosity?: null | ClinvarZygosity
  /**
   * The allele descriptions.
   */
  allele_descriptions: Array<ClinvarAlleleDescription>
  /**
   * The optional count.
   */
  count?: number | null
}

/**
 * A structure to support reporting of an accession, its version, the
 * date it was deleted and a free-text summary of why it was deleted.
 *
 * Corresponds to `typeDeletedSCV`.
 */
export type ClinvarDeletedScv = {
  /**
   * The accession.
   */
  accession: string
  /**
   * The version.
   */
  version: number
  /**
   * The date of deletion.
   */
  date_deleted?: string | null
}

/**
 * Description of the history of a record.
 *
 * Called ``typeDescriptionHistory`` in XSD.
 */
export type ClinvarDescriptionHistory = {
  /**
   * The pathogenicity description.
   */
  description: string
  /**
   * The date of the description.
   */
  dated?: string | null
}

/**
 * Haploinsufficiency/Triplosensitivity of gene.
 *
 * nested elements
 */
export type ClinvarDosageSensitivity = {
  /**
   * Value.
   */
  value: string
  /**
   * Optional last evaluated date.
   */
  last_evaluated?: string | null
  /**
   * URL to ClinGen.
   */
  clingen?: string | null
}

/**
 * Enumeration describing evidence type.
 *
 * Corresponds to "EvidenceType" in XSD.
 */
export type ClinvarEvidenceType = 'genetic' | 'experimental' | 'population' | 'computational'

/**
 * Protocol buffer for storing essential information of one RCV.
 */
export type ClinvarExtractedRcvRecord = {
  accession?: null | ClinvarVersionedAccession
  /**
   * Title of RCV.
   */
  title: string
  classifications?: null | ClinvarRcvClassifications
}

/**
 * Enumeration for the type of the variant.
 */
export type ClinvarExtractedVariationType =
  | 'insertion'
  | 'deletion'
  | 'snv'
  | 'indel'
  | 'duplication'
  | 'tandem_duplication'
  | 'structural_variant'
  | 'copy_number_gain'
  | 'copy_number_loss'
  | 'protein_only'
  | 'microsatellite'
  | 'inversion'
  | 'other'

/**
 * Protocol buffer for storing essential information of one VCV.
 */
export type ClinvarExtractedVcvRecord = {
  accession?: null | ClinvarVersionedAccession
  /**
   * List of aggregated RCVs.
   */
  rcvs: Array<ClinvarExtractedRcvRecord>
  /**
   * Name of VCV.
   */
  name: string
  /**
   * The type of the variant.
   */
  variation_type: ClinvarExtractedVariationType
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * Clinical assertions (thinned out),
   */
  clinical_assertions: Array<ClinvarClinicalAssertion>
  sequence_location?: null | ClinvarSequenceLocation
  /**
   * List of HGNC IDs.
   */
  hgnc_ids: Array<string>
}

/**
 * Structure to describe attributes of any family data in an observation.
 * If the details of the number of families and the de-identified pedigree id are not
 * available, use FamilyHistory to describe what type of family data is available. Can
 * also be used to report 'Yes' or 'No' if there are no more details.
 *
 * Corresponds to "FamilyInfo" in XSD.
 *
 * nested elements
 */
export type ClinvarFamilyData = {
  /**
   * Optional family history.
   */
  family_history?: string | null
  /**
   * Number of families.
   */
  num_families?: number | null
  /**
   * Number of families with variant.
   */
  num_families_with_variant?: number | null
  /**
   * Number of families with segregation observed.
   */
  num_families_with_segregation_observed?: number | null
  /**
   * Pedigree ID.
   */
  pedigree_id?: string | null
  /**
   * Segregation oberved (yes, no, number)
   */
  segregation_observed?: string | null
}

/**
 * Description of a functional consequence.
 *
 * Corresponds to `typeFunctionalConsequence` in XSD.
 *
 * nested elements
 */
export type ClinvarFunctionalConsequence = {
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Value of functional consequence.
   */
  value: string
}

/**
 * Local enumeration for gender.
 */
export type ClinvarGender = 'male' | 'female' | 'mixed'

/**
 * Type for the tag `GeneralCitations`.
 */
export type ClinvarGeneralCitations = {
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
}

/**
 * Entry in an element set.
 *
 * Called ``SetElementSetType`` in XSD.
 */
export type ClinvarGenericSetElement = {
  /**
   * The element's value.
   */
  value: string
  /**
   * The element's type.
   */
  type: string
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
}

/**
 * Enumeration describing connection between genes and variants.
 *
 * Corresponds to XSD type "GeneVariantRelationship".
 */
export type ClinvarGeneVariantRelationship =
  | 'variant_within_gene'
  | 'gene_overlapped_by_variant'
  | 'near_gene_upstream'
  | 'near_gene_downstream'
  | 'asserted_but_not_computed'
  | 'within_multiple_genes_by_overlap'
  | 'within_single_gene'

/**
 * Used to report genotypes, be they simple or complex diplotypes.
 *
 * Corresponds to "typeGenotype" in XSD.
 *
 * nested elements
 */
export type ClinvarGenotype = {
  /**
   * Simple allele; mutually exclusive with `haplotype`.
   */
  simple_alleles: Array<ClinvarAllele>
  /**
   * Haplotype; mutually exclusive with `simple_allele`.
   *
   * Allows more than 2 haplotypes per genotype to support
   * representation of ploidy.
   */
  haplotypes: Array<ClinvarHaplotype>
  /**
   * Optional name.
   */
  name: string
  /**
   * The variation type.
   */
  variation_type: ClinvarVariationType
  /**
   * Names other than 'preferred' used for the Genotype.
   */
  other_names: Array<ClinvarOtherName>
  /**
   * HGVS descriptions.
   */
  hgvs_expressions: Array<ClinvarHgvsExpression>
  /**
   * Functional consequences.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * Variation ID.
   */
  variation_id?: number | null
}

/**
 * Used to report genotypes, be they simple or complex diplotypes.
 *
 * Corresponds to "typeGenotypeSCV" in XSD.
 *
 * nested elements
 */
export type ClinvarGenotypeScv = {
  /**
   * Simple alleles; mutually exclusive with `haplotypes`.
   */
  simple_alleles: Array<ClinvarAlleleScv>
  /**
   * Haplotype; mutually exclusive with `simple_alleles`.
   *
   * Allows more than 2 haplotypes per genotype to support
   * representation of ploidy.
   */
  haplotypes: Array<ClinvarHaplotypeScv>
  /**
   * Optional name.
   */
  name?: string | null
  /**
   * Other names used for the genotype.
   */
  other_names: Array<ClinvarOtherName>
  /**
   * The variation type.
   */
  variation_type: ClinvarVariationType
  /**
   * Functional consequences.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  /**
   * Attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Variation ID.
   */
  variation_id?: number | null
}

/**
 * Local type for GlobalMinorAlleleFrequency.
 */
export type ClinvarGlobalMinorAlleleFrequency = {
  /**
   * Value.
   */
  value: number
  /**
   * Source.
   */
  source: string
  /**
   * Minor allele.
   */
  minor_allele?: string | null
  /**
   * URL.
   */
  url?: string | null
}

/**
 * This is a record of one or more simple alleles on the same chromosome
 * molecule.
 *
 * Corresponds to `typeHaplotype` in XSD
 */
export type ClinvarHaplotype = {
  /**
   * The list of alleles in the haplotype.
   */
  simple_alleles: Array<ClinvarAllele>
  /**
   * The preferred representation of the haplotype.
   */
  name: string
  /**
   * The type of the haplotype.
   */
  variation_type: ClinvarVariationType
  /**
   * Names other than 'preferred' used for the haplotype.
   */
  other_names: Array<ClinvarOtherName>
  /**
   * List of all the HGVS expressions valid for, or used to submit,
   * a variant.
   */
  hgvs_expressions: Array<ClinvarHgvsExpression>
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * Functional consequences of the variant.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  /**
   * List of cross-references.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Variation ID.
   */
  variation_id: number
  /**
   * Number of copies.
   */
  number_of_copies?: number | null
  /**
   * Number of chromosomes.
   */
  number_of_chromosomes?: number | null
}

/**
 * This is a record of a haplotype in SCV.
 *
 * Corresponds to `typeHaplotypeSCV` in XSD.
 */
export type ClinvarHaplotypeScv = {
  /**
   * The list of alleles in the haplotype.
   */
  simple_alleles: Array<ClinvarAlleleScv>
  /**
   * The preferred representation of the haplotype.
   */
  name?: string | null
  /**
   * Names other than 'preferred' used for the haplotype.
   */
  other_names: Array<ClinvarOtherName>
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * Functional consequences of the variant.
   */
  functional_consequences: Array<ClinvarFunctionalConsequence>
  /**
   * List of attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of cross-references.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * Variation ID.
   */
  variation_id?: number | null
  /**
   * Number of copies.
   */
  number_of_copies?: number | null
  /**
   * Number of chromosomes.
   */
  number_of_chromosomes?: number | null
}

/**
 * Enumeration describing haplotype variation types.
 */
export type ClinvarHaploVariationType =
  | 'haplotype'
  | 'haplotype_single_variant'
  | 'variation'
  | 'phase_unknown'
  | 'haplotype_defined_by_single_variant'

/**
 * A structure to represent an HGVS expression for a nucleotide sequence
 * variant, along with the predicted protein change and the predicted molecular
 * consequence. Also used to represent only the protein change if that is all that has
 * been reported.
 *
 * Corresponds to `typeHVSExpression` in XSD.
 *
 * nested elements
 */
export type ClinvarHgvsExpression = {
  nucleotide_expression?: null | ClinvarHgvsNucleotideExpression
  protein_expression?: null | ClinvarHgvsProteinExpression
  /**
   * List of molecular consequences.
   */
  molecular_consequences: Array<ClinvarXref>
  /**
   * Type of HGVS expression.
   */
  type: ClinvarHgvsType
  /**
   * Optional assembly.
   */
  assembly?: string | null
}

/**
 * Description of a nucleotide sequence expression.
 *
 * Corresponds to `typeNucleotideSequenceExpression`
 */
export type ClinvarHgvsNucleotideExpression = {
  /**
   * The expression values.
   */
  expression: string
  sequence_type?: null | ClinvarNucleotideSequence
  /**
   * Optional sequence accession version.
   */
  sequence_accession_version?: string | null
  /**
   * Optional sequence accession.
   */
  sequence_accession?: string | null
  /**
   * Optional sequence version.
   */
  sequence_version?: number | null
  /**
   * Optional description of the change.
   */
  change?: string | null
  /**
   * Optional assembly information.
   */
  assembly?: string | null
  /**
   * Optional submission information.
   */
  submitted?: string | null
  /**
   * Optional MANE Select flag.
   */
  mane_select?: boolean | null
  /**
   * Optional MANE Plus Clinical flag.
   */
  mane_plus_clinical?: boolean | null
}

/**
 * Description of a protein sequence expression.
 *
 * Corresponds to `typeProteinSequenceExpression` in XSD.
 */
export type ClinvarHgvsProteinExpression = {
  /**
   * The expression values.
   */
  expression: string
  /**
   * Optional sequence accession version.
   */
  sequence_accession_version?: string | null
  /**
   * Optional sequence accession.
   */
  sequence_accession?: string | null
  /**
   * Optional sequence version.
   */
  sequence_version?: number | null
  /**
   * Optional description of the change.
   */
  change?: string | null
}

/**
 * Enumeration describing HGVS types.
 */
export type ClinvarHgvsType = 'coding' | 'genomic' | 'genomic_top_level' | 'non_coding' | 'protein'

/**
 * Local ID with source.
 */
export type ClinvarIdType = {
  /**
   * The citation's value.
   */
  value: string
  /**
   * If there is an identifier, what database provides it.
   */
  source: string
}

/**
 * This element is used for alleles that were not directly part of a
 * submission but were part of a complex submission. They have no direct submitted
 * classification, but are being reported for a complete representation of all alleles
 * in ClinVar. Compare to ClassifiedRecord.
 */
export type ClinvarIncludedRecord = {
  simple_allele?: null | ClinvarAllele
  haplotype?: null | ClinvarHaplotype
  classifications?: null | ClinvarAggregateClassificationSet
  /**
   * List of submitted records.
   */
  submitted_classifications: Array<ClinvarScv>
  /**
   * Maintains the list of classified variants represented in
   * this submission, although not submitted with an Classification
   * independently.
   */
  classified_variations: Array<ClinvarClassifiedVariation>
  /**
   * List of general citations.
   */
  general_citations: Array<ClinvarGeneralCitations>
}

/**
 * Describes an indication.
 *
 * NB: Called "IndicationType" in the XSD.
 */
export type ClinvarIndication = {
  /**
   * Represents the value for the test indication as a name of a trait.
   */
  traits: Array<ClinvarTrait>
  /**
   * List of names.
   */
  names: Array<ClinvarGenericSetElement>
  /**
   * List of attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * The type of indication.
   */
  type: ClinvarIndicationType
}

/**
 * Enumeration for the indication type.
 */
export type ClinvarIndicationType = 'indication'

/**
 * There can be multiple types of location, and the locations may have
 * identifiers in other databases.
 *
 * Corresponds to `typeLocation` in XSD.
 */
export type ClinvarLocation = {
  /**
   * Cytogenetic location is maintained independent of sequence
   * location, and can be submitted or computed from the sequence location.
   *
   * Between 0 and 4 entries.
   */
  cytogenetic_locations: Array<string>
  /**
   * Location on a defined sequence, with reference and alternate
   * allele, and start /stop values depending on the specificity with which the
   * variant location is known. The number system of offset 1, and
   * right-justified to be consistent with HGVS location data.
   */
  sequence_locations: Array<ClinvarSequenceLocation>
  /**
   * The location of the variant relative to features within the gene.
   */
  gene_locations: Array<string>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
}

/**
 * Details of a method used to generate variant calls or predict/report
 * functional consequence. The name of the platform should represent a sequencer or an
 * array, e.g. sequencing or array , e.g. capillary, 454, Helicos, Solexa, SOLiD. This
 * structure should also be used if the method is 'Curation'.
 *
 * Corresponds to `MethodType` in XSD.
 */
export type ClinvarMethod = {
  /**
   * Platform name.
   */
  name_platform?: string | null
  /**
   * Platform type.
   */
  type_platform?: string | null
  /**
   * Method purpose.
   */
  purpose?: string | null
  result_type?: null | ClinvarResultType
  /**
   * Smallest reported.
   */
  min_reported?: string | null
  /**
   * Largest reported.
   */
  max_reported?: string | null
  /**
   * Reference standard.
   */
  reference_standard?: string | null
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Free text to enrich the description of the method and to
   * provide information not captured in specific fields.
   */
  description?: string | null
  /**
   * List of softwares used.
   */
  software: Array<ClinvarSoftware>
  source_type?: null | ClinvarMethodSourceType
  /**
   * Method type.
   */
  method_type: ClinvarMethodListType
  /**
   * Method attribute.
   */
  method_attributes: Array<ClinvarMethodAttribute>
  /**
   * ObsMethodAttribute is used to indicate an attribute specific
   * to a particular method in conjunction with a particular observation .
   */
  obs_method_attributes: Array<ClinvarObsMethodAttribute>
}

/**
 * Local type for method attribute.
 */
export type ClinvarMethodAttribute = {
  base?: null | ClinvarBaseAttribute
  /**
   * The attribute type.
   */
  type: ClinvarMethodAttributeType
}

/**
 * Local enumeration of attribute type.
 */
export type ClinvarMethodAttributeType =
  | 'location'
  | 'controls_appropriate'
  | 'method_appropriate'
  | 'test_name'
  | 'struct_var_method_type'
  | 'probe_accession'

/**
 * Enumeration describing method list.
 *
 * Corresponds to "MethodListType" in XSD.
 */
export type ClinvarMethodListType =
  | 'literature_only'
  | 'reference_population'
  | 'case_control'
  | 'clinical_testing'
  | 'in_vitro'
  | 'in_vivo'
  | 'research'
  | 'curation'
  | 'not_provided'
  | 'provider_interpretation'
  | 'phenotyping_only'

/**
 * Local enumeration for SourceType.
 */
export type ClinvarMethodSourceType = 'submitter_generated' | 'data_mining' | 'data_review'

/**
 * Local enum for the method type.
 */
export type ClinvarMethodType =
  | 'literature_only'
  | 'reference_population'
  | 'case_control'
  | 'clinical_testing'
  | 'in_vitro'
  | 'in_vivo'
  | 'inferred_from_source'
  | 'research'

/**
 * Local type for MolecularConsequence.
 *
 * nested elements
 */
export type ClinvarMolecularConsequence = {
  /**
   * Xref list.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Citation list.
   */
  citations: Array<ClinvarCitation>
  /**
   * Comment list.
   */
  comments: Array<ClinvarComment>
  /**
   * RS id.
   */
  rs?: number | null
  /**
   * Optional HGVS expression.
   */
  hgvs?: string | null
  /**
   * Optional SO id.
   */
  so_id?: string | null
  /**
   * Function.
   */
  function: string
}

/**
 * Enumeration describing nucleotide sequence.
 */
export type ClinvarNucleotideSequence =
  | 'genomic_top_level'
  | 'genomic_ref_seq_gene'
  | 'genomic'
  | 'coding'
  | 'non_coding'
  | 'protein'

/**
 * This is an AttributeSet, there will be 1 attribute supported
 * by optional citations, xrefs and comment. There must be at least one
 * ObservedData Set, but can be any number. For each ObservedData set the
 * Attribute will be either decimal or string depending on type. The value will
 * be stored here, but decimals will be entered to the database as a string.
 */
export type ClinvarObservedData = {
  /**
   * Attributes.
   */
  attributes: Array<ClinvarObservedDataAttribute>
  severity?: null | ClinvarSeverity
  /**
   * Citation list.
   */
  citations: Array<ClinvarCitation>
  /**
   * Xref list.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Comment list.
   */
  comments: Array<ClinvarComment>
}

/**
 * Local struct for attributes based on `BaseAttribute`.
 */
export type ClinvarObservedDataAttribute = {
  base?: null | ClinvarBaseAttribute
  /**
   * type
   */
  type: ClinvarObservedDataAttributeType
}

/**
 * Local enum for the observed data type.
 */
export type ClinvarObservedDataAttributeType =
  | 'description'
  | 'variant_alleles'
  | 'subjects_with_variant'
  | 'subjects_with_different_causative_variant'
  | 'variant_chromosomes'
  | 'independent_observations'
  | 'single_heterozygous'
  | 'compound_heterozygous'
  | 'homozygous'
  | 'hemizygous'
  | 'number_mosaic'
  | 'observed_unspecified'
  | 'allele_frequency'
  | 'secondary_finding'
  | 'genotype_and_moi_consistent'
  | 'unaffected_family_member_with_causative_variant'
  | 'het_parent_transmit_normal_allele'
  | 'cosegregating_families'
  | 'informative_meioses'
  | 'sample_local_id'
  | 'sample_variant_id'
  | 'family_history'
  | 'num_families_with_variant'
  | 'num_families_with_segregation_observed'
  | 'segregation_observed'

/**
 * Documents in what populations or samples an allele or genotype has
 * been observed relative to the described trait. Summary observations can be
 * registered per submitted assertion, grouped by common citation, study type, origin,
 * ethnicity, tissue, cell line, and species data. Not all options are valid per study
 * type, but these will not be validated in the xsd.
 *
 * Corresponds to `ObservationSet` in XSD.
 */
export type ClinvarObservedIn = {
  sample?: null | ClinvarSample
  /**
   * Observed data.
   */
  observed_data: Array<ClinvarObservedData>
  /**
   * Co-occurence set.
   */
  cooccurrence_sets: Array<ClinvarCooccurrence>
  trait_set?: null | ClinvarTraitSet
  /**
   * Citation list.
   */
  citations: Array<ClinvarCitation>
  /**
   * Xref list.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Comment list.
   */
  comments: Array<ClinvarComment>
}

/**
 * Local type for observation method attribute.
 */
export type ClinvarObsMethodAttribute = {
  base?: null | ClinvarBaseAttribute
  /**
   * The attribute type.
   */
  type: ClinvarObsMethodAttributeType
  /**
   * Optional comments.
   */
  comments: Array<ClinvarComment>
}

/**
 * Local enumeration for attribute type.
 */
export type ClinvarObsMethodAttributeType = 'method_result' | 'testing_laboratory'

/**
 * Enumeration describing origin.
 */
export type ClinvarOrigin =
  | 'germline'
  | 'somatic'
  | 'de_novo'
  | 'not_provided'
  | 'inherited'
  | 'maternal'
  | 'paternal'
  | 'uniparental'
  | 'biparental'
  | 'not_reported'
  | 'tested_inconclusive'
  | 'unknown'
  | 'not_applicable'
  | 'experimentally_generated'

/**
 * A name with an optional type.
 *
 * Corresponds to `typeNames` in XSD.
 */
export type ClinvarOtherName = {
  /**
   * The name's value.
   */
  value: string
  /**
   * The name's type.
   */
  type?: string | null
}

/**
 * Enumeration describing phenotype set.
 */
export type ClinvarPhenotypeSetType =
  | 'disease'
  | 'drug_response'
  | 'finding'
  | 'phenotype_instruction'
  | 'trait_choice'

/**
 * Enumeration describing protein sequence.
 */
export type ClinvarProteinSequence = 'protein'

/**
 * Corresponds to "typeRCV" in XSD.
 */
export type ClinvarRcvAccession = {
  classified_condition_list?: null | ClinvarRcvClassifiedConditionList
  rcv_classifications?: null | ClinvarRcvClassifications
  /**
   * The list of RCV accessions this record has replaced.
   */
  replaceds: Array<ClinvarRecordHistory>
  /**
   * Optional title.
   */
  title?: string | null
  /**
   * Accession.
   */
  accession: string
  /**
   * Version.
   */
  version: number
}

/**
 * Local type for SomaticClinicalImpact.
 *
 * The aggregate review status based on
 * all somatic clinical impact submissions for this
 * record.
 */
export type ClinvarRcvAccessionSomaticClinicalImpact = {
  /**
   * The aggregate review status based on
   * all somatic clinical impact submissions for this
   * record.
   */
  review_status: ClinvarAggregateSomaticClinicalImpactReviewStatus
  /**
   * The oncogenicity description.
   */
  descriptions: Array<ClinvarRcvSomaticClinicalImpactDescription>
}

/**
 * Local type for RCV classifications.
 */
export type ClinvarRcvClassifications = {
  germline_classification?: null | ClinvarRcvGermlineClassification
  somatic_clinical_impact?: null | ClinvarRcvAccessionSomaticClinicalImpact
  oncogenicity_classification?: null | ClinvarRcvOncogenicityClassification
}

/**
 * Local type for ClassifiedConditionList.
 *
 * nested elements
 */
export type ClinvarRcvClassifiedConditionList = {
  /**
   * List of interpreted conditions.
   */
  classified_conditions: Array<ClinvarClassifiedCondition>
  /**
   * Trait set ID.
   */
  trait_set_id?: number | null
}

/**
 * Local type for GermlineClassification.
 *
 * The aggregate review status based on
 * all germline submissions for this record.
 */
export type ClinvarRcvGermlineClassification = {
  /**
   * The aggregate review status based on
   * all somatic clinical impact submissions for this
   * record.
   */
  review_status: ClinvarAggregateGermlineReviewStatus
  description?: null | ClinvarRcvGermlineClassificationDescription
}

/**
 * Local type for Description.
 */
export type ClinvarRcvGermlineClassificationDescription = {
  /**
   * The description.
   */
  value: string
  /**
   * The date of the description.
   */
  date_last_evaluated?: string | null
  /**
   * The number of submissions.
   */
  submission_count?: number | null
}

/**
 * Local type for tag `RCVList`.
 */
export type ClinvarRcvList = {
  /**
   * The RCV record.
   */
  rcv_accessions: Array<ClinvarRcvAccession>
  /**
   * The number of submissions (SCV accessions) referencing the VariationID.
   */
  submission_count?: number | null
  /**
   * The number of idependent observations.
   */
  independent_observations?: number | null
}

/**
 * Local type for OncogenicityClassification.
 */
export type ClinvarRcvOncogenicityClassification = {
  /**
   * The aggregate review status based on
   * all oncogenic submissions for this record.
   */
  review_status: ClinvarAggregateGermlineReviewStatus
  description?: null | ClinvarRcvOncogenicityDescription
}

/**
 * Local type for Description.
 */
export type ClinvarRcvOncogenicityDescription = {
  /**
   * The description.
   */
  value: string
  /**
   * The date of the description.
   */
  date_last_evaluated?: string | null
  /**
   * The number of submissions.
   */
  submission_count?: number | null
}

/**
 * Local type for Description.
 */
export type ClinvarRcvSomaticClinicalImpactDescription = {
  /**
   * The description.
   */
  value: string
  /**
   * Clinical impact assertion type.
   */
  clinical_impact_assertion_type?: string | null
  /**
   * Clinical impact significance
   */
  clinical_impact_clinical_significance?: string | null
  /**
   * The date of the description.
   */
  date_last_evaluated?: string | null
  /**
   * The number of submissions.
   */
  submission_count?: number | null
}

/**
 * Local type for the tag `TraitMapping`.
 */
export type ClinvarRcvTraitMapping = {
  /**
   * nested elements
   */
  medgens: Array<ClinvarRcvTraitMappingMedgen>
  /**
   * ID of clinical assertion.
   */
  clinical_assertion_id: number
  /**
   * The trait type.
   */
  trait_type: string
  /**
   * The mapping type.
   */
  mapping_type: ClinvarRcvTraitMappingType
  /**
   * The mapping value.
   */
  mapping_value: string
  /**
   * The mapping reference.
   */
  mapping_ref: string
}

/**
 * Local type for the tag "MedGen"
 */
export type ClinvarRcvTraitMappingMedgen = {
  /**
   * Name.
   */
  name: string
  /**
   * CUI.
   */
  cui: string
}

/**
 * Local type for the attribute `@MappingType`.
 */
export type ClinvarRcvTraitMappingType = 'name' | 'xref'

/**
 * A structure to support reporting of an accession, its version, the
 * date its status changed, and text describing that change.
 *
 * Corresponds to `typeRecordHistory` in XSD.
 *
 * nested elements
 */
export type ClinvarRecordHistory = {
  comment?: null | ClinvarComment
  /**
   * The accession.
   */
  accession: string
  /**
   * The version.
   */
  version: number
  /**
   * The date the record.
   */
  date_changed?: string | null
  /**
   * Attribute @VaritionID is only populated for VCV, where @Accession
   * is like VCV000000009
   */
  variation_id?: number | null
}

/**
 * Enumeration for relative orientation.
 *
 * NB: unused in XML
 */
export type ClinvarRelativeOrientation = 'cis' | 'trans' | 'unknown'

/**
 * Local enumeration for result types.
 */
export type ClinvarResultType = 'number_of_occurrences' | 'p_value' | 'odds_ratio' | 'variant_call'

/**
 * Description of a sample.
 *
 * Corresponds to `typeSample` in XSD.
 */
export type ClinvarSample = {
  sample_description?: null | ClinvarSampleDescription
  origin?: null | ClinvarOrigin
  /**
   * Sample ethnicity.
   */
  ethnicity?: string | null
  /**
   * Sample geographic origin.
   */
  geographic_origin?: string | null
  /**
   * Sample tissue.
   */
  tissue?: string | null
  somatic_variant_in_normal_tissue?: null | ClinvarSomaticVariantInNormalTissue
  /**
   * Somatic variant allele fraction.
   */
  somatic_variant_allele_fraction?: string | null
  /**
   * Cell line name.
   */
  cell_line?: string | null
  species?: null | ClinvarSpecies
  /**
   * Age (range), max. size of 2.
   */
  ages: Array<ClinvarAge>
  /**
   * Strain.
   */
  strain?: string | null
  affected_status?: null | ClinvarAffectedStatus
  /**
   * Denominator, total individuals included in this observation set.
   */
  numer_tested?: number | null
  /**
   * Denominator, total males included in this observation set.
   */
  number_males?: number | null
  /**
   * Denominator, total females included in this observation set.
   */
  number_females?: number | null
  /**
   * Denominator, total number chromosomes tested. Number affected
   * and unaffected are captured in the element NumberObserved.
   */
  number_chr_tested?: number | null
  gender?: null | ClinvarGender
  family_data?: null | ClinvarFamilyData
  /**
   * Optional proband ID.
   */
  proband?: string | null
  indication?: null | ClinvarIndication
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  source_type?: null | ClinvarSampleSourceType
}

/**
 * Local type for sample description.
 */
export type ClinvarSampleDescription = {
  description?: null | ClinvarComment
  citation?: null | ClinvarCitation
}

/**
 * Local enumeration for SourceType.
 */
export type ClinvarSampleSourceType = 'submitter_generated' | 'data_mining'

/**
 * Description of a SCV.
 *
 * Corresponds to "typeSCV" in XSD.
 */
export type ClinvarScv = {
  /**
   * Optional title.
   */
  title?: string | null
  /**
   * Accession.
   */
  accession: string
  /**
   * Version.
   */
  version: number
}

/**
 * Local type for sequence location.
 */
export type ClinvarSequenceLocation = {
  /**
   * forDisplay value.
   */
  for_display?: boolean | null
  /**
   * Name of assembly.
   */
  assembly: string
  /**
   * Chromosomeof variant.
   */
  chr: ClinvarChromosome
  /**
   * Optional chromosome accession.
   */
  accession?: string | null
  /**
   * Outer start position.
   */
  outer_start?: number | null
  /**
   * Inner start position.
   */
  inner_start?: number | null
  /**
   * Start position.
   */
  start?: number | null
  /**
   * Stop position.
   */
  stop?: number | null
  /**
   * Inner stop position.
   */
  inner_stop?: number | null
  /**
   * Outer stop position.
   */
  outer_stop?: number | null
  /**
   * Display start position.
   */
  display_start?: number | null
  /**
   * Display stop position.
   */
  display_stop?: number | null
  /**
   * Strand.
   */
  strand?: string | null
  /**
   * Variant length.
   */
  variant_length?: number | null
  /**
   * Reference allele.
   */
  reference_allele?: string | null
  /**
   * Alternate allele.
   */
  alternate_allele?: string | null
  /**
   * Assembly accession version.
   */
  assembly_accession_version?: string | null
  assembly_status?: null | ClinvarAssemblyStatus
  /**
   * Position in VCF.
   */
  position_vcf?: number | null
  /**
   * Reference allele in VCF.
   */
  reference_allele_vcf?: string | null
  /**
   * Alternate allele in VCF.
   */
  alternate_allele_vcf?: string | null
  /**
   * For display length.
   */
  for_display_length?: number | null
}

/**
 * Enumeration describing severity.
 *
 * Corresponds to XSD type "typeSeverity"
 */
export type ClinvarSeverity = 'mild' | 'moderate' | 'severe'

/**
 * Description of a software.
 */
export type ClinvarSoftware = {
  /**
   * Name of the software.
   */
  name: string
  /**
   * Version of the software; optional.
   */
  version?: string | null
  /**
   * Purpose of the software; optional.
   */
  purpose?: string | null
}

/**
 * Local enumeration for presence in normal tissue.
 */
export type ClinvarSomaticVariantInNormalTissue = 'present' | 'absent' | 'not_tested'

/**
 * Definition of a species.
 */
export type ClinvarSpecies = {
  /**
   * Name of the species.
   */
  name: string
  /**
   * Optional taxonomy ID.
   */
  taxonomy_id?: number | null
}

/**
 * Enumeration describing status.
 *
 * Corresponds to `typeStatus` in XSD.
 */
export type ClinvarStatus =
  | 'current'
  | 'completed_and_retired'
  | 'delete'
  | 'in_development'
  | 'reclassified'
  | 'reject'
  | 'secondary'
  | 'suppressed'
  | 'under_review'

/**
 * Local type for ClinVarSubmissionID.
 */
export type ClinvarSubmissionId = {
  /**
   * The identifier provided by the submitter to facilitate
   * identification of records corresponding to their submissions. If not
   * provided by a submitter, NCBI generates one. If provided by
   * submitter, that is represented in localKeyIsSubmitted.
   */
  local_key: string
  /**
   * Optional title.
   */
  title?: string | null
  /**
   * Optional indication whether local key has been submitted.
   */
  local_key_is_submitted?: boolean | null
  /**
   * Optional assembly of submission.
   */
  submitted_assembly?: string | null
}

/**
 * A structure to support reporting the name of a submitter, its
 * organization id, and its abbreviation and type.
 */
export type ClinvarSubmitter = {
  submitter_identifiers?: null | ClinvarSubmitterIdentifiers
  /**
   * The submitter type.
   */
  type: ClinvarSubmitterType
}

/**
 * Set of attributes for the primary submitter. Any addtional submitters
 * are captured in the AdditionalSubmitters element.
 */
export type ClinvarSubmitterIdentifiers = {
  /**
   * Name of submitter.
   */
  submitter_name: string
  /**
   * Organization ID.
   */
  org_id: number
  /**
   * Organization category.
   */
  org_category: string
  /**
   * Organization abbreviation; optional.
   */
  org_abbreviation?: string | null
}

/**
 * Enumeration describing submitter review status.
 *
 * Corresponds to `typeSubmitterReviewStatusValue` in XSD.
 */
export type ClinvarSubmitterReviewStatus =
  | 'no_classification_provided'
  | 'no_assertion_criteria_provided'
  | 'criteria_provided_single_submitter'
  | 'reviewed_by_expert_panel'
  | 'practice_guideline'
  | 'flagged_submission'
  | 'criteria_provided_multiple_submitters_no_conflicts'
  | 'criteria_provided_conflicting_classifications'
  | 'classified_by_single_submitter'
  | 'reviewed_by_professional_society'
  | 'not_classified_by_submitter'
  | 'classified_by_multiple_submitters'

/**
 * Enumeration of submitter kind.
 */
export type ClinvarSubmitterType = 'primary' | 'secondary' | 'behalf'

/**
 * Type to describe traits in various places.
 */
export type ClinvarTrait = {
  /**
   * names
   */
  names: Array<ClinvarGenericSetElement>
  /**
   * symbols
   */
  symbols: Array<ClinvarGenericSetElement>
  /**
   * attributes
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * Trait relationships
   */
  trait_relationships: Array<ClinvarTraitRelationship>
  /**
   * Citation list.
   */
  citations: Array<ClinvarCitation>
  /**
   * Xref list.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Comment list.
   */
  comments: Array<ClinvarComment>
  /**
   * Sources
   */
  sources: Array<string>
}

/**
 * Local type for trait relationship.
 */
export type ClinvarTraitRelationship = {
  /**
   * Name(s) of the trait.
   */
  names: Array<ClinvarGenericSetElement>
  /**
   * Citation list.
   */
  citations: Array<ClinvarCitation>
  /**
   * Xref list.
   */
  xrefs: Array<ClinvarXref>
  /**
   * Comment list.
   */
  comments: Array<ClinvarComment>
  /**
   * Sources
   */
  sources: Array<string>
  /**
   * Trait type.
   */
  type: ClinvarTraitRelationshipType
}

/**
 * Local enumeration for trait types.
 *
 * NB: only DrugResponseAndDisease is used in the XML.
 */
export type ClinvarTraitRelationshipType =
  | 'phenotype'
  | 'subphenotype'
  | 'drug_response_and_disease'
  | 'co_occuring_condition'
  | 'finding_member'

/**
 * A set of ``Trait`` objects.
 *
 * NB: Called "ClinAsserTraitSetType" in the XSD.
 */
export type ClinvarTraitSet = {
  /**
   * The traits.
   */
  traits: Array<ClinvarTrait>
  /**
   * The names.
   */
  names: Array<ClinvarGenericSetElement>
  /**
   * The symbols.
   */
  symbols: Array<ClinvarGenericSetElement>
  /**
   * The attributes.
   */
  attributes: Array<ClinvarAttributeSetElement>
  /**
   * List of xrefs.
   */
  xrefs: Array<ClinvarXref>
  /**
   * List of citations.
   */
  citations: Array<ClinvarCitation>
  /**
   * List of comments.
   */
  comments: Array<ClinvarComment>
  /**
   * The type.
   */
  type: ClinvarTraitSetType
  /**
   * Date of last evaluation.
   */
  date_last_evaluated?: string | null
  /**
   * ID.
   */
  id?: number | null
  /**
   * Whether contributes to aggregate classification.
   */
  contributes_to_aggregate_classification?: boolean | null
  /**
   * Lower level of evidence.
   */
  lower_level_of_evidence?: boolean | null
  /**
   * Explanation of or multiple conditions.
   */
  multiple_condition_explanation?: string | null
}

/**
 * Local type.
 */
export type ClinvarTraitSetType =
  | 'disease'
  | 'drug_response'
  | 'finding'
  | 'phenotype_instruction'
  | 'trait_choice'

/**
 * This element groups the set of data specific to a VariationArchive
 * record, namely the summary data of what has been submitted about a
 * VariationID AND for Classified records only, the content each
 * submission (SCV) provided.
 *
 * Type for the `<VariationArchive>` type.
 */
export type ClinvarVariationArchive = {
  /**
   * Numeric variation ID.
   */
  variation_id: number
  /**
   * This is ClinVar's name for the variant.  ClinVar uses this term in
   * its web displays
   */
  variation_name: string
  /**
   * Type of the variant.
   */
  variation_type: string
  /**
   * DateCreated is the date when the record first became public in
   * ClinVar.
   */
  date_created?: string | null
  /**
   * The date the record was last updated in the public database. The
   * update may be a change to one of the submitted records (SCVs) or
   * annotation added to the aggregate record by NCBI staff. This date
   * is independent of a version change; annotated added by NCBI may
   * change without representing a change in the version.
   */
  date_last_updated?: string | null
  /**
   * This date is of the most recent submitted record (SCV) for the
   * VCV; it may reflect a new submitted record or an update to a submitted record.
   */
  most_recent_submission?: string | null
  /**
   * Accession assigned to the variant, or set of variants, that was
   * Classified
   */
  accession: string
  /**
   * Version of record and suffix for accession.
   */
  version: number
  /**
   * Number of submitters in record.
   */
  number_of_submitters: number
  /**
   * Number of submissions in record.
   */
  number_of_submissions: number
  /**
   * Record type.
   */
  record_type: ClinvarVariationArchiveRecordType
  /**
   * The record's status.
   */
  record_status: ClinvarVariationArchiveRecordStatus
  replaced_by?: null | ClinvarRecordHistory
  /**
   * The list of VCV accessions this record has replaced.
   */
  replaceds: Array<ClinvarRecordHistory>
  comment?: null | ClinvarComment
  species?: null | ClinvarSpecies
  classified_record?: null | ClinvarClassifiedRecord
  included_record?: null | ClinvarIncludedRecord
}

/**
 * Enumeration for `@RecordStatus`.
 */
export type ClinvarVariationArchiveRecordStatus = 'current' | 'previous' | 'replaced' | 'deleted'

/**
 * Enumeration for `@RecordType`.
 */
export type ClinvarVariationArchiveRecordType = 'included' | 'classified'

/**
 * The element to group each VariationArchive element in the release
 *
 * Type for the `<ClinVarVariationRelease>` tag.
 *
 * attributes
 */
export type ClinvarVariationRelease = {
  /**
   * The current release.
   */
  release_date?: string | null
  /**
   * List of `<VariationArchive>` tags.
   */
  variation_archives: Array<ClinvarVariationArchive>
}

/**
 * Enumeration describing variation type.
 */
export type ClinvarVariationType = 'diplotype' | 'compound_heterozygote' | 'distinct_chromosomes'

/**
 * Accession with version.
 */
export type ClinvarVersionedAccession = {
  /**
   * The accession.
   */
  accession: string
  /**
   * The version.
   */
  version: number
}

/**
 * This structure is used to represent how an object described in the
 * submission relates to objects in other databases.
 */
export type ClinvarXref = {
  /**
   * The name of the database. When there is an overlap with sequence
   * databases, that name is used.
   */
  db: string
  /**
   * The identifier used by the database. Being exported as a string
   * even though internally the database has rules for defining which datases use
   * integer identifers.
   */
  id: string
  /**
   * Used to differentiate between different types of identifiers that
   * a database may provide.
   */
  type?: string | null
  /**
   * Optional URL to the database entry.
   */
  url?: string | null
  status?: null | ClinvarStatus
}

/**
 * Enumeration describing zygosity.
 */
export type ClinvarZygosity =
  | 'homozygote'
  | 'single_heterozygote'
  | 'compound_heterozygote'
  | 'hemizygote'
  | 'not_provided'

/**
 * Custom error type for the Actix server.
 */
export type CustomError = {
  err: string
}

/**
 * A record corresponding to dbSNP VCF.
 */
export type DbsnpRecord = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * Alternate allele.
   */
  alt_allele: string
  /**
   * The rs ID.
   */
  rs_id: number
}

/**
 * List of `ClinvarExtractedVcvRecord`s.
 */
export type ExtractedVcvRecordList = {
  /**
   * The list of VCV records that may share a global variant.
   */
  records: Array<ClinvarExtractedVcvRecord>
}

/**
 * Identifier / name information for one gene.
 */
export type GeneNames = {
  /**
   * HGNC gene ID.
   */
  hgnc_id: string
  /**
   * HGNC gene symbol.
   */
  symbol: string
  /**
   * Gene name from HGNC.
   */
  name: string
  /**
   * HGNC alias symbols.
   */
  alias_symbol: Array<string>
  /**
   * HGNC alias names.
   */
  alias_name: Array<string>
  /**
   * ENSEMBL gene ID.
   */
  ensembl_gene_id?: string | null
  /**
   * NCBI gene ID.
   */
  ncbi_gene_id?: string | null
}

/**
 * Information from ACMG secondary findings list.
 */
export type GenesAcmgSecondaryFindingRecord = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The Ensembl gene ID.
   */
  ensembl_gene_id: string
  /**
   * The NCBI gene ID.
   */
  ncbi_gene_id: string
  /**
   * The HGNC gene symbol.
   */
  gene_symbol: string
  /**
   * The MIM gene ID.
   */
  mim_gene_id: string
  /**
   * The disease phenotype.
   */
  disease_phenotype: string
  /**
   * The disease MIM id.
   */
  disorder_mim: string
  /**
   * The phenotype category.
   */
  phenotype_category: string
  /**
   * The mode of inheritance.
   */
  inheritance: string
  /**
   * The version of the ACMG SF list of first appearance.
   */
  sf_list_version: string
  /**
   * The variants to report according to ACMG SF.
   */
  variants_to_report: string
}

/**
 * `ClinGen` gene dosage sensitivity record.
 */
export type GenesClingenDosageRecord = {
  /**
   * Gene symbol.
   */
  gene_symbol: string
  /**
   * NCBI gene ID.
   */
  ncbi_gene_id: string
  /**
   * Genomic location GRCh37.
   */
  genomic_location_37: string
  /**
   * Genomic location GRCh38.
   */
  genomic_location_38: string
  haploinsufficiency_score?: null | GenesClingenDosageScore
  triplosensitivity_score?: null | GenesClingenDosageScore
  /**
   * Haploinsufficiency Disease ID.
   */
  haploinsufficiency_disease_id?: string | null
  /**
   * Haploinsufficiency Disease ID.
   */
  triplosensitivity_disease_id?: string | null
}

/**
 * Enumeration for Haploinsufficiency / Triplosensitivity scores.
 */
export type GenesClingenDosageScore =
  | 'SufficientEvidenceAvailable'
  | 'SomeEvidenceAvailable'
  | 'LittleEvidence'
  | 'NoEvidenceAvailable'
  | 'Recessive'
  | 'Unlikely'

/**
 * ClinVar detailed information per gene.
 */
export type GenesClinvarPerGeneRecord = {
  per_impact_counts?: null | GenesGeneImpactCounts
  per_freq_counts?: null | GenesCoarseClinsigFrequencyCounts
  /**
   * Variants for the given gene.
   */
  per_release_vars: Array<GenesExtractedVariantsPerRelease>
}

/**
 * Parameters for `handle`.
 */
export type GenesClinvarQuery = {
  /**
   * The HGNC IDs to search for.
   */
  hgnc_id?: Array<string> | null
}

/**
 * Result for `handle_with_openapi`.
 */
export type GenesClinvarResponse = {
  /**
   * The resulting per-gene ClinVar information.
   */
  genes: Array<GenesClinvarResponseEntry>
}

/**
 * One entry in the result.
 */
export type GenesClinvarResponseEntry = {
  /**
   * HGNC ID of the gene.
   */
  hgnc_id: string
  /**
   * The resulting per-gene record.
   */
  record: GenesClinvarPerGeneRecord
}

export type GenesCoarseClinsigFrequencyCounts = {
  /**
   * The gene HGNC ID.
   */
  hgnc_id: string
  /**
   * The counts for (likely) pathogenic.
   */
  pathogenic_counts: Array<number>
  /**
   * The counts for uncertain significance.
   */
  uncertain_counts: Array<number>
  /**
   * The counts for (likely) benign.
   */
  benign_counts: Array<number>
}

/**
 * Record from the integrated conditions computation.
 */
export type GenesConditionsRecord = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The gene-disease associations.
   */
  disease_associations: Array<GenesDiseaseAssociation>
  /**
   * The PanelApp associations.
   */
  panelapp_associations: Array<GenesPanelappAssociation>
}

/**
 * Code for data from the dbNSFP database.
 */
export type GenesDbnsfpRecord = {
  /**
   * Gene symbol from HGNC.
   */
  gene_name: string
  /**
   * Ensembl gene id (from HGNC).
   */
  ensembl_gene?: string | null
  /**
   * Chromosome number (from HGNC).
   */
  chr?: string | null
  /**
   * Old gene symbol (from HGNC).
   */
  gene_old_names: Array<string>
  /**
   * Other gene names (from HGNC).
   */
  gene_other_names: Array<string>
  /**
   * Uniprot acc (from HGNC).
   */
  uniprot_acc?: string | null
  /**
   * Uniprot id (from HGNC).
   */
  uniprot_id?: string | null
  /**
   * Uniprot id (from HGNC).
   */
  entrez_gene_id?: string | null
  /**
   * CCDS id (from HGNC).
   */
  ccds_id: Array<string>
  /**
   * Refseq gene id (from HGNC).
   */
  refseq_id: Array<string>
  /**
   * UCSC gene id (from HGNC).
   */
  ucsc_id?: string | null
  /**
   * MIM gene id (from OMIM).
   */
  mim_id: Array<string>
  /**
   * MIM gene id from OMIM.
   */
  omim_id: Array<string>
  /**
   * Gene full name (from HGNC).
   */
  gene_full_name?: string | null
  /**
   * Pathway description from Uniprot.
   */
  pathway_uniprot?: string | null
  /**
   * Short name of the Pathway(s) the gene belongs to (from BioCarta).
   */
  pathway_biocarta_short: Array<string>
  /**
   * Full name(s) of the Pathway(s) the gene belongs to (from BioCarta).
   */
  pathway_biocarta_full: Array<string>
  /**
   * Pathway(s) the gene belongs to (from ConsensusPathDB).
   */
  pathway_consensus_path_db: Array<string>
  /**
   * ID(s) of the Pathway(s) the gene belongs to (from KEGG).
   */
  pathway_kegg_id: Array<string>
  /**
   * Full name(s) of the Pathway(s) the gene belongs to (from KEGG).
   */
  pathway_kegg_full: Array<string>
  /**
   * Function description of the gene (from Uniprot).
   */
  function_description: Array<string>
  /**
   * Disease(s) the gene caused or associated with (from Uniprot).
   */
  disease_description: Array<string>
  /**
   * MIM id(s) of the phenotype the gene caused or associated with (from Uniprot).
   */
  mim_phenotype_id: Array<string>
  /**
   * MIM disease name(s) with MIM id(s) in \[\] (from Uniprot).
   */
  mim_disease: Array<string>
  /**
   * Orphanet Number of the disorder the gene caused or associated with.
   */
  orphanet_disorder_id: Array<string>
  /**
   * Disorder name from Orphanet.
   */
  orphanet_disorder: Array<string>
  /**
   * The type of association beteen the gene and the disorder in Orphanet.
   */
  orphanet_association_type: Array<string>
  /**
   * Trait(s) the gene associated with (from GWAS catalog).
   */
  trait_association_gwas: Array<string>
  /**
   * ID of the mapped Human Phenotype Ontology.
   */
  hpo_id: Array<string>
  /**
   * Name of the mapped Human Phenotype Ontology.
   */
  hpo_name: Array<string>
  /**
   * GO terms for biological process.
   */
  go_biological_process: Array<string>
  /**
   * GO terms for cellular component.
   */
  go_cellular_component: Array<string>
  /**
   * GO terms for molecular function.
   */
  go_molecular_function: Array<string>
  /**
   * Tissue specificity description from Uniprot.
   */
  tissue_specificity_uniprot: Array<string>
  /**
   * Tissues/organs the gene expressed in (egenetics data from BioMart).
   */
  expression_egenetics: Array<string>
  /**
   * Tissues/organs the gene expressed in (GNF/Atlas data from BioMart).
   */
  expression_gnf_atlas: Array<string>
  /**
   * The interacting genes from IntAct.
   */
  interactions_intact: Array<string>
  /**
   * The interacting genes from BioGRID.
   */
  interactions_biogrid: Array<string>
  /**
   * The interacting genes from ConsensusPathDB.
   */
  interactions_consensus_path_db: Array<string>
  /**
   * Estimated probability of haploinsufficiency of the gene (from
   * doi:10.1371/journal.pgen.1001154).
   */
  haploinsufficiency?: number | null
  /**
   * Estimated probability of haploinsufficiency of the gene (from
   * doi:10.1093/bioinformatics/btx028).
   */
  hipred_score?: number | null
  /**
   * HIPred prediction of haploinsufficiency of the gene. Y(es) or N(o). (from
   * doi:10.1093/bioinformatics/btx028).
   */
  hipred?: string | null
  /**
   * A score predicting the gene haploinsufficiency. The higher the score the more likely the
   * gene is haploinsufficient (from doi: 10.1093/nar/gkv474).
   */
  ghis?: number | null
  /**
   * Estimated probability that gene is a recessive disease gene (from
   * DOI:10.1126/science.1215040).
   */
  prec?: number | null
  /**
   * Known recessive status of the gene (from DOI:10.1126/science.1215040) "lof-tolerant =
   * seen in homozygous state in at least one 1000G individual" "recessive = known OMIM
   * recessive disease" (original annotations from DOI:10.1126/science.1215040).
   */
  known_rec_info?: string | null
  /**
   * Residual Variation Intolerance Score, a measure of intolerance of mutational burden, the
   * higher the score the more tolerant to mutational burden the gene is. Based on EVS
   * (ESP6500) data.  from doi:10.1371/journal.pgen.1003709.
   */
  rvis_evs?: number | null
  /**
   * The percentile rank of the gene based on RVIS, the higher the percentile the more
   * tolerant to mutational burden the gene is. Based on EVS (ESP6500) data.
   */
  rvis_percentile_evs?: number | null
  /**
   * "A gene's corresponding FDR p-value for preferential LoF depletion among the ExAC
   * population.  Lower FDR corresponds with genes that are increasingly depleted of LoF
   * variants." cited from RVIS document.
   */
  lof_fdr_exac?: number | null
  /**
   * "ExAC-based RVIS; setting 'common' MAF filter at 0.05% in at least one of the six
   * individual ethnic strata from ExAC." cited from RVIS document.
   */
  rvis_exac?: number | null
  /**
   * "Genome-Wide percentile for the new ExAC-based RVIS; setting 'common' MAF filter at 0.05%
   * in at least one of the six individual ethnic strata from ExAC." cited from RVIS document.
   */
  rvis_percentile_exac?: number | null
  /**
   * "the probability of being loss-of-function intolerant (intolerant of both heterozygous
   * and homozygous lof variants)" based on ExAC r0.3 data.
   */
  exac_pli?: number | null
  /**
   * "the probability of being intolerant of homozygous, but not heterozygous lof variants"
   * based on ExAC r0.3 data.
   */
  exac_prec?: number | null
  /**
   * "the probability of being tolerant of both heterozygous and homozygous lof variants"
   * based on ExAC r0.3 data.
   */
  exac_pnull?: number | null
  /**
   * "the probability of being loss-of-function intolerant (intolerant of both heterozygous
   * and homozygous lof variants)" based on ExAC r0.3 nonTCGA subset.
   */
  exac_nontcga_pli?: number | null
  /**
   * "the probability of being intolerant of homozygous, but not heterozygous lof variants"
   * based on ExAC r0.3 nonTCGA subset.
   */
  exac_nontcga_prec?: number | null
  /**
   * "the probability of being tolerant of both heterozygous and homozygous lof variants"
   * based on ExAC r0.3 nonTCGA subset.
   */
  exac_nontcga_pnull?: number | null
  /**
   * "the probability of being loss-of-function intolerant (intolerant of both heterozygous
   * and homozygous lof variants)" based on ExAC r0.3 nonpsych subset.
   */
  exac_nonpsych_pli?: number | null
  /**
   * "the probability of being intolerant of homozygous, but not heterozygous lof variants"
   * based on ExAC r0.3 nonpsych subset.
   */
  exac_nonpsych_prec?: number | null
  /**
   * "the probability of being tolerant of both heterozygous and homozygous lof variants"
   * based on ExAC r0.3 nonpsych subset/
   */
  exac_nonpsych_pnull?: number | null
  /**
   * "the probability of being loss-of-function intolerant (intolerant of both heterozygous
   * and homozygous lof variants)" based on gnomAD 2.1 data.
   */
  gnomad_pli?: number | null
  /**
   * "the probability of being intolerant of homozygous, but not heterozygous lof variants"
   * based on gnomAD 2.1 data.
   */
  gnomad_prec?: number | null
  /**
   * "the probability of being tolerant of both heterozygous and homozygous lof variants"
   * based on gnomAD 2.1 data.
   */
  gnomad_pnull?: number | null
  /**
   * "Winsorised deletion intolerance z-score" based on ExAC r0.3.1 CNV data.
   */
  exac_del_score?: number | null
  /**
   * "Winsorised duplication intolerance z-score" based on ExAC r0.3.1 CNV data.
   */
  exac_dup_score?: number | null
  /**
   * "Winsorised cnv intolerance z-score" based on ExAC r0.3.1 CNV data.
   */
  exac_cnv_score?: number | null
  /**
   * "Gene is in a known region of recurrent CNVs mediated by tandem segmental duplications
   * and intolerance scores are more likely to be biased or noisy." from ExAC r0.3.1 CNV
   * release.
   */
  exac_cnv_flag?: string | null
  /**
   * gene damage index score, "a genome-wide, gene-level metric of the mutational damage that
   * has accumulated in the general population" from doi: 10.1073/pnas.1518646112. The higher
   * the score the less likely the gene is to be responsible for monogenic diseases.
   */
  gdi?: number | null
  /**
   * Phred-scaled GDI scores.
   */
  gdi_phred?: number | null
  /**
   * gene damage prediction (low/medium/high) by GDI for all diseases.,
   */
  gdp_all_disease_causing?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for all Mendelian diseases.
   */
  gdp_all_mendelian?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for Mendelian autosomal dominant
   * diseases.
   */
  gdp_all_mendelian_ad?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for Mendelian autosomal recessive
   * diseases.
   */
  gdp_mendelian_ar?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for all primary immunodeficiency
   * diseases.
   */
  gdp_pid?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for primary immunodeficiency autosomal
   * dominant diseases.
   */
  gdp_pid_ad?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for primary immunodeficiency autosomal
   * recessive diseases.
   */
  gdp_pid_ar?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for all cancer disease.
   */
  gdp_cancer?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for cancer recessive disease.
   */
  gdb_cancer_rec?: string | null
  /**
   * gene damage prediction (low/medium/high) by GDI for cancer dominant disease.
   */
  gdp_cancer_dom?: string | null
  /**
   * A percentile score for gene intolerance to functional change. The lower the score the
   * higher gene intolerance to functional change. For details see doi:
   * 10.1093/bioinformatics/btv602.
   */
  loftool_score?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Heterozygote or Homozygote of LOF SNVs whose MAF<0.005. This fraction is from a method
   * for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants). Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_maf_5_het_or_hom?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Compound Heterozygote or Homozygote of LOF SNVs whose MAF<0.005. This fraction is from a
   * method for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants). Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_maf_5_hom_or_comphet?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Heterozygote or Homozygote of LOF SNVs whose MAF<0.001. This fraction is from a method
   * for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants). Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_maf_1_het_or_hom?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Compound Heterozygote or Homozygote of LOF SNVs whose MAF<0.001. This fraction is from a
   * method for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants). Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_maf_1_hom_or_comphet?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.005. This fraction is from
   * a method for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants).  Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_or_mis_maf_5_het_or_hom?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Compound Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.005. This
   * fraction is from a method for ranking genes based on mutational burden called SORVA
   * (Significance Of Rare VAriants).  Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_or_mis_maf_5_hom_or_comphet?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.001. This fraction is from
   * a method for ranking genes based on mutational burden called SORVA (Significance Of Rare
   * VAriants).  Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_or_mis_maf_1_het_or_hom?: number | null
  /**
   * The fraction of individuals in the 1000 Genomes Project data (N=2504) who are either
   * Compound Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.001. This
   * fraction is from a method for ranking genes based on mutational burden called SORVA
   * (Significance Of Rare VAriants).  Please see doi: 10.1101/103218 for details.
   */
  sorva_lof_or_mis_maf_1_hom_or_comphet?: number | null
  /**
   * Essential ("E") or Non-essential phenotype-changing ("N") based on Mouse Genome
   * Informatics database. from doi:10.1371/journal.pgen.1003484.
   */
  essential_gene?: string | null
  /**
   * Essential ("E") or Non-essential phenotype-changing ("N") based on large scale CRISPR
   * experiments. from doi: 10.1126/science.aac7041.
   */
  essential_gene_crispr?: string | null
  /**
   * Essential ("E"), context-Specific essential ("S"), or Non-essential phenotype-changing
   * ("N") based on large scale CRISPR experiments. from
   * <http://dx.doi.org/10.1016/j.cell.2015.11.015.>
   */
  essential_gene_crispr2?: string | null
  /**
   * Essential ("E"), HAP1-Specific essential ("H"), KBM7-Specific essential ("K"), or
   * Non-essential phenotype-changing ("N"), based on large scale mutagenesis experiments.
   * from doi: 10.1126/science.aac7557.
   */
  essential_gene_gene_trap?: string | null
  /**
   * A probability prediction of the gene being essential. From
   * doi:10.1371/journal.pcbi.1002886.
   */
  gene_indispensability_score?: number | null
  /**
   * Essential ("E") or loss-of-function tolerant ("N") based on Gene_indispensability_score.
   */
  gene_indispensability_pred?: string | null
  /**
   * Homolog mouse gene name from MGI.
   */
  mgi_mouse_gene?: string | null
  /**
   * Phenotype description for the homolog mouse gene from MGI.
   */
  mgi_mouse_phenotype?: string | null
  /**
   * Homolog zebrafish gene name from ZFIN.
   */
  zfin_zebrafish_gene?: string | null
  /**
   * Affected structure of the homolog zebrafish gene from ZFIN.
   */
  zfin_zebrafish_structure?: string | null
  /**
   * Phenotype description for the homolog zebrafish gene from ZFIN.
   */
  zfin_zebrafish_phenotype_quality?: string | null
  /**
   * Phenotype tag for the homolog zebrafish gene from ZFIN"
   */
  zfin_zebrafish_phenotype_tag?: string | null
}

/**
 * Decipher HI Predictions
 */
export type GenesDecipherHiRecord = {
  /**
   * HGNC identifier.
   */
  hgnc_id: string
  /**
   * Official HGNC gene symbol.
   */
  hgnc_symbol: string
  /**
   * P(HI) prediction from DECIPHER HI.
   */
  p_hi: number
  /**
   * Percent HI index.
   */
  hi_index: number
}

/**
 * A gene-disease association.
 */
export type GenesDiseaseAssociation = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The gene-disease association entries.
   */
  labeled_disorders: Array<GenesLabeledDisorder>
  /**
   * Overall disease name.
   */
  disease_name?: string | null
  /**
   * Disease definition.
   */
  disease_definition?: string | null
  /**
   * The gene-disease association sources.
   */
  sources: Array<GenesDiseaseAssociationSource>
  /**
   * Overall disease-gene association confidence level.
   */
  confidence: GenesDiseaseAssociationConfidenceLevel
}

/**
 * Enumeration for confidence levels.
 */
export type GenesDiseaseAssociationConfidenceLevel = 'High' | 'Medium' | 'Low'

/**
 * Enumeration for confidence levels.
 */
export type GenesDiseaseAssociationEntryConfidenceLevel = 'High' | 'Medium' | 'Low'

/**
 * Enumeration for sources.
 */
export type GenesDiseaseAssociationSource = 'Omim' | 'Orphanet' | 'Panelapp'

/**
 * Information from DOMINO.
 */
export type GenesDominoRecord = {
  /**
   * Gene symbol.
   */
  gene_symbol: string
  /**
   * The score.
   */
  score: number
}

/**
 * Enumeration for entity types.
 */
export type GenesEntityType = 'Gene' | 'Str' | 'Region'

/**
 * Extracted variants per release.
 */
export type GenesExtractedVariantsPerRelease = {
  /**
   * Release version.
   */
  release?: string | null
  /**
   * Variants per gene.
   */
  variants: Array<ClinvarExtractedVcvRecord>
}

/**
 * The allowed fields to search in.
 */
export type GenesFields =
  | 'hgnc_id'
  | 'symbol'
  | 'name'
  | 'alias_symbol'
  | 'alias_name'
  | 'ensembl_gene_id'
  | 'ncbi_gene_id'

/**
 * Gene identity information.
 */
export type GenesGeneData = {
  /**
   * HGNC ID.
   */
  hgnc_id?: string | null
  /**
   * HGNC gene symbol.
   */
  hgnc_symbol?: string | null
  /**
   * Gene symbol.
   */
  gene_symbol?: string | null
}

/**
 * A gene-disease association entry.
 */
export type GenesGeneDiseaseAssociationEntry = {
  /**
   * The gene-disease association source.
   */
  source: GenesDiseaseAssociationSource
  /**
   * The gene-disease association confidence level.
   */
  confidence: GenesDiseaseAssociationEntryConfidenceLevel
}

/**
 * Enumeration with the variant consequence.
 */
export type GenesGeneImpact =
  | 'Unspecified'
  | 'ThreePrimeUtrVariant'
  | 'FivePrimeUtrVariant'
  | 'DownstreamTranscriptVariant'
  | 'FrameshiftVariant'
  | 'InframeIndel'
  | 'StartLost'
  | 'IntronVariant'
  | 'MissenseVariant'
  | 'NonCodingTranscriptVariant'
  | 'StopGained'
  | 'NoSequenceAlteration'
  | 'SpliceAcceptorVariant'
  | 'SpliceDonorVariant'
  | 'StopLost'
  | 'SynonymousVariant'
  | 'UpstreamTranscriptVariant'

/**
 * Entry for storing counts of `GeneImpact` and `ClinicalSignificance`.
 */
export type GenesGeneImpactCounts = {
  /**
   * The gene HGNC ID.
   */
  hgnc_id: string
  /**
   * The impact counts.
   */
  impact_counts: Array<GenesImpactCounts>
}

/**
 * Information about a gene.
 */
export type GenesGeneInfoRecord = {
  acmg_sf?: null | GenesAcmgSecondaryFindingRecord
  clingen?: null | GenesClingenDosageRecord
  dbnsfp?: null | GenesDbnsfpRecord
  gnomad_constraints?: null | GenesGnomadConstraintsRecord
  hgnc?: null | GenesHgncRecord
  ncbi?: null | GenesNcbiRecord
  omim?: null | GenesOmimRecord
  orpha?: null | GenesOrphaRecord
  rcnv?: null | GenesRcnvRecord
  shet?: null | GenesShetRecord
  gtex?: null | GenesGtexRecord
  domino?: null | GenesDominoRecord
  decipher_hi?: null | GenesDecipherHiRecord
  /**
   * GenomicsEngland PanelApp gene information.
   */
  panelapp: Array<GenesPanelAppRecord>
  conditions?: null | GenesConditionsRecord
}

/**
 * Entry in the genes RocksDB database.
 */
export type GenesGeneRecord = {
  acmg_sf?: null | GenesAcmgSecondaryFindingRecord
  clingen?: null | GenesClingenDosageRecord
  dbnsfp?: null | GenesDbnsfpRecord
  gnomad_constraints?: null | GenesGnomadConstraintsRecord
  hgnc?: null | GenesHgncRecord
  ncbi?: null | GenesNcbiRecord
  omim?: null | GenesOmimRecord
  orpha?: null | GenesOrphaRecord
  rcnv?: null | GenesRcnvRecord
  shet?: null | GenesShetRecord
  gtex?: null | GenesGtexRecord
  domino?: null | GenesDominoRecord
  decipher_hi?: null | GenesDecipherHiRecord
  /**
   * GenomicsEngland PanelApp gene information.
   */
  panelapp: Array<GenesPanelAppRecord>
  conditions?: null | GenesConditionsRecord
}

/**
 * Code for data from the gnomAD constraints.
 */
export type GenesGnomadConstraintsRecord = {
  /**
   * The Ensembl gene ID.
   */
  ensembl_gene_id: string
  /**
   * The NCBI gene ID.
   */
  entrez_id: string
  /**
   * The HGNC gene symbol.
   */
  gene_symbol: string
  /**
   * The expected number of loss-of-function variants.
   */
  exp_lof?: number | null
  /**
   * The expected number of missense variants.
   */
  exp_mis?: number | null
  /**
   * The expected number of synonymous variants.
   */
  exp_syn?: number | null
  /**
   * The missense-related Z-score.
   */
  mis_z?: number | null
  /**
   * The observed number of loss-of-function variants.
   */
  obs_lof?: number | null
  /**
   * The observed number of missense variants.
   */
  obs_mis?: number | null
  /**
   * The observed number of synonymous variants.
   */
  obs_syn?: number | null
  /**
   * The loss-of-function observed/expected ratio.
   */
  oe_lof?: number | null
  /**
   * The lower bound of the loss-of-function observed/expected ratio.
   */
  oe_lof_lower?: number | null
  /**
   * The upper bound of the loss-of-function observed/expected ratio.
   */
  oe_lof_upper?: number | null
  /**
   * The missense observed/expected ratio.
   */
  oe_mis?: number | null
  /**
   * The lower bound of the missense observed/expected ratio.
   */
  oe_mis_lower?: number | null
  /**
   * The upper bound of the missense observed/expected ratio.
   */
  oe_mis_upper?: number | null
  /**
   * The synonymous observed/expected ratio.
   */
  oe_syn?: number | null
  /**
   * The lower bound of the synonymous observed/expected ratio.
   */
  oe_syn_lower?: number | null
  /**
   * The upper bound of the synonymous observed/expected ratio.
   */
  oe_syn_upper?: number | null
  /**
   * The probability of loss-of-function intolerance (pLI score).
   */
  pli?: number | null
  /**
   * The synonymous-related Z-score.
   */
  syn_z?: number | null
  /**
   * The probability of loss-of-function intolerance (pLI score) from ExAC.
   */
  exac_pli?: number | null
  /**
   * The observed number of loss-of-function variants from ExAC.
   */
  exac_obs_lof?: number | null
  /**
   * The expected number of loss-of-function variants from ExAC.
   */
  exac_exp_lof?: number | null
  /**
   * The loss-of-function observed/expected ratio from ExAC.
   */
  exac_oe_lof?: number | null
}

/**
 * Entry with the GTEx information.
 */
export type GenesGtexRecord = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * ENSEMBL gene ID.
   */
  ensembl_gene_id: string
  /**
   * ENSEMBL gene version.
   */
  ensembl_gene_version: string
  /**
   * Counts per tissue
   */
  records: Array<GenesGtexTissueRecord>
}

/**
 * Enumeration for GTEx V8 tissue
 */
export type GenesGtexTissue =
  | 'AdiposeTissue'
  | 'AdrenalGland'
  | 'Bladder'
  | 'Blood'
  | 'BloodVessel'
  | 'BoneMarrow'
  | 'Brain'
  | 'Breast'
  | 'CervixUteri'
  | 'Colon'
  | 'Esophagus'
  | 'FallopianTube'
  | 'Heart'
  | 'Kidney'
  | 'Liver'
  | 'Lung'
  | 'Muscle'
  | 'Nerve'
  | 'Ovary'
  | 'Pancreas'
  | 'Pituitary'
  | 'Prostate'
  | 'SalivaryGland'
  | 'Skin'
  | 'SmallIntestine'
  | 'Spleen'
  | 'Stomach'
  | 'Testis'
  | 'Thyroid'
  | 'Uterus'
  | 'Vagina'

/**
 * Enumeration for GTEx V8 tissue details
 */
export type GenesGtexTissueDetailed =
  | 'AdiposeSubcutaneous'
  | 'AdiposeVisceralOmentum'
  | 'AdrenalGland'
  | 'ArteryAorta'
  | 'ArteryCoronary'
  | 'ArteryTibial'
  | 'Bladder'
  | 'BrainAmygdala'
  | 'BrainAnteriorCingulateCortex'
  | 'BrainCaudateBasalGanglia'
  | 'BrainCerebellarHemisphere'
  | 'BrainCerebellum'
  | 'BrainCortex'
  | 'BrainFrontalCortex'
  | 'BrainHippocampus'
  | 'BrainHypothalamus'
  | 'BrainNucleusAccumbens'
  | 'BrainPutamenBasalGanglia'
  | 'BrainSpinalCord'
  | 'BrainSubstantiaNigra'
  | 'BreastMammaryTissue'
  | 'CellsCulturedFibroblasts'
  | 'CellsEbvTransformedLymphocytes'
  | 'CellsLeukemiaCellLine'
  | 'CervixEctocervix'
  | 'CervixEndocervix'
  | 'ColonSigmoid'
  | 'ColonTransverse'
  | 'EsophagusGastroesophagealJunction'
  | 'EsophagusMucosa'
  | 'EsophagusMuscularis'
  | 'FallopianTube'
  | 'HeartAtrialAppendage'
  | 'HeartLeftVentricle'
  | 'KidneyCortex'
  | 'KidneyMedulla'
  | 'Liver'
  | 'Lung'
  | 'MinorSalivaryGland'
  | 'MuscleSkeletal'
  | 'NerveTibial'
  | 'Ovary'
  | 'Pancreas'
  | 'Pituitary'
  | 'Prostate'
  | 'SalivaryGland'
  | 'SkinNotSunExposedSuprapubic'
  | 'SkinSunExposedLowerLeg'
  | 'SmallIntestineTerminalIleum'
  | 'Spleen'
  | 'Stomach'
  | 'Testis'
  | 'Thyroid'
  | 'Uterus'
  | 'Vagina'
  | 'WholeBlood'

/**
 * Entry with the tissue-specific information for a gene.
 */
export type GenesGtexTissueRecord = {
  /**
   * The tissue type
   */
  tissue: GenesGtexTissue
  /**
   * The detailed tissue type
   */
  tissue_detailed: GenesGtexTissueDetailed
  /**
   * TPM counts
   */
  tpms: Array<number>
}

/**
 * Information from the locus-specific dabase.
 */
export type GenesHgncLsdb = {
  /**
   * The name of the Locus Specific Mutation Database.
   */
  name: string
  /**
   * The URL for the gene.
   */
  url: string
}

/**
 * A record from the HGNC database.
 */
export type GenesHgncRecord = {
  /**
   * HGNC ID. A unique ID created by the HGNC for every approved symbol.
   */
  hgnc_id: string
  /**
   * The HGNC approved gene symbol.
   */
  symbol: string
  /**
   * HGNC approved name for the gene.
   */
  name: string
  /**
   * A group name for a set of related locus types as defined by the HGNC
   * (e.g. non-coding RNA).
   */
  locus_group?: string | null
  /**
   * The locus type as defined by the HGNC (e.g. RNA, transfer).
   */
  locus_type?: string | null
  /**
   * Status of the symbol report.
   */
  status: number
  /**
   * Cytogenetic location of the gene (e.g. 2q34).
   */
  location?: string | null
  /**
   * Sortable cytogenic location of the gene (e.g. 02q34).
   */
  location_sortable?: string | null
  /**
   * Other symbols used to refer to this gene.
   */
  alias_symbol: Array<string>
  /**
   * Other names used to refer to this gene.
   */
  alias_name: Array<string>
  /**
   * Prevous symbols used to refer to this gene.
   */
  prev_symbol: Array<string>
  /**
   * Previous names used to refer to this gene.
   */
  prev_name: Array<string>
  /**
   * Name given to a gene group.
   */
  gene_group: Array<string>
  /**
   * ID used to designate a gene group.
   */
  gene_group_id: Array<number>
  /**
   * The date the entry was first approved.
   */
  date_approved_reserved?: string | null
  /**
   * The date the gene symbol was last changed.
   */
  date_symbol_changed?: string | null
  /**
   * The date the gene name was last changed.
   */
  date_name_changed?: string | null
  /**
   * Date the entry was last modified.
   */
  date_modified?: string | null
  /**
   * Entrez gene id.
   */
  entrez_id?: string | null
  /**
   * Ensembl gene id.
   */
  ensembl_gene_id?: string | null
  /**
   * Vega gene id.
   */
  vega_id?: string | null
  /**
   * UCSC gene id.
   */
  ucsc_id?: string | null
  /**
   * ENA accession number(s).
   */
  ena: Array<string>
  /**
   * RefSeq nucleotide accession(s).
   */
  refseq_accession: Array<string>
  /**
   * Consensus CDS ID(ds).
   */
  ccds_id: Array<string>
  /**
   * Uniprot IDs.
   */
  uniprot_ids: Array<string>
  /**
   * Pubmed IDs.
   */
  pubmed_id: Array<number>
  /**
   * Mouse genome informatics database ID(s).
   */
  mgd_id: Array<string>
  /**
   * Rat genome database gene ID(s).
   */
  rgd_id: Array<string>
  /**
   * The name of the Locus Specific Mutation Database and URL for the gene.
   */
  lsdb: Array<GenesHgncLsdb>
  /**
   * Symbol used within COSMIC.
   */
  cosmic?: string | null
  /**
   * OMIM ID(s).
   */
  omim_id: Array<string>
  /**
   * miRBase ID.
   */
  mirbase?: string | null
  /**
   * Homeobox Database ID.
   */
  homeodb?: number | null
  /**
   * snoRNABase ID.
   */
  snornabase?: string | null
  /**
   * Symbol used to link to the SLC tables database at bioparadigms.org
   * for the gene.
   */
  bioparadigms_slc?: string | null
  /**
   * Orphanet ID.
   */
  orphanet?: number | null
  /**
   * Pseudogene.org.
   */
  pseudogene_org?: string | null
  /**
   * Symbol used within HORDE for the gene.
   */
  horde_id?: string | null
  /**
   * ID used to link to the MEROPS peptidase database.
   */
  merops?: string | null
  /**
   * Symbol used within international ImMunoGeneTics information system.
   */
  imgt?: string | null
  /**
   * The objectId used to link to the IUPHAR/BPS Guide to PHARMACOLOGY
   * database.
   */
  iuphar?: string | null
  /**
   * Symbol used within the Human Cell Differentiation Molecule database.
   */
  cd?: string | null
  /**
   * ID to link to the Mamit-tRNA database
   */
  mamit_trnadb?: number | null
  /**
   * lncRNA Database ID.
   */
  lncrnadb?: string | null
  /**
   * ENZYME EC accession number.
   */
  enzyme_id: Array<string>
  /**
   * ID used to link to the Human Intermediate Filament Database.
   */
  intermediate_filament_db?: string | null
  /**
   * The HGNC ID that the Alliance of Genome Resources (AGR) use.
   */
  agr?: string | null
  /**
   * NCBI and Ensembl transcript IDs/acessions including the version
   * number.
   */
  mane_select: Array<string>
}

/**
 * Status of the symbol report, which can be either "Approved" or "Entry Withdrawn".
 */
export type GenesHgncStatus = 'Approved' | 'Withdrawn'

/**
 * Stores the counts for a gene impact.
 */
export type GenesImpactCounts = {
  /**
   * The gene impact.
   */
  gene_impact: GenesGeneImpact
  /**
   * The counts for the benign impact.
   */
  count_benign: number
  /**
   * The counts for the likely benign impact.
   */
  count_likely_benign: number
  /**
   * The counts for the uncertain significance impact.
   */
  count_uncertain_significance: number
  /**
   * The counts for the likely pathogenic impact.
   */
  count_likely_pathogenic: number
  /**
   * The counts for the pathogenic impact.
   */
  count_pathogenic: number
}

/**
 * Query response for `handle_with_openapi()`.
 */
export type GenesInfoResponse = {
  /**
   * Version information of the genes.
   */
  genes: Array<GenesGeneInfoRecord>
}

/**
 * A labeled disorder.
 */
export type GenesLabeledDisorder = {
  /**
   * The disorder ID.
   */
  term_id: string
  /**
   * The disorder name.
   */
  title?: string | null
}

/**
 * Result for `async fn handle_with_openapi(
 */
export type GenesLookupResponse = {
  /**
   * The resulting gene information.
   */
  genes: Array<GenesLookupResultEntry>
}

/**
 * One result entry in the response.
 */
export type GenesLookupResultEntry = {
  /**
   * The query string,
   */
  query: string
  gene_names?: null | GeneNames
}

/**
 * A record from the NCBI gene database.
 */
export type GenesNcbiRecord = {
  /**
   * NCBI Gene ID.
   */
  gene_id: string
  /**
   * Gene summary.
   */
  summary?: string | null
  /**
   * "Reference Into Function" entry.
   */
  rif_entries: Array<GenesRifEntry>
}

/**
 * A record from the OMIM gene association.
 */
export type GenesOmimRecord = {
  /**
   * The HGNC gene ID.
   */
  hgnc_id: string
  /**
   * The associated OMIM records.
   */
  omim_diseases: Array<GenesOmimTerm>
}

/**
 * Description of an OMIM record.
 */
export type GenesOmimTerm = {
  /**
   * The OMIM ID.
   */
  omim_id: string
  /**
   * The OMIM label.
   */
  label: string
}

/**
 * A record from the ORDO gene association.
 */
export type GenesOrphaRecord = {
  /**
   * The HGNC gene ID.
   */
  hgnc_id: string
  /**
   * The associated ORPHA diseases.
   */
  orpha_diseases: Array<GenesOrphaTerm>
}

/**
 * Description of an ORDO record.
 */
export type GenesOrphaTerm = {
  /**
   * The ORPHA ID.
   */
  orpha_id: string
  /**
   * The disease name.
   */
  label: string
}

/**
 * Message for panel information.
 */
export type GenesPanel = {
  /**
   * Panel ID.
   */
  id: number
  /**
   * Panel hash ID.
   */
  hash_id?: string | null
  /**
   * Panel name.
   */
  name: string
  /**
   * Disease group.
   */
  disease_group: string
  /**
   * Disease subgroup.
   */
  disease_sub_group: string
  /**
   * Version
   */
  version: string
  /**
   * Creation date of version.
   */
  version_created: string
  /**
   * Relevant disorders.
   */
  relevant_disorders: Array<string>
  stats?: null | GenesPanelStats
  /**
   * Panel types.
   */
  types: Array<GenesPanelType>
}

/**
 * An association of a gene by HGNC with a panel from PanelApp.
 */
export type GenesPanelappAssociation = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The PanelApp confidence level.
   */
  confidence_level: GenesPanelappAssociationConfidenceLevel
  /**
   * The PanelApp entity type.
   */
  entity_type: GenesPanelappEntityType
  /**
   * The PanelApp entity name.
   */
  mode_of_inheritance?: string | null
  /**
   * The PanelApp publications.
   */
  phenotypes: Array<string>
  panel?: null | GenesPanelappPanel
}

/**
 * Enumeration for PanelApp confidence level.
 */
export type GenesPanelappAssociationConfidenceLevel = 'Green' | 'Amber' | 'Red' | 'None'

/**
 * Enumeration for entity type.
 */
export type GenesPanelappEntityType = 'Gene' | 'Region' | 'Str'

/**
 * A panel from PanelApp.
 */
export type GenesPanelappPanel = {
  /**
   * PanelApp panel ID.
   */
  id: number
  /**
   * PanelApp panel name.
   */
  name: string
  /**
   * PanelApp panel version.
   */
  version: string
}

/**
 * Entry in PanelApp.
 */
export type GenesPanelAppRecord = {
  gene_data?: null | GenesGeneData
  /**
   * Entity type.
   */
  entity_type: GenesEntityType
  /**
   * Entity name.
   */
  entity_name: string
  /**
   * Confidence level.
   */
  confidence_level: GenesPanelappRecordConfidenceLevel
  penetrance?: null | GenesPenetrance
  /**
   * Publications.
   */
  publications: Array<string>
  /**
   * Evidence.
   */
  evidence: Array<string>
  /**
   * Phenotypes.
   */
  phenotypes: Array<string>
  /**
   * Mode of inheritance.
   */
  mode_of_inheritance: string
  panel?: null | GenesPanel
}

/**
 * Enumeration for PanelApp confidence level.
 */
export type GenesPanelappRecordConfidenceLevel = 'Green' | 'Amber' | 'Red' | 'None'

/**
 * Message for panel statistics.
 */
export type GenesPanelStats = {
  /**
   * Number of genes.
   */
  number_of_genes: number
  /**
   * Number of STRs.
   */
  number_of_strs: number
  /**
   * Number of regions.
   */
  number_of_regions: number
}

/**
 * Message for panel types.
 */
export type GenesPanelType = {
  /**
   * Type name.
   */
  name: string
  /**
   * Slug.
   */
  slug: string
  /**
   * Description.
   */
  description: string
}

/**
 * Enumeration for penetrance.
 */
export type GenesPenetrance = 'Complete' | 'Incomplete'

/**
 * Entry in the rCNV dosage sensitivity scores (Collins et al., 2022).
 */
export type GenesRcnvRecord = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The pHaplo value.
   */
  p_haplo: number
  /**
   * The pTriplo value.
   */
  p_triplo: number
}

/**
 * Reference into function record.
 */
export type GenesRifEntry = {
  /**
   * The RIF text.
   */
  text: string
  /**
   * PubMed IDs.
   */
  pmids: Array<number>
}

/**
 * Parameters for `handle`.
 */
export type GenesSearchQuery = {
  /**
   * The string to search for.
   */
  q: string
  /**
   * The fields to search in.
   */
  fields?: Array<GenesFields> | null
  /**
   * Enable case sensitive search.
   */
  case_sensitive?: boolean | null
}

/**
 * Result for `handle`.
 */
export type GenesSearchResponse = {
  /**
   * The resulting gene information.
   */
  genes: Array<Scored>
}

/**
 * Entry with sHet information (Weghorn et al., 2019).
 */
export type GenesShetRecord = {
  /**
   * The HGNC ID.
   */
  hgnc_id: string
  /**
   * The sHet value.
   */
  s_het: number
}

/**
 * Local genome release for command line arguments.
 */
export type GenomeRelease = 'grch37' | 'grch38'

/**
 * Encapsulate VCF INFO fields related to age.
 */
export type Gnomad2AgeInfo = {
  /**
   * Histogram of ages of individuals with a homoplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0].
   */
  age_hist_hom_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_larger?: number | null
  /**
   * Histogram of ages of individuals with a heteroplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0]
   */
  age_hist_het_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_larger?: number | null
}

/**
 * Store the relevant allele counts and frequencies in a given sub cohort.
 */
export type Gnomad2AlleleCounts = {
  /**
   * Number of alternate alleles in sub cohort.
   */
  ac: number
  /**
   * Total number of alleles in the sub cohort.
   */
  an: number
  /**
   * Number of homozygous alternate alleles in the sub cohort.
   */
  nhomalt: number
  /**
   * Alternate allele frequency in the sub cohort.
   */
  af: number
}

/**
 * Store the allele counts for the given sub cohort and sub cohort factored by sex.
 */
export type Gnomad2AlleleCountsBySex = {
  overall?: null | Gnomad2AlleleCounts
  xx?: null | Gnomad2AlleleCounts
  xy?: null | Gnomad2AlleleCounts
}

/**
 * Store the allele counts for the given cohort.
 */
export type Gnomad2CohortAlleleCounts = {
  /**
   * Name of the cohort.
   */
  cohort?: string | null
  /**
   * Allele counts for each population.
   */
  by_population: Array<Gnomad2PopulationAlleleCounts>
  by_sex?: null | Gnomad2AlleleCountsBySex
  raw?: null | Gnomad2AlleleCounts
  /**
   * The population with maximum AF.
   */
  popmax?: string | null
  /**
   * Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and
   * indeterminate ancestry).
   */
  af_popmax?: number | null
  /**
   * Allele count in population with maximum AF.
   */
  ac_popmax?: number | null
  /**
   * Total number of alleles in population with maximum AF.
   */
  an_popmax?: number | null
  /**
   * Total number of homozygous individuals in population with maximum AF.
   */
  nhomalt_popmax?: number | null
}

/**
 * Encapsulate VCF INFO fields related to depth.
 */
export type Gnomad2DepthInfo = {
  /**
   * Count of dp values falling above highest histogram bin edge for all individuals.
   */
  dp_hist_all_n_larger?: number | null
  /**
   * Count of dp values falling above highest histogram bin edge for individuals with the
   * alternative allele
   */
  dp_hist_alt_n_larger?: number | null
  /**
   * Histogram of dp values for all individuals; bin edges are: [0.0, 200.0, 400.0, 600.0, 800.0,
   * 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_all_bin_freq: Array<number>
  /**
   * Histogram of dp values for individuals with the alternative allele; bin edges are: [0.0,
   * 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_alt_bin_freq: Array<number>
}

/**
 * Protocol buffer enum for site-level filters.
 */
export type Gnomad2Filter = 'allele_count_is_zero' | 'inbreeding_coeff' | 'pass' | 'random_forest'

/**
 * Liftover related information.
 */
export type Gnomad2LiftoverInfo = {
  /**
   * The REF and the ALT alleles have been reverse complemented in liftover since the mapping from
   * the previous reference to the current one was on the negative strand.
   */
  reverse_complemented_alleles: boolean
  /**
   * The REF and the ALT alleles have been swapped in liftover due to changes in the reference. It
   * is possible that not all INFO annotations reflect this swap, and in the genotypes, only the
   * GT, PL, and AD fields have been modified. You should check the TAGS_TO_REVERSE parameter that
   * was used during the LiftOver to be sure.
   */
  swapped_alleles: boolean
  /**
   * A list of the original alleles (including REF) of the variant prior to liftover.  If the
   * alleles were not changed during liftover, this attribute will be omitted.
   */
  original_alleles: Array<string>
  /**
   * The name of the source contig/chromosome prior to liftover.
   */
  original_contig?: string | null
  /**
   * The position of the variant on the source contig prior to liftover.
   */
  original_start?: string | null
}

/**
 * Store the allele counts for the given population.
 */
export type Gnomad2PopulationAlleleCounts = {
  /**
   * Name of the population.
   */
  population: string
  counts?: null | Gnomad2AlleleCountsBySex
  /**
   * The filtering allele frequency (using Poisson 95% CI).
   */
  faf95?: number | null
  /**
   * The filtering allele frequency (using Poisson 99% CI).
   */
  faf99?: number | null
}

/**
 * Encapsulate quality-related information.
 */
export type Gnomad2QualityInfo = {
  /**
   * Phred-scaled p-value of Fisher's exact test for strand bias.
   */
  fs?: number | null
  /**
   * Inbreeding coefficient as estimated from the genotype likelihoods per-sample when compared
   * against the Hardy-Weinberg expectation.
   */
  inbreeding_coeff?: number | null
  /**
   * Root mean square of the mapping quality of reads across all samples.
   */
  mq?: number | null
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference read mapping qualities.
   */
  mq_rank_sum?: number | null
  /**
   * Variant call confidence normalized by depth of sample reads supporting a variant.
   */
  qd?: number | null
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference read position bias.
   */
  read_pos_rank_sum?: number | null
  /**
   * Variant was used to build the positive training set of high-quality variants for VQSR.
   */
  vqsr_positive_train_site: boolean
  /**
   * Variant was used to build the negative training set of low-quality variants for VQSR.
   */
  vqsr_negative_train_site: boolean
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference base qualities.
   */
  base_q_rank_sum?: number | null
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference number of hard clipped bases.
   */
  clipping_rank_sum?: number | null
  /**
   * Strand bias estimated by the symmetric odds ratio test
   */
  sor?: number | null
  /**
   * Depth of informative coverage for each sample; reads with MQ=255 or with bad mates are
   * filtered.
   */
  dp?: number | null
  /**
   * Log-odds ratio of being a true variant versus being a false positive under the trained VQSR
   * Gaussian mixture model.
   */
  vqslod?: number | null
  /**
   * Allele-specific worst-performing annotation in the VQSR Gaussian mixture model
   */
  vqsr_culprit?: string | null
  /**
   * Variant falls within a segmental duplication region
   */
  segdup: boolean
  /**
   * Variant falls within a low complexity region.
   */
  lcr: boolean
  /**
   * Variant falls within a reference decoy region.
   */
  decoy: boolean
  /**
   * Variant was a callset-wide doubleton that was transmitted within a family (i.e., a singleton
   * amongst unrelated sampes in cohort).
   */
  transmitted_singleton: boolean
  /**
   * Maximum p-value over callset for binomial test of observed allele balance for a heterozygous
   * genotype, given expectation of AB=0.5.
   */
  pab_max?: number | null
}

/**
 * Random forest related information.
 */
export type Gnomad2RandomForestInfo = {
  /**
   * Random forest prediction probability for a site being a true variant.
   */
  rf_tp_probability: number
  /**
   * Variant was labelled as a positive example for training of random forest model.
   */
  rf_positive_label: boolean
  /**
   * Variant was labelled as a negative example for training of random forest model.
   */
  rf_negative_label: boolean
  /**
   * Random forest training label.
   */
  rf_label?: string | null
  /**
   * Variant was used in training random forest model.
   */
  rf_train: boolean
}

/**
 * Protocol buffer for the gnomAD v2 VCF record.
 *
 * The more specialized fields from the INFO column are stored in separate, optional fields such
 * that we don't end up with a humongous message.
 */
export type Gnomad2Record = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * Alternate allele.
   */
  alt_allele: string
  /**
   * Site-level filters.
   */
  filters: Array<Gnomad2Filter>
  /**
   * VEP annotation records.
   */
  vep: Array<Gnomad2Vep>
  /**
   * Variant allele counts in the different cohorts and population.
   *
   * The populations in gnomAD v2/3 are: empty for global, "controls", "non_cancer", "non_neuro",
   * and "non_topmed".
   */
  allele_counts: Array<Gnomad2CohortAlleleCounts>
  /**
   * Variant (on sex chromosome) falls outside a pseudoautosomal region
   */
  nonpar: boolean
  liftover_info?: null | Gnomad2LiftoverInfo
  rf_info?: null | Gnomad2RandomForestInfo
  variant_info?: null | Gnomad2VariantInfo
  quality_info?: null | Gnomad2QualityInfo
  age_info?: null | Gnomad2AgeInfo
  depth_info?: null | Gnomad2DepthInfo
}

/**
 * Variant type related information.
 */
export type Gnomad2VariantInfo = {
  /**
   * Variant type (snv, indel, multi-snv, multi-indel, or mixed).
   */
  variant_type: string
  /**
   * Allele type (snv, ins, del, or mixed).
   */
  allele_type: string
  /**
   * Total number of alternate alleles observed at variant locus.
   */
  n_alt_alleles: number
  /**
   * Variant type was mixed.
   */
  was_mixed: boolean
  /**
   * Variant locus coincides with a spanning deletion (represented by a star) observed elsewhere
   * in the callset.
   */
  has_star: boolean
}

/**
 * Protocol buffer for the gnomAD-mtDNA VEP predictions.
 */
export type Gnomad2Vep = {
  /**
   * Allele of record.
   */
  allele: string
  /**
   * Consequence, e.g., `"missense_variant"`.
   */
  consequence: string
  /**
   * Impact, e.g., `"MODERATE"`.
   */
  impact: string
  /**
   * Gene symbol, e.g., `"PCSK9"`.
   */
  symbol: string
  /**
   * Gene ID, `e.g., "ENSG00000169174"`.
   */
  gene: string
  /**
   * Feature type, e.g., `"Transcript"`.
   */
  feature_type: string
  /**
   * Feature ID, e.g., `"ENST00000302118"`.
   */
  feature: string
  /**
   * Feature biotype, e.g., `"protein_coding"`.
   */
  feature_biotype: string
  /**
   * Ranked exon number, e.g., `"1/4"`.
   */
  exon?: string | null
  /**
   * Ranked intron number, e.g., `"1/4"`.
   */
  intron?: string | null
  /**
   * cDNA position, e.g., `"ENST00000302118.5:c.89C>G"`.
   */
  hgvsc?: string | null
  /**
   * Protein position, e.g., `"ENSP00000302118.5:p.Thr30Arg"`.
   */
  hgvsp?: string | null
  /**
   * cDNA position, e.g., `"89/1863"`.
   */
  cdna_position?: string | null
  /**
   * CDS position, e.g., `"89/1863"`.
   */
  cds_position?: string | null
  /**
   * Protein position, e.g., `"30/620"`.
   */
  protein_position?: string | null
  /**
   * Amino acids, e.g., `"T/R"`.
   */
  amino_acids?: string | null
  /**
   * Codons, e.g., `"gCg/gGg"`.
   */
  codons?: string | null
  /**
   * Existing variation info.
   */
  existing_variation?: string | null
  /**
   * dbSNP ID, e.g., `"rs28942080"`.
   */
  dbsnp_id?: string | null
  /**
   * Distance output of VEP.
   */
  distance?: string | null
  /**
   * Strand, e.g., `"1"`.
   */
  strand?: string | null
  /**
   * Flags, e.g., `"cds_end_NF"`.
   */
  flags?: string | null
  /**
   * Variant class, e.g., `"SNV"`.
   */
  variant_class?: string | null
  /**
   * Minimised output of VEP.
   */
  minimised?: string | null
  /**
   * Symbol source, e.g., `"HGNC"`.
   */
  symbol_source?: string | null
  /**
   * HGNC ID, e.g., `"HGNC:8706"`.
   */
  hgnc_id?: string | null
  /**
   * Whether this is the canonical transcript.
   */
  canonical: boolean
  /**
   * Transcript support level, e.g., `"1"`.
   */
  tsl?: number | null
  /**
   * APPRIS annotation, e.g. `"P1"`.
   */
  appris?: string | null
  /**
   * CCDS ID, e.g., `"CCDS30547.1"`.
   */
  ccds?: string | null
  /**
   * Ensembl protein ID, e.g., `"ENSP00000302118"`.
   */
  ensp?: string | null
  /**
   * SwissProt ID, e.g., `"P04114"`.
   */
  swissprot?: string | null
  /**
   * TREMBL ID, e.g., `"Q5T4W7"`.
   */
  trembl?: string | null
  /**
   * UniParc ID, e.g., `"UPI000002D4B2"`.
   */
  uniparc?: string | null
  /**
   * Gene phenotype from VEP.
   */
  gene_pheno?: string | null
  sift?: null | VepCommonPrediction
  polyphen?: null | VepCommonPrediction
  /**
   * Protein domains, e.g., `\[["2p4e", "ENSP_mappings"\], \["2qtw", "ENSP_mappings"]\]`.
   */
  domains: Array<VepCommonDomain>
  /**
   * HGVS offset.
   */
  hgvs_offset?: string | null
  /**
   * Overall minor allele frequency.
   */
  gmaf?: number | null
  /**
   * Minor allele frequency in AFR population.
   */
  afr_maf?: number | null
  /**
   * Minor allele frequency in AMR population.
   */
  amr_maf?: number | null
  /**
   * Minor allele frequency in EAS population.
   */
  eas_maf?: number | null
  /**
   * Minor allele frequency in EUR population.
   */
  eur_maf?: number | null
  /**
   * Minor allele frequency in SAS population.
   */
  sas_maf?: number | null
  /**
   * Minor allele frequency in AA population.
   */
  aa_maf?: number | null
  /**
   * Minor allele frequency in EA population.
   */
  ea_maf?: number | null
  /**
   * Minor allele frequency in ExAC.
   */
  exac_maf?: number | null
  /**
   * Minor allele frequency EXAC ADJ population.
   */
  exac_adj_maf?: number | null
  /**
   * Minor allele frequency in ExAC AFR population.
   */
  exac_afr_maf?: number | null
  /**
   * Minor allele frequency in ExAC AMR population.
   */
  exac_amr_maf?: number | null
  /**
   * Minor allele frequency in ExAC EAS population.
   */
  exac_eas_maf?: number | null
  /**
   * Minor allele frequency in ExAC FIN population.
   */
  exac_fin_maf?: number | null
  /**
   * Minor allele frequency in ExAC NFE population.
   */
  exac_nfe_maf?: number | null
  /**
   * Minor allele frequency in ExAC OTH population.
   */
  exac_oth_maf?: number | null
  /**
   * Minor allele frequency in ExAC SAS population.
   */
  exac_sas_maf?: number | null
  /**
   * Clinical significance.
   */
  clin_sig?: string | null
  /**
   * Whether the variant is somatic.
   */
  somatic?: string | null
  /**
   * Phenotype.
   */
  pheno?: string | null
  /**
   * Pubmed ID.
   */
  pubmed?: string | null
  /**
   * Motif name.
   */
  motif_name?: string | null
  /**
   * Motif pos.
   */
  motif_pos?: string | null
  /**
   * "high inf pos" from VEP.
   */
  high_inf_pos?: string | null
  /**
   * Motif score change.
   */
  motif_score_change?: string | null
  /**
   * Loss of function prediction.
   */
  lof?: string | null
  /**
   * Loss of function filter.
   */
  lof_filter?: string | null
  /**
   * Loss of function flags.
   */
  lof_flags?: string | null
  /**
   * Loss of function info.
   */
  lof_info?: string | null
}

/**
 * Encapsulate VCF INFO fields related to age.
 */
export type Gnomad3AgeInfo = {
  /**
   * Histogram of ages of individuals with a homoplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0].
   */
  age_hist_hom_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_larger?: number | null
  /**
   * Histogram of ages of individuals with a heteroplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0]
   */
  age_hist_het_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_larger?: number | null
}

/**
 * Store the relevant allele counts and frequencies in a given sub cohort.
 */
export type Gnomad3AlleleCounts = {
  /**
   * Number of alternate alleles in sub cohort.
   */
  ac: number
  /**
   * Total number of alleles in the sub cohort.
   */
  an: number
  /**
   * Number of homozygous alternate alleles in the sub cohort.
   */
  nhomalt: number
  /**
   * Alternate allele frequency in the sub cohort.
   */
  af: number
}

/**
 * Store the allele counts for the given sub cohort and sub cohort factored by sex.
 */
export type Gnomad3AlleleCountsBySex = {
  overall?: null | Gnomad3AlleleCounts
  xx?: null | Gnomad3AlleleCounts
  xy?: null | Gnomad3AlleleCounts
}

/**
 * Store the allele counts for the given cohort.
 */
export type Gnomad3CohortAlleleCounts = {
  /**
   * Name of the cohort.
   */
  cohort?: string | null
  /**
   * Allele counts for each population.
   */
  by_population: Array<Gnomad3PopulationAlleleCounts>
  by_sex?: null | Gnomad3AlleleCountsBySex
  raw?: null | Gnomad3AlleleCounts
  /**
   * The population with maximum AF.
   */
  popmax?: string | null
  /**
   * Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and
   * indeterminate ancestry).
   */
  af_popmax?: number | null
  /**
   * Allele count in population with maximum AF.
   */
  ac_popmax?: number | null
  /**
   * Total number of alleles in population with maximum AF.
   */
  an_popmax?: number | null
  /**
   * Total number of homozygous individuals in population with maximum AF.
   */
  nhomalt_popmax?: number | null
}

/**
 * Encapsulate VCF INFO fields related to depth.
 */
export type Gnomad3DepthInfo = {
  /**
   * Count of dp values falling above highest histogram bin edge for all individuals.
   */
  dp_hist_all_n_larger?: number | null
  /**
   * Count of dp values falling above highest histogram bin edge for individuals with the
   * alternative allele
   */
  dp_hist_alt_n_larger?: number | null
  /**
   * Histogram of dp values for all individuals; bin edges are: [0.0, 200.0, 400.0, 600.0, 800.0,
   * 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_all_bin_freq: Array<number>
  /**
   * Histogram of dp values for individuals with the alternative allele; bin edges are: [0.0,
   * 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_alt_bin_freq: Array<number>
}

/**
 * Store details on variant effect predictions.
 */
export type Gnomad3EffectInfo = {
  /**
   * PrimateAI's deleteriousness score from 0 (less deleterious) to 1 (more deleterious).
   */
  primate_ai_score?: number | null
  /**
   * dbNSFP's Revel score from 0 to 1. Variants with higher scores are predicted to be
   * more likely to be deleterious.
   */
  revel_score?: number | null
  /**
   * Illumina's SpliceAI max delta score; interpreted as the probability of the variant
   * being splice-altering.
   */
  splice_ai_max_ds?: number | null
  /**
   * The consequence term associated with the max delta score in 'splice_ai_max_ds'.
   */
  splice_ai_consequence?: string | null
  /**
   * Raw CADD scores are interpretable as the extent to which the annotation profile for a given variant suggests that the variant is likely to be 'observed' (negative values) vs 'simulated' (positive values). Larger values are more deleterious.
   */
  cadd_raw?: number | null
  /**
   * Cadd Phred-like scores ('scaled C-scores') ranging from 1 to 99, based on the rank of each variant relative to all possible 8.6 billion substitutions in the human reference genome. Larger values are more deleterious.
   */
  cadd_phred?: number | null
}

/**
 * Protocol buffer enum for site-level filters.
 */
export type Gnomad3Filter = 'allele_count_is_zero' | 'as_vsqr' | 'inbreeding_coeff' | 'pass'

/**
 * Store the allele counts for the given sub cohort in the given population.
 */
export type Gnomad3PopulationAlleleCounts = {
  /**
   * Name of the population.
   */
  population: string
  counts?: null | Gnomad3AlleleCountsBySex
  /**
   * The filtering allele frequency (using Poisson 95% CI).
   */
  faf95?: number | null
  /**
   * The filtering allele frequency (using Poisson 99% CI).
   */
  faf99?: number | null
  /**
   * The filtering allele frequency for XX samples (using Poisson 95% CI).
   */
  faf95_xx?: number | null
  /**
   * The filtering allele frequency for XX samples (using Poisson 99% CI).
   */
  faf99_xx?: number | null
  /**
   * The filtering allele frequency for XY samples (using Poisson 95% CI).
   */
  faf95_xy?: number | null
  /**
   * The filtering allele frequency for XY samples (using Poisson 99% CI).
   */
  faf99_xy?: number | null
}

/**
 * Encapsulate quality-related information.
 */
export type Gnomad3QualityInfo = {
  /**
   * Allele-specific phred-scaled p-value of Fisher's exact test for strand bias.
   */
  as_fs?: number | null
  /**
   * Inbreeding coefficient as estimated from the genotype likelihoods per-sample when compared
   * against the Hardy-Weinberg expectation.
   */
  inbreeding_coeff?: number | null
  /**
   * Allele-specific root mean square of the mapping quality of reads across all samples
   */
  as_mq?: number | null
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference read mapping qualities.
   */
  mq_rank_sum?: number | null
  /**
   * Allele-specific z-score from Wilcoxon rank sum test of alternate vs. reference read
   * mapping qualities.
   */
  as_mq_rank_sum?: number | null
  /**
   * Allele-specific variant call confidence normalized by depth of sample reads supporting a
   * variant.
   */
  as_qd?: number | null
  /**
   * Z-score from Wilcoxon rank sum test of alternate vs. reference read position bias.
   */
  read_pos_rank_sum?: number | null
  /**
   * Allele-specific z-score from Wilcoxon rank sum test of alternate vs. reference read position bias.
   */
  as_read_pos_rank_sum?: number | null
  /**
   * Allele-specific strand bias estimated by the symmetric odds ratio test.
   */
  as_sor?: number | null
  /**
   * Variant was used to build the positive training set of high-quality variants for VQSR.
   */
  positive_train_site: boolean
  /**
   * Variant was used to build the negative training set of low-quality variants for VQSR.
   */
  negative_train_site: boolean
  /**
   * Allele-specific log-odds ratio of being a true variant versus being a false positive under the trained VQSR Gaussian mixture model.
   */
  as_vqslod?: number | null
  /**
   * Allele-specific worst-performing annotation in the VQSR Gaussian mixture model.
   */
  as_culprit?: string | null
  /**
   * Variant falls within a segmental duplication region.
   */
  segdup: boolean
  /**
   * Variant falls within a low complexity region.
   */
  lcr: boolean
  /**
   * Variant was a callset-wide doubleton that was transmitted within a family (i.e., a singleton
   * amongst unrelated sampes in cohort).
   */
  transmitted_singleton: boolean
  /**
   * Maximum p-value over callset for binomial test of observed allele balance for a heterozygous genotype, given expectation of 0.5.
   */
  as_pab_max?: number | null
  /**
   * Allele-specific sum of PL\[0\] values; used to approximate the QUAL score.
   */
  as_qual_approx?: number | null
  /**
   * Allele-specific forward/reverse read counts for strand bias tests.
   */
  as_sb_table?: string | null
  /**
   * Strand bias estimated by the symmetric odds ratio test (v4 only).
   */
  sor?: number | null
}

/**
 * Protocol buffer for the gnomAD-nuclear VCF record.
 *
 * The more specialized fields from the INFO column are stored in separate, optional fields such
 * that we don't end up with a humongous message.
 */
export type Gnomad3Record = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * Alternate allele.
   */
  alt_allele: string
  /**
   * Site-level filters.
   */
  filters: Array<Gnomad3Filter>
  /**
   * VEP annotation records.
   */
  vep: Array<Gnomad3Vep>
  /**
   * Variant allele counts in the different cohorts and population.
   *
   * The populations in gnomAD v2/3 are: empty for global, "controls", "non_cancer", "non_neuro",
   * and "non_topmed".
   */
  allele_counts: Array<Gnomad3CohortAlleleCounts>
  /**
   * Variant (on sex chromosome) falls outside a pseudoautosomal region
   */
  nonpar: boolean
  effect_info?: null | Gnomad3EffectInfo
  variant_info?: null | Gnomad3VariantInfo
  quality_info?: null | Gnomad3QualityInfo
  age_info?: null | Gnomad3AgeInfo
  depth_info?: null | Gnomad3DepthInfo
}

/**
 * Variant type related information.
 */
export type Gnomad3VariantInfo = {
  /**
   * Variant type (snv, indel, multi-snv, multi-indel, or mixed).
   */
  variant_type: string
  /**
   * Allele type (snv, ins, del, or mixed).
   */
  allele_type: string
  /**
   * Total number of alternate alleles observed at variant locus.
   */
  n_alt_alleles: number
  /**
   * Variant type was mixed.
   */
  was_mixed: boolean
  /**
   * All samples are homozygous alternate for the variant.
   */
  monoallelic: boolean
  /**
   * Depth over variant genotypes (does not include depth of reference samples).
   */
  var_dp: number
  /**
   * Allele-specific depth over variant genotypes (does not include depth of reference samples) (v4 only).
   */
  as_vardp?: number | null
}

/**
 * Protocol buffer for the gnomAD-nuclear VEP predictions.
 */
export type Gnomad3Vep = {
  /**
   * Allele of record.
   */
  allele: string
  /**
   * Consequence, e.g., `"missense_variant"`.
   */
  consequence: string
  /**
   * Impact, e.g., `"MODERATE"`.
   */
  impact: string
  /**
   * Gene symbol, e.g., `"PCSK9"`.
   */
  symbol: string
  /**
   * Gene ID, `e.g., "ENSG00000169174"`.
   */
  gene: string
  /**
   * Feature type, e.g., `"Transcript"`.
   */
  feature_type: string
  /**
   * Feature ID, e.g., `"ENST00000302118"`.
   */
  feature: string
  /**
   * Feature biotype, e.g., `"protein_coding"`.
   */
  feature_biotype: string
  /**
   * Ranked exon number, e.g., `"1/4"`.
   */
  exon?: string | null
  /**
   * Ranked intron number, e.g., `"1/4"`.
   */
  intron?: string | null
  /**
   * cDNA position, e.g., `"ENST00000302118.5:c.89C>G"`.
   */
  hgvsc?: string | null
  /**
   * Protein position, e.g., `"ENSP00000302118.5:p.Thr30Arg"`.
   */
  hgvsp?: string | null
  /**
   * cDNA position, e.g., `"89/1863"`.
   */
  cdna_position?: string | null
  /**
   * CDS position, e.g., `"89/1863"`.
   */
  cds_position?: string | null
  /**
   * Protein position, e.g., `"30/620"`.
   */
  protein_position?: string | null
  /**
   * Amino acids, e.g., `"T/R"`.
   */
  amino_acids?: string | null
  /**
   * Codons, e.g., `"gCg/gGg"`.
   */
  codons?: string | null
  /**
   * TODO: actually is optional int32 allele_num = 18;
   * dbSNP ID, e.g., `"rs28942080"`.
   */
  dbsnp_id?: string | null
  /**
   * Distance output of VEP.
   */
  distance?: string | null
  /**
   * Strand, e.g., `"1"`.
   */
  strand?: string | null
  /**
   * Variant class, e.g., `"SNV"`.
   */
  variant_class?: string | null
  /**
   * Minimised output of VEP.
   */
  minimised?: string | null
  /**
   * Symbol source, e.g., `"HGNC"`.
   */
  symbol_source?: string | null
  /**
   * HGNC ID, e.g., `"HGNC:8706"`.
   */
  hgnc_id?: string | null
  /**
   * Whether this is the canonical transcript.
   */
  canonical?: boolean | null
  /**
   * Transcript support level, e.g., `"1"`.
   */
  tsl?: number | null
  /**
   * APPRIS annotation, e.g. `"P1"`.
   */
  appris?: string | null
  /**
   * CCDS ID, e.g., `"CCDS30547.1"`.
   */
  ccds?: string | null
  /**
   * Ensembl protein ID, e.g., `"ENSP00000302118"`.
   */
  ensp?: string | null
  /**
   * SwissProt ID, e.g., `"P04114"`.
   */
  swissprot?: string | null
  /**
   * TREMBL ID, e.g., `"Q5T4W7"`.
   */
  trembl?: string | null
  /**
   * UniParc ID, e.g., `"UPI000002D4B2"`.
   */
  uniparc?: string | null
  /**
   * Gene phenotype from VEP.
   */
  gene_pheno?: string | null
  sift?: null | VepCommonPrediction
  polyphen?: null | VepCommonPrediction
  /**
   * Protein domains, e.g., `\[["2p4e", "ENSP_mappings"\], \["2qtw", "ENSP_mappings"]\]`.
   */
  domains: Array<VepCommonDomain>
  /**
   * HGVS offset.
   */
  hgvs_offset?: string | null
  /**
   * Motif name.
   */
  motif_name?: string | null
  /**
   * Motif name.
   */
  motif_pos?: string | null
  /**
   * "high inf pos" from VEP.
   */
  high_inf_pos?: string | null
  /**
   * Motif score change.
   */
  motif_score_change?: string | null
  /**
   * Loss of function prediction.
   */
  lof?: string | null
  /**
   * Loss of function filter.
   */
  lof_filter?: string | null
  /**
   * Loss of function flags.
   */
  lof_flags?: string | null
  /**
   * Loss of function info.
   */
  lof_info?: string | null
}

/**
 * Store the allele counts for the given sub cohort in the given ancestry group.
 */
export type Gnomad4AncestryGroupAlleleCounts = {
  /**
   * Name of the ancestry group.
   */
  ancestry_group: string
  counts?: null | Gnomad3AlleleCountsBySex
  /**
   * The filtering allele frequency (using Poisson 95% CI).
   */
  faf95?: number | null
  /**
   * The filtering allele frequency (using Poisson 99% CI).
   */
  faf99?: number | null
  /**
   * The filtering allele frequency for XX samples (using Poisson 95% CI).
   */
  faf95_xx?: number | null
  /**
   * The filtering allele frequency for XX samples (using Poisson 99% CI).
   */
  faf99_xx?: number | null
  /**
   * The filtering allele frequency for XY samples (using Poisson 95% CI).
   */
  faf95_xy?: number | null
  /**
   * The filtering allele frequency for XY samples (using Poisson 99% CI).
   */
  faf99_xy?: number | null
}

/**
 * Store the allele counts for the given cohort.
 */
export type Gnomad4CohortAlleleCounts = {
  /**
   * Name of the cohort.
   */
  cohort?: string | null
  /**
   * Allele counts for each population.
   */
  by_ancestry_group: Array<Gnomad4AncestryGroupAlleleCounts>
  by_sex?: null | Gnomad3AlleleCountsBySex
  raw?: null | Gnomad3AlleleCounts
  /**
   * The ancestry group with maximum AF.
   */
  grpmax?: string | null
  /**
   * Maximum allele frequency across ancestry groups.
   */
  af_grpmax?: number | null
  /**
   * Allele count in ancestry group with maximum AF.
   */
  ac_grpmax?: number | null
  /**
   * Total number of alleles in ancestry group with maximum AF.
   */
  an_grpmax?: number | null
  /**
   * Total number of homozygous individuals in ancestry group with maximum AF.
   */
  nhomalt_grpmax?: number | null
}

/**
 * Store details on variant effect predictions.
 */
export type Gnomad4EffectInfo = {
  /**
   * Pangolin's largest delta score across 2 splicing consequences, which reflects the probability of the variant being splice-altering">
   */
  pangolin_largest_ds?: number | null
  /**
   * Base-wise conservation score across the 241 placental mammals in the Zoonomia project. Score ranges from -20 to 9.28, and reflects acceleration (faster evolution than expected under neutral drift, assigned negative scores) as well as conservation (slower than expected evolution, assigned positive scores).">
   */
  phylop?: number | null
  /**
   * Score that predicts the possible impact of an amino acid substitution on the structure and function of a human protein, ranging from 0.0 (tolerated) to 1.0 (deleterious).  We prioritize max scores for MANE Select transcripts where possible and otherwise report a score for the canonical transcript.">
   */
  polyphen_max?: number | null
  /**
   * The maximum REVEL score at a site's MANE Select or canonical transcript. It's an ensemble score for predicting the pathogenicity of missense variants (based on 13 other variant predictors). Scores ranges from 0 to 1. Variants with higher scores are predicted to be more likely to be deleterious.">
   */
  revel_max?: number | null
  /**
   * Score reflecting the scaled probability of the amino acid substitution being tolerated, ranging from 0 to 1. Scores below 0.05 are predicted to impact protein function. We prioritize max scores for MANE Select transcripts where possible and otherwise report a score for the canonical transcript.">
   */
  sift_max?: number | null
  /**
   * Illumina's SpliceAI max delta score; interpreted as the probability of the variant being splice-altering.">
   */
  spliceai_ds_max?: number | null
  /**
   * Raw CADD scores are interpretable as the extent to which the annotation profile for a given variant suggests that the variant is likely to be 'observed' (negative values) vs 'simulated' (positive values). Larger values are more deleterious.
   */
  cadd_raw?: number | null
  /**
   * Cadd Phred-like scores ('scaled C-scores') ranging from 1 to 99, based on the rank of each variant relative to all possible 8.6 billion substitutions in the human reference genome. Larger values are more deleterious.
   */
  cadd_phred?: number | null
}

/**
 * Protocol buffer for the gnomAD-nuclear VCF record.
 *
 * The more specialized fields from the INFO column are stored in separate, optional fields such
 * that we don't end up with a humongous message.
 */
export type Gnomad4Record = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * Alternate allele.
   */
  alt_allele: string
  /**
   * Site-level filters.
   */
  filters: Array<Gnomad3Filter>
  /**
   * VEP annotation records.
   */
  vep: Array<Gnomad4Vep>
  /**
   * Variant allele counts in the different cohorts and population.
   *
   * The populations in gnomAD v4 are: empty for global, "joint" for exome+genomes.
   */
  allele_counts: Array<Gnomad4CohortAlleleCounts>
  /**
   * Variant (on sex chromosome) falls outside a pseudoautosomal region
   */
  nonpar: boolean
  /**
   * All samples are heterozygous for the variant
   */
  only_het: boolean
  /**
   * Variant falls outside of Broad exome capture regions (exomes only).
   */
  outside_broad_capture_region: boolean
  /**
   * Variant falls outside of UK Biobank exome capture regions(exomes only).
   */
  outside_ukb_capture_region: boolean
  /**
   * Variant was a callset-wide doubleton that was present only in two siblings (i.e., a singleton amongst unrelated samples in cohort) (exomes only).
   */
  sibling_singleton: boolean
  effect_info?: null | Gnomad4EffectInfo
  variant_info?: null | Gnomad3VariantInfo
  quality_info?: null | Gnomad3QualityInfo
  age_info?: null | Gnomad3AgeInfo
  depth_info?: null | Gnomad3DepthInfo
  vrs_info?: null | Gnomad4VrsInfo
}

/**
 * Protocol buffer for the gnomAD-nuclear VEP predictions.
 */
export type Gnomad4Vep = {
  /**
   * Allele of record.
   */
  allele: string
  /**
   * Consequence, e.g., `"missense_variant"`.
   */
  consequence: string
  /**
   * Impact, e.g., `"MODERATE"`.
   */
  impact: string
  /**
   * Gene symbol, e.g., `"PCSK9"`.
   */
  symbol: string
  /**
   * Gene ID, `e.g., "ENSG00000169174"`.
   */
  gene: string
  /**
   * Feature type, e.g., `"Transcript"`.
   */
  feature_type: string
  /**
   * Feature ID, e.g., `"ENST00000302118"`.
   */
  feature: string
  /**
   * Feature biotype, e.g., `"protein_coding"`.
   */
  feature_biotype: string
  /**
   * Ranked exon number, e.g., `"1/4"`.
   */
  exon?: string | null
  /**
   * Ranked intron number, e.g., `"1/4"`.
   */
  intron?: string | null
  /**
   * cDNA position, e.g., `"ENST00000302118.5:c.89C>G"`.
   */
  hgvsc?: string | null
  /**
   * Protein position, e.g., `"ENSP00000302118.5:p.Thr30Arg"`.
   */
  hgvsp?: string | null
  /**
   * cDNA position, e.g., `"89/1863"`.
   */
  cdna_position?: string | null
  /**
   * CDS position, e.g., `"89/1863"`.
   */
  cds_position?: string | null
  /**
   * Protein position, e.g., `"30/620"`.
   */
  protein_position?: string | null
  /**
   * Amino acids, e.g., `"T/R"`.
   */
  amino_acids?: string | null
  /**
   * Codons, e.g., `"gCg/gGg"`.
   */
  codons?: string | null
  /**
   * Allele count.
   */
  allele_num?: number | null
  /**
   * Distance output of VEP.
   */
  distance?: string | null
  /**
   * Strand, e.g., `"1"`.
   */
  strand?: string | null
  /**
   * Flags
   */
  flags?: string | null
  /**
   * Variant class, e.g., `"SNV"`.
   */
  variant_class?: string | null
  /**
   * Symbol source, e.g., `"HGNC"`.
   */
  symbol_source?: string | null
  /**
   * HGNC ID, e.g., `"HGNC:8706"`.
   */
  hgnc_id?: string | null
  /**
   * Whether this is the canonical transcript.
   */
  canonical?: boolean | null
  /**
   * Presence in MANE Select
   */
  mane_select?: boolean | null
  /**
   * Presence in MANE Plus Clinical
   */
  mane_plus_clinical?: boolean | null
  /**
   * Transcript support level, e.g., `"1"`.
   */
  tsl?: number | null
  /**
   * APPRIS annotation, e.g. `"P1"`.
   */
  appris?: string | null
  /**
   * CCDS ID, e.g., `"CCDS30547.1"`.
   */
  ccds?: string | null
  /**
   * Ensembl protein ID, e.g., `"ENSP00000302118"`.
   */
  ensp?: string | null
  /**
   * Uniprot isoform.
   */
  uniprot_isoform?: string | null
  /**
   * Value of VEP "SOURCE" field.
   */
  source?: string | null
  /**
   * Protein domains, e.g., `\[["2p4e", "ENSP_mappings"\], \["2qtw", "ENSP_mappings"]\]`.
   */
  domains: Array<VepCommonDomain>
  /**
   * miRNA information.
   */
  mirna?: string | null
  /**
   * HGVS offset.
   */
  hgvs_offset?: string | null
  /**
   * PubMed IDs
   */
  pubmed?: string | null
  /**
   * Motif name.
   */
  motif_name?: string | null
  /**
   * Motif name.
   */
  motif_pos?: string | null
  /**
   * "high inf pos" from VEP.
   */
  high_inf_pos?: string | null
  /**
   * Motif score change.
   */
  motif_score_change?: string | null
  /**
   * Transcription factors.
   */
  transcription_factors?: string | null
  /**
   * Loss of function prediction.
   */
  lof?: string | null
  /**
   * Loss of function filter.
   */
  lof_filter?: string | null
  /**
   * Loss of function flags.
   */
  lof_flags?: string | null
  /**
   * Loss of function info.
   */
  lof_info?: string | null
}

/**
 * VRS information
 */
export type Gnomad4VrsInfo = {
  /**
   * The computed identifiers for the GA4GH VRS Alleles corresponding to the values in the REF and ALT fields
   */
  allele_ids: Array<string>
  /**
   * Interresidue coordinates used as the location ends for the GA4GH VRS Alleles corresponding to the values in the REF and ALT fields
   */
  ends: Array<number>
  /**
   * Interresidue coordinates used as the location starts for the GA4GH VRS Alleles corresponding to the values in the REF and ALT fields
   */
  starts: Array<number>
  /**
   * The literal sequence states used for the GA4GH VRS Alleles corresponding to the values in the REF and ALT fields
   */
  states: Array<string>
}

/**
 * Encapsulate VCF INFO fields related to age.
 */
export type GnomadMtdnaAgeInfo = {
  /**
   * Histogram of ages of individuals with a homoplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0].
   */
  age_hist_hom_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * homoplasmic variant.
   */
  age_hist_hom_n_larger?: number | null
  /**
   * Histogram of ages of individuals with a heteroplasmic variant; bin edges are: [30.0, 35.0,
   * 40.0, 45.0, 50.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0]
   */
  age_hist_het_bin_freq: Array<number>
  /**
   * Count of age values falling below lowest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_smaller?: number | null
  /**
   * Count of age values falling above highest histogram bin edge for individuals with a
   * heteroplasmic variant.
   */
  age_hist_het_n_larger?: number | null
}

/**
 * Encapsulate VCF INFO fields related to depth.
 */
export type GnomadMtdnaDepthInfo = {
  /**
   * Count of dp values falling above highest histogram bin edge for all individuals.
   */
  dp_hist_all_n_larger?: number | null
  /**
   * Count of dp values falling above highest histogram bin edge for individuals with the
   * alternative allele
   */
  dp_hist_alt_n_larger?: number | null
  /**
   * Histogram of dp values for all individuals; bin edges are: [0.0, 200.0, 400.0, 600.0, 800.0,
   * 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_all_bin_freq: Array<number>
  /**
   * Histogram of dp values for individuals with the alternative allele; bin edges are: [0.0,
   * 200.0, 400.0, 600.0, 800.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0, 2000.0]
   */
  dp_hist_alt_bin_freq: Array<number>
}

/**
 * Protocol buffer enum for site-level filters.
 */
export type GnomadMtdnaFilter = 'artifact_prone_site' | 'indel_stack' | 'no_pass_genotype'

/**
 * Encapsulate VCF INFO fields related to filter failure histograms.
 */
export type GnomadMtdnaFilterHistograms = {
  /**
   * Histogram of number of individuals failing the base_qual filter (alternate allele median base
   * quality) across heteroplasmy levels, bin edges are: [0.0, 0.1, 0.2, 0.30000000000000004, 0.4,
   * 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]
   */
  base_qual_hist: Array<number>
  /**
   * Histogram of number of individuals failing the position filter (median distance of alternate
   * variants from end of reads) across heteroplasmy levels, bin edges are: [0.0, 0.1, 0.2, 0.
   * 30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]
   */
  position_hist: Array<number>
  /**
   * Histogram of number of individuals failing the strand_bias filter (evidence for alternate
   * allele comes from one read direction only) across heteroplasmy levels, bin edges are: [0.0,
   * 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9,
   * 1.0]
   */
  strand_bias_hist: Array<number>
  /**
   * Histogram of number of individuals failing the weak_evidence filter (mutation does not meet
   * likelihood threshold) across heteroplasmy levels, bin edges are: [0.0, 0.1, 0.2,
   * 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0]
   */
  weak_evidence_hist: Array<number>
  /**
   * Histogram of number of individuals failing the contamination filter across heteroplasmy
   * levels, bin edges are: [0.0, 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001,
   * 0.7000000000000001, 0.8, 0.9, 1.0]
   */
  contamination_hist: Array<number>
}

/**
 * Encapsulate VCF INFO fields related to haplogroups.
 */
export type GnomadMtdnaHaplogroupInfo = {
  /**
   * Present if variant is present as a haplogroup defining variant in PhyloTree build 17.
   */
  hap_defining_variant: boolean
  /**
   * List of overall allele number for each haplogroup, haplogroup order: ['A', 'B', 'C', 'D',
   * 'E', 'F', 'G', 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P',
   * 'R', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_an: Array<number>
  /**
   * List of AC_het for each haplogroup, haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G',
   * 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U',
   * 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_ac_het: Array<number>
  /**
   * List of AC_hom for each haplogroup, haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G',
   * 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U',
   * 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_ac_hom: Array<number>
  /**
   * List of AF_het for each haplogroup, haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G',
   * 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U',
   * 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_af_het: Array<number>
  /**
   * List of AF_hom for each haplogroup, haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G',
   * 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1', 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U',
   * 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_af_hom: Array<number>
  /**
   * Histogram of heteroplasmy levels for each haplogroup; bin edges are: [0.0, 0.1, 0.2,
   * 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0],
   * haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1',
   * 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
   *
   * Note that we encode this by concatenating all lists here because of limitations in
   * protocolbuffers (no native nested repeated fields).
   */
  hap_hl_hist: Array<number>
  /**
   * List of filtering allele frequency for each haplogroup restricted to homoplasmic variants,
   * haplogroup order: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'HV', 'I', 'J', 'K', 'L0', 'L1',
   * 'L2', 'L3', 'L4', 'L5', 'M', 'N', 'P', 'R', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
   */
  hap_faf_hom: Array<number>
  /**
   * Haplogroup with maximum AF_hom.
   */
  hapmax_af_hom?: string | null
  /**
   * Haplogroup with maximum AF_het.
   */
  hapmax_af_het?: string | null
  /**
   * Maximum filtering allele frequency across haplogroups restricted to homoplasmic variants.
   */
  faf_hapmax_hom?: number | null
}

/**
 * Encapsulate VCF INFO fields related to heteroplasmy levels.
 */
export type GnomadMtdnaHeteroplasmyInfo = {
  /**
   * Histogram of number of individuals with a heteroplasmy level below 0.1, bin edges are: [0.0,
   * 0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9,
   * 1.0]
   */
  heteroplasmy_below_min_het_threshold_hist: Array<number>
  /**
   * Histogram of heteroplasmy levels; bin edges are: [0.0, 0.1, 0.2, 0.30000000000000004, 0.4,
   * 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0].
   */
  hl_hist: Array<number>
  /**
   * Present if variant is found at an overall frequency of .001 across all samples with a
   * heteroplasmy level > 0 and < 0.50 (includes variants <0.01 heteroplasmy which are
   * subsequently filtered)
   */
  common_low_heteroplasmy: boolean
  /**
   * Maximum heteroplasmy level observed among all samples for that variant.
   */
  max_hl: number
}

/**
 * Encapsulate VCF INFO fields related to populations.
 */
export type GnomadMtdnaPopulationInfo = {
  /**
   * List of overall allele number for each population, population order: ['afr', 'ami', 'amr',
   * 'asj', 'eas', 'fin', 'nfe', 'oth', 'sas', 'mid']
   */
  pop_an: Array<number>
  /**
   * List of AC_het for each population, population order: ['afr', 'ami', 'amr', 'asj', 'eas',
   * 'fin', 'nfe', 'oth', 'sas', 'mid']
   */
  pop_ac_het: Array<number>
  /**
   * List of AC_hom for each population, population order: ['afr', 'ami', 'amr', 'asj', 'eas',
   * 'fin', 'nfe', 'oth', 'sas', 'mid']
   */
  pop_ac_hom: Array<number>
  /**
   * List of AF_hom for each population, population order: ['afr', 'ami', 'amr', 'asj', 'eas',
   * 'fin', 'nfe', 'oth', 'sas', 'mid']
   */
  pop_af_hom: Array<number>
  /**
   * List of AF_het for each population, population order: ['afr', 'ami', 'amr', 'asj', 'eas',
   * 'fin', 'nfe', 'oth', 'sas', 'mid']
   */
  pop_af_het: Array<number>
  /**
   * Histogram of heteroplasmy levels for each population; bin edges are: [0.0, 0.1, 0.2,
   * 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0],
   * population order: \['afr', 'ami', 'amr', 'asj', 'eas', 'fin', 'nfe', 'oth', 'sas', 'mid'\]
   *
   * Note that we encode this by concatenating all lists here because of limitations in
   * protocolbuffers (no native nested repeated fields).
   */
  pop_hl_hist: Array<number>
}

/**
 * Encapsulate VCF INFO fields related to quality.
 */
export type GnomadMtdnaQualityInfo = {
  /**
   * Mean depth across all individuals for the site.
   */
  dp_mean?: number | null
  /**
   * Mean MMQ (median mapping quality) across individuals with a variant for the site.
   */
  mq_mean?: number | null
  /**
   * Mean TLOD (Log 10 likelihood ratio score of variant existing versus not existing) across
   * individuals with a variant for the site.
   */
  tlod_mean?: number | null
}

/**
 * Protocol buffer for the gnomAD-mtDNA VCF record.
 *
 * The more specialized fields from the INFO column are stored in separate, optional fields such
 * that we don't end up with a humongous message.
 */
export type GnomadMtdnaRecord = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * Alternate allele.
   */
  alt_allele: string
  /**
   * Variant in format of RefPosAlt
   */
  variant_collapsed: string
  /**
   * Excluded allele count (number of individuals in which the variant was filtered out).
   */
  excluded_ac: number
  /**
   * Overall allele number (number of samples with non-missing genotype).
   */
  an: number
  /**
   * Allele count restricted to variants with a heteroplasmy level >= 0.95.
   */
  ac_hom: number
  /**
   * Allele count restricted to variants with a heteroplasmy level >= 0.10 and < 0.95.
   */
  ac_het: number
  /**
   * Allele frequency restricted to variants with a heteroplasmy level >= 0.95.
   */
  af_hom: number
  /**
   * Allele frequency restricted to variants with a heteroplasmy level >= 0.10 and < 0.95.
   */
  af_het: number
  /**
   * Site-level filters.
   */
  filters: Array<GnomadMtdnaFilter>
  /**
   * MitoTip raw score
   */
  mitotip_score?: number | null
  /**
   * MitoTip score interpretation
   */
  mitotip_trna_prediction?: string | null
  /**
   * tRNA pathogenicity classification from PON-mt-tRNA
   */
  pon_mt_trna_prediction?: string | null
  /**
   * tRNA ML_probability_of_pathogenicity from PON-mt-tRNA
   */
  pon_ml_probability_of_pathogenicity?: string | null
  /**
   * VEP v3 annotation records.
   */
  vep: Array<Gnomad3Vep>
  quality_info?: null | GnomadMtdnaQualityInfo
  heteroplasmy_info?: null | GnomadMtdnaHeteroplasmyInfo
  filter_histograms?: null | GnomadMtdnaFilterHistograms
  population_info?: null | GnomadMtdnaPopulationInfo
  haplogroup_info?: null | GnomadMtdnaHaplogroupInfo
  age_info?: null | GnomadMtdnaAgeInfo
  depth_info?: null | GnomadMtdnaDepthInfo
}

/**
 * Allow either a gnomAD v2/v3 or v4 record.
 */
export type GnomadRecord =
  | {
      /**
       * gnomAD v2 record.
       */
      gnomad2: Gnomad2Record
    }
  | {
      /**
       * gnomAD v3 record.
       */
      gnomad3: Gnomad3Record
    }
  | {
      /**
       * gnomAD v4 record.
       */
      gnomad4: Gnomad4Record
    }

/**
 * A HelixMtDb record.
 */
export type HelixMtDbRecord = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based start position.
   */
  pos: number
  /**
   * Reference allele.
   */
  ref_allele: string
  /**
   * / Alternate allele.
   */
  alt_allele: string
  /**
   * Total number of individuals.
   */
  num_total: number
  /**
   * Number of homoplasmic carriers.
   */
  num_het: number
  /**
   * Number of heteroplasmic carriers.
   */
  num_hom: number
  /**
   * Feature type.
   */
  feature_type: string
  /**
   * Gene name.
   */
  gene_name: string
}

/**
 * A scored result.
 */
export type Scored = {
  /**
   * The score.
   */
  score: number
  /**
   * The result.
   */
  data: GeneNames
}

/**
 * Annotation for a sinngle variant.
 */
export type SeqvarsAnnoResponseRecord = {
  /**
   * Annotations from CADD (TSV annotation file).
   */
  cadd?: {
    [key: string]: unknown
  } | null
  dbsnp?: null | DbsnpRecord
  /**
   * Annotations from dbNSFP (TSV annotation file).
   */
  dbnsfp?: {
    [key: string]: unknown
  } | null
  /**
   * Annotations from dbscSNV.
   */
  dbscsnv?: {
    [key: string]: unknown
  } | null
  gnomad_mtdna?: null | GnomadMtdnaRecord
  gnomad_exomes?: null | GnomadRecord
  gnomad_genomes?: null | GnomadRecord
  helixmtdb?: null | HelixMtDbRecord
  ucsc_conservation?: null | UcscConservationRecordList
  clinvar?: null | ExtractedVcvRecordList
}

/**
 * Parameters for `variant_annos::handle`.
 *
 * Defines a variant in VCF-style format with a genome release specification.
 */
export type SeqvarsAnnosQuery = {
  /**
   * Genome release specification.
   */
  genome_release: string
  /**
   * Chromosome name.
   */
  chromosome: string
  /**
   * 1-based position for VCF-style variant.
   */
  pos: number
  /**
   * Reference allele bases.
   */
  reference: string
  /**
   * Alterantive allele bases.
   */
  alternative: string
}

/**
 * Query response for `handle_with_openapi()`.
 */
export type SeqvarsAnnosResponse = {
  /**
   * The result records.
   */
  result: SeqvarsAnnoResponseRecord
}

/**
 * Information regarding the pagination.
 */
export type StrucvarsClinvarPageInfo = {
  /**
   * The total number of records.
   */
  total: number
  /**
   * The number of records per page.
   */
  per_page: number
  /**
   * The current page number.
   */
  current_page: number
  /**
   * The total number of pages.
   */
  total_pages: number
}

/**
 * Query of the `/api/v1/strucvars/clinvar-annos/query` endpoint.
 */
export type StrucvarsClinvarQuery = {
  /**
   * Genome release specification.
   */
  genome_release: GenomeRelease
  /**
   * Chromosome name.
   */
  chromosome: string
  /**
   * 1-based start position.
   */
  start: number
  /**
   * 1-based stop postion.
   */
  stop: number
  /**
   * Optionally, the variant types.
   */
  variation_types?: Array<ClinvarExtractedVariationType> | null
  /**
   * Optionally, minimal overlap.
   */
  min_overlap?: number | null
  /**
   * Optional 1-based page number.
   */
  page_no?: number | null
  /**
   * Optional page size.
   */
  page_size?: number | null
}

/**
 * Response of the `/api/v1/strucvars/clinvar-annos/query` endpoint.
 */
export type StrucvarsClinvarResponse = {
  /**
   * The records in this page.
   */
  records: Array<StrucvarsClinvarResponseRecord>
  /**
   * Pagination information.
   */
  page_info: StrucvarsClinvarPageInfo
}

/**
 * Information on one response record.
 */
export type StrucvarsClinvarResponseRecord = {
  record?: null | ClinvarExtractedVcvRecord
  /**
   * The reciprocal overlap with the query.
   */
  overlap: number
}

/**
 * A UCSC conservation record.
 */
export type UcscConservationRecord = {
  /**
   * Chromosome name.
   */
  chrom: string
  /**
   * 1-based, inclusive start position.
   */
  start: number
  /**
   * 1-based, inclusive stop position.
   */
  stop: number
  /**
   * HGNC identifier.
   */
  hgnc_id: string
  /**
   * ENST identifier.
   */
  enst_id: string
  /**
   * Exon number (1-based).
   */
  exon_num: number
  /**
   * Exon count.
   */
  exon_count: number
  /**
   * Alignment.
   */
  alignment: string
}

/**
 * List of `Record`s.
 */
export type UcscConservationRecordList = {
  /**
   * The records in the list.
   */
  records: Array<UcscConservationRecord>
}

/**
 * Protocol buffer for `Vep.domains`
 */
export type VepCommonDomain = {
  /**
   * Domain ID.
   */
  id: string
  /**
   * Domain source.
   */
  source: string
}

/**
 * Store the scoring of a prediction.
 */
export type VepCommonPrediction = {
  /**
   * Prediction.
   */
  prediction: string
  /**
   * Score.
   */
  score: number
}

/**
 * Version information for one database.
 */
export type VersionsAnnotationInfo = {
  /**
   * Database name.
   */
  database: AnnoDb
  version_spec?: null | VersionsVersionSpec
}

/**
 * Source name and version.
 */
export type VersionsCreatedFrom = {
  /**
   * The name of the data source.
   */
  name: string
  /**
   * The version of the data source.
   */
  version: string
}

/**
 * Query parameters for `handle()`.
 */
export type VersionsInfoQuery = {
  [key: string]: unknown
}

/**
 * Response for `handle()`.
 */
export type VersionsInfoResponse = {
  genes?: null | VersionsVersionSpec
  /**
   * Version information of annotation databases per release.
   */
  seqvars?: Array<VersionsPerRelease>
}

/**
 * Version information for databases in a given release.
 */
export type VersionsPerRelease = {
  /**
   * The genome release.
   */
  release: GenomeRelease
  /**
   * Version information of annotation databases.
   */
  version_infos?: Array<VersionsAnnotationInfo>
}

/**
 * Version specification.
 */
export type VersionsVersionSpec = {
  /**
   * Identifier of the data.
   */
  identifier: string
  /**
   * Title of the data.
   */
  title: string
  /**
   * Creator of the data.
   */
  creator: string
  /**
   * Contributors of the data.
   */
  contributor: Array<string>
  /**
   * Format of the data.
   */
  format: string
  /**
   * Date of the data.
   */
  date: string
  /**
   * Version of the data.
   */
  version: string
  /**
   * Optional genome release.
   */
  genome_release?: string | null
  /**
   * Data description.
   */
  description: string
  /**
   * Data source.
   */
  source: Array<string>
  /**
   * Created from information.
   */
  created_from: Array<VersionsCreatedFrom>
}

export type GenesClinvarData = {
  query?: {
    /**
     * The HGNC IDs to search for.
     */
    hgnc_id?: Array<string> | null
  }
}

export type GenesClinvarResponse2 = GenesClinvarResponse

export type GenesClinvarError = CustomError

export type GenesInfoData = {
  query?: {
    /**
     * The HGNC IDs to search for.
     */
    hgnc_id?: Array<string> | null
  }
}

export type GenesInfoResponse2 = GenesInfoResponse

export type GenesInfoError = CustomError

export type GenesLookupData = {
  query: {
    /**
     * The strings to search for.
     */
    q: Array<string>
  }
}

export type GenesLookupResponse2 = GenesLookupResponse

export type GenesLookupError = CustomError

export type GenesSearchData = {
  query: {
    /**
     * Enable case sensitive search.
     */
    case_sensitive?: boolean | null
    /**
     * The fields to search in.
     */
    fields?: Array<GenesFields> | null
    /**
     * The string to search for.
     */
    q: string
  }
}

export type GenesSearchResponse2 = GenesSearchResponse

export type GenesSearchError = CustomError

export type SeqvarsAnnosQueryData = {
  query: {
    /**
     * Alterantive allele bases.
     */
    alternative: string
    /**
     * Chromosome name.
     */
    chromosome: string
    /**
     * Genome release specification.
     */
    genome_release: string
    /**
     * 1-based position for VCF-style variant.
     */
    pos: number
    /**
     * Reference allele bases.
     */
    reference: string
  }
}

export type SeqvarsAnnosQueryResponse = SeqvarsAnnosResponse

export type SeqvarsAnnosQueryError = CustomError

export type StrucvarsClinvarQueryData = {
  query: {
    /**
     * Chromosome name.
     */
    chromosome: string
    /**
     * Genome release specification.
     */
    genome_release: GenomeRelease
    /**
     * Optionally, minimal overlap.
     */
    min_overlap?: number | null
    /**
     * Optional 1-based page number.
     */
    page_no?: number | null
    /**
     * Optional page size.
     */
    page_size?: number | null
    /**
     * 1-based start position.
     */
    start: number
    /**
     * 1-based stop postion.
     */
    stop: number
    /**
     * Optionally, the variant types.
     */
    variation_types?: Array<ClinvarExtractedVariationType> | null
  }
}

export type StrucvarsClinvarQueryResponse = StrucvarsClinvarResponse

export type StrucvarsClinvarQueryError = CustomError

export type VersionsInfoResponse2 = VersionsInfoResponse

export type VersionsInfoError = CustomError

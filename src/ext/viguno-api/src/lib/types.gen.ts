// This file is auto-generated by @hey-api/openapi-ts

export type CustomError = {
  err: string
}

/**
 * Struct for storing gene information in the result.
 */
export type Gene = {
  /**
   * The NCBI gene ID.
   */
  entrez_id: number
  /**
   * The gene symbol.
   */
  gene_symbol: string
  /**
   * The HGNC ID.
   */
  hgnc_id?: string | null
}

/**
 * Parameters for `fetch_hpo_genes`.
 *
 * This allows to query for genes.  The first given of the following is
 * interpreted.
 *
 * - `gene_id` -- specify gene ID (either NCBI or HGNC gene ID)
 * - `gene_symbol` -- specify the gene symbol
 * - `max_results` -- the maximnum number of records to return
 * - `hpo_terms` -- whether to include `"hpo_terms"` in result
 *
 * The following propery defines how matches are performed:
 *
 * - `match` -- how to match
 */
export type HpoGenesQuery = {
  /**
   * The gene ID to search for.
   */
  gene_id?: string | null
  /**
   * The gene symbol to search for.
   */
  gene_symbol?: string | null
  match_?: null | Match
  /**
   * Maximal number of results to return.
   */
  max_results?: number
  /**
   * Whether to include HPO terms.
   */
  hpo_terms?: boolean
}

/**
 * Container for the result.
 */
export type HpoGenesResult = {
  /**
   * Version information.
   */
  version: Version
  /**
   * The original query records.
   */
  query: HpoGenesQuery
  /**
   * The resulting records for the scored genes.
   */
  result: Array<HpoGenesResultEntry>
}

/**
 * Result entry for `handle`.
 */
export type HpoGenesResultEntry = {
  /**
   * The gene's NCBI ID.
   */
  gene_ncbi_id: number
  /**
   * The gene's HGNC symbol.
   */
  gene_symbol: string
  /**
   * The gene's HGNC ID.
   */
  hgnc_id?: string | null
  /**
   * The gene's associated HPO terms.
   */
  hpo_terms?: Array<ResultHpoTerm> | null
}

/**
 * Parameters for `handle`.
 *
 * This allows to query for diseases.  The first given of the following
 * is interpreted.
 *
 * - `omim_id` -- specify disease ID
 * - `name` -- specify the name to query for
 * - `max_results` -- the maximum number of records to return
 * - `hpo_terms` -- whether to include `"hpo_terms"` in result
 *
 * The following propery defines how matches are performed:
 *
 * - `match` -- how to match
 */
export type HpoOmimsQuery = {
  /**
   * The OMIM ID to search for.
   */
  omim_id?: string | null
  /**
   * The disease name to search for.
   */
  name?: string | null
  match?: null | Match
  /**
   * Whether case is insentivie, default is `false`.
   */
  ignore_case?: boolean | null
  /**
   * Maximal number of results to return.
   */
  max_results?: number
  /**
   * Whether to include HPO terms.
   */
  hpo_terms?: boolean
}

/**
 * Container for the result.
 */
export type HpoOmimsResult = {
  /**
   * Version information.
   */
  version: Version
  /**
   * The original query records.
   */
  query: HpoOmimsQuery
  /**
   * The resulting records for the scored genes.
   */
  result: Array<HpoOmimsResultEntry>
}

/**
 * Result entry for `handle`.
 */
export type HpoOmimsResultEntry = {
  /**
   * The OMIM ID.
   */
  omim_id: string
  /**
   * The OMIM disease name.
   */
  name: string
  /**
   * The gene's associated HPO terms.
   */
  hpo_terms?: Array<ResultHpoTerm> | null
}

/**
 * The performed query.
 */
export type HpoSimTermGeneQuery = {
  /**
   * The query HPO terms.
   */
  terms: Array<HpoTerm>
  /**
   * The gene list to score.
   */
  genes: Array<Gene>
}

/**
 * Result container data structure.
 */
export type HpoSimTermGeneResult = {
  /**
   * Version information.
   */
  version: Version
  /**
   * The original query records.
   */
  query: HpoSimTermGeneQuery
  /**
   * The resulting records for the scored genes.
   */
  result: Array<HpoSimTermGeneResultEntry>
}

/**
 * Store score for a record with information on individual terms.
 */
export type HpoSimTermGeneResultEntry = {
  /**
   * The gene symbol.
   */
  gene_symbol: string
  /**
   * The raw Phenomizer score.
   */
  raw_score: number
  /**
   * Details on individual terms.
   */
  terms?: Array<HpoSimTermGeneTermDetails> | null
}

/**
 * Detailed term scores.
 */
export type HpoSimTermGeneTermDetails = {
  term_query?: null | HpoTerm
  /**
   * The gene's HPO term.
   */
  term_gene: HpoTerm
  /**
   * The similarity score.
   */
  score: number
}

/**
 * Request as sent together with the response.
 *
 * The difference is that the `lhs` and `rhs` fields are replaced by vecs.
 */
export type HpoSimTermTermQuery = {
  /**
   * The one set of HPO terms to compute similarity for.
   */
  lhs: Array<string>
  /**
   * The second set of HPO terms to compute similarity for.
   */
  rhs: Array<string>
  /**
   * What should information content be based on.
   */
  ic_base?: IcBasedOn
  /**
   * The similarity method to use.
   */
  similarity?: SimilarityMethod
  /**
   * The score combiner.
   */
  combiner?: ScoreCombiner
}

/**
 * Result container.
 */
export type HpoSimTermTermResult = {
  /**
   * Version information.
   */
  version: Version
  /**
   * The original query records.
   */
  query: HpoSimTermTermQuery
  /**
   * The resulting records for the scored genes.
   */
  result: Array<HpoSimTermTermResultEntry>
}

/**
 * Result entry for `handle`.
 */
export type HpoSimTermTermResultEntry = {
  /**
   * The lhs entry.
   */
  lhs: string
  /**
   * The rhs entry.
   */
  rhs: string
  /**
   * The similarity score.
   */
  score: number
}

/**
 * Struct for loading an HPO term from JSON.
 */
export type HpoTerm = {
  /**
   * The term ID.
   */
  term_id: string
  /**
   * The term name (optional).
   */
  term_name?: string | null
}

/**
 * Parameters for `handle`.
 *
 * This allows to query for terms.  The first given of the following is
 * interpreted.
 *
 * - `term_id` -- specify term ID
 * - `gene_symbol` -- specify the gene symbol
 * - `max_results` -- the maximum number of records to return
 * - `genes` -- whether to include `"genes"` in result
 */
export type HpoTermsQuery = {
  /**
   * The term ID to search for.
   */
  term_id?: string | null
  /**
   * The term name to search for.
   */
  name?: string | null
  /**
   * Maximal number of results to return.
   */
  max_results?: number
  /**
   * Whether to include genes.
   */
  genes?: boolean
}

/**
 * Container for the result.
 */
export type HpoTermsResult = {
  /**
   * Version information.
   */
  version: Version
  /**
   * The original query records.
   */
  query: HpoTermsQuery
  /**
   * The resulting records for the scored genes.
   */
  result: Array<HpoTermsResultEntry>
}

/**
 * Result entry for `fetch_hpo_genes`.
 */
export type HpoTermsResultEntry = {
  /**
   * The HPO term's ID.
   */
  term_id: string
  /**
   * The HPO term's name.
   */
  name: string
  /**
   * Any matching description.
   */
  definition?: string | null
  /**
   * Any matching synonyms.
   */
  synonyms?: Array<string> | null
  /**
   * Any matching xref.
   */
  xrefs?: Array<string> | null
  /**
   * The gene's associated HPO terms.
   */
  genes?: Array<ResultGene> | null
}

/**
 * Enum for representing the information content kind.
 *
 * We replicate what is in the `hpo` create so we can put them on the command line and use
 * them in HTTP queries more easily.
 */
export type IcBasedOn = 'gene' | 'omim'

/**
 * Specify how to perform query matches in the API calls.
 */
export type Match = 'exact' | 'prefix' | 'suffix' | 'contains'

/**
 * Representation of a gene.
 */
export type ResultGene = {
  /**
   * The HPO ID.
   */
  ncbi_gene_id: number
  /**
   * The description.
   */
  gene_symbol: string
  /**
   * The HGNC ID.
   */
  hgnc_id?: string | null
}

/**
 * Representation of an HPO term.
 */
export type ResultHpoTerm = {
  /**
   * The HPO ID.
   */
  term_id: string
  /**
   * The term name.
   */
  name: string
}

/**
 * Representation of the standard combiners from HPO.
 *
 * We replicate what is in the `hpo` create so we can put them on the command line and use
 * them in HTTP queries more easily.
 */
export type ScoreCombiner = 'fun-sim-avg' | 'fun-sim-max' | 'bma'

/**
 * Enum for representing similarity method to use.
 *
 * We replicate what is in the `hpo` create so we can put them on the command line and use
 * them in HTTP queries more easily.
 */
export type SimilarityMethod =
  | 'distance-gene'
  | 'graph-ic'
  | 'information-coefficient'
  | 'jc'
  | 'lin'
  | 'mutation'
  | 'relevance'
  | 'resnik'

/**
 * Version information that is returned by the HTTP server.
 */
export type Version = {
  /**
   * Version of the HPO.
   */
  hpo: string
  /**
   * Version of the `viguno` package.
   */
  viguno: string
}

export type HpoGenesData = {
  query?: {
    /**
     * The gene ID to search for.
     */
    gene_id?: string | null
    /**
     * The gene symbol to search for.
     */
    gene_symbol?: string | null
    /**
     * Whether to include HPO terms.
     */
    hpo_terms?: boolean
    /**
     * The match mode.
     */
    match_?: null | Match
    /**
     * Maximal number of results to return.
     */
    max_results?: number
  }
}

export type HpoGenesResponse = HpoGenesResult

export type HpoGenesError = CustomError

export type HpoOmimsData = {
  query?: {
    /**
     * Whether to include HPO terms.
     */
    hpo_terms?: boolean
    /**
     * Whether case is insentivie, default is `false`.
     */
    ignore_case?: boolean | null
    /**
     * The match mode, default is `Match::Exact`.
     */
    match?: null | Match
    /**
     * Maximal number of results to return.
     */
    max_results?: number
    /**
     * The disease name to search for.
     */
    name?: string | null
    /**
     * The OMIM ID to search for.
     */
    omim_id?: string | null
  }
}

export type HpoOmimsResponse = HpoOmimsResult

export type HpoOmimsError = CustomError

export type HpoSimTermGeneData = {
  query: {
    /**
     * The set of ids for genes to use as "database".
     */
    gene_ids?: Array<string> | null
    /**
     * The set of symbols for genes to use as "database".
     */
    gene_symbols?: Array<string> | null
    /**
     * Set of terms to use as query.
     */
    terms: Array<string>
  }
}

export type HpoSimTermGeneResponse = HpoSimTermGeneResult

export type HpoSimTermGeneError = CustomError

export type HpoSimTermTermData = {
  query: {
    /**
     * The score combiner.
     */
    combiner?: ScoreCombiner
    /**
     * What should information content be based on.
     */
    ic_base?: IcBasedOn
    /**
     * The one set of HPO terms to compute similarity for.
     */
    lhs: Array<string>
    /**
     * The second set of HPO terms to compute similarity for.
     */
    rhs: Array<string>
    /**
     * The similarity method to use.
     */
    similarity?: SimilarityMethod
  }
}

export type HpoSimTermTermResponse = HpoSimTermTermResult

export type HpoSimTermTermError = CustomError

export type HpoTermsData = {
  query?: {
    /**
     * Whether to include genes.
     */
    genes?: boolean
    /**
     * Maximal number of results to return.
     */
    max_results?: number
    /**
     * The term name to search for.
     */
    name?: string | null
    /**
     * The term ID to search for.
     */
    term_id?: string | null
  }
}

export type HpoTermsResponse = HpoTermsResult

export type HpoTermsError = CustomError

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/clinvar/per_gene.proto" (package "annonars.clinvar.per_gene", syntax proto3)
// tslint:disable
//
// Detailed ClinVar per-gene information.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { GeneCoarseClinsigFrequencyCounts } from '../clinvar_data/class_by_freq'
import { ExtractedVcvRecord } from '../clinvar_data/extracted_vars'
import { GeneImpactCounts } from '../clinvar_data/gene_impact'

/**
 * Extracted variants per release.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.ExtractedVariantsPerRelease
 */
export interface ExtractedVariantsPerRelease {
  /**
   * Release version.
   *
   * @generated from protobuf field: optional string release = 1;
   */
  release?: string
  /**
   * Variants per gene.
   *
   * @generated from protobuf field: repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord variants = 2;
   */
  variants: ExtractedVcvRecord[]
}
/**
 * ClinVar detailed information per gene.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.ClinvarPerGeneRecord
 */
export interface ClinvarPerGeneRecord {
  /**
   * Counts of variants per impact
   *
   * @generated from protobuf field: optional annonars.clinvar_data.gene_impact.GeneImpactCounts per_impact_counts = 1;
   */
  perImpactCounts?: GeneImpactCounts
  /**
   * Counts of variants per impact / frequency
   *
   * @generated from protobuf field: optional annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts per_freq_counts = 2;
   */
  perFreqCounts?: GeneCoarseClinsigFrequencyCounts
  /**
   * Variants for the given gene.
   *
   * @generated from protobuf field: repeated annonars.clinvar.per_gene.ExtractedVariantsPerRelease per_release_vars = 3;
   */
  perReleaseVars: ExtractedVariantsPerRelease[]
}
// @generated message type with reflection information, may provide speed optimized methods
class ExtractedVariantsPerRelease$Type extends MessageType<ExtractedVariantsPerRelease> {
  constructor() {
    super('annonars.clinvar.per_gene.ExtractedVariantsPerRelease', [
      { no: 1, name: 'release', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'variants',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ExtractedVcvRecord
      }
    ])
  }
  create(value?: PartialMessage<ExtractedVariantsPerRelease>): ExtractedVariantsPerRelease {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.variants = []
    if (value !== undefined)
      reflectionMergePartial<ExtractedVariantsPerRelease>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ExtractedVariantsPerRelease
  ): ExtractedVariantsPerRelease {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* optional string release */ 1:
          message.release = reader.string()
          break
        case /* repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord variants */ 2:
          message.variants.push(
            ExtractedVcvRecord.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ExtractedVariantsPerRelease,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string release = 1; */
    if (message.release !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.release)
    /* repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord variants = 2; */
    for (let i = 0; i < message.variants.length; i++)
      ExtractedVcvRecord.internalBinaryWrite(
        message.variants[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.ExtractedVariantsPerRelease
 */
export const ExtractedVariantsPerRelease = new ExtractedVariantsPerRelease$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ClinvarPerGeneRecord$Type extends MessageType<ClinvarPerGeneRecord> {
  constructor() {
    super('annonars.clinvar.per_gene.ClinvarPerGeneRecord', [
      { no: 1, name: 'per_impact_counts', kind: 'message', T: () => GeneImpactCounts },
      {
        no: 2,
        name: 'per_freq_counts',
        kind: 'message',
        T: () => GeneCoarseClinsigFrequencyCounts
      },
      {
        no: 3,
        name: 'per_release_vars',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ExtractedVariantsPerRelease
      }
    ])
  }
  create(value?: PartialMessage<ClinvarPerGeneRecord>): ClinvarPerGeneRecord {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.perReleaseVars = []
    if (value !== undefined) reflectionMergePartial<ClinvarPerGeneRecord>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClinvarPerGeneRecord
  ): ClinvarPerGeneRecord {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* optional annonars.clinvar_data.gene_impact.GeneImpactCounts per_impact_counts */ 1:
          message.perImpactCounts = GeneImpactCounts.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.perImpactCounts
          )
          break
        case /* optional annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts per_freq_counts */ 2:
          message.perFreqCounts = GeneCoarseClinsigFrequencyCounts.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.perFreqCounts
          )
          break
        case /* repeated annonars.clinvar.per_gene.ExtractedVariantsPerRelease per_release_vars */ 3:
          message.perReleaseVars.push(
            ExtractedVariantsPerRelease.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ClinvarPerGeneRecord,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional annonars.clinvar_data.gene_impact.GeneImpactCounts per_impact_counts = 1; */
    if (message.perImpactCounts)
      GeneImpactCounts.internalBinaryWrite(
        message.perImpactCounts,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* optional annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts per_freq_counts = 2; */
    if (message.perFreqCounts)
      GeneCoarseClinsigFrequencyCounts.internalBinaryWrite(
        message.perFreqCounts,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* repeated annonars.clinvar.per_gene.ExtractedVariantsPerRelease per_release_vars = 3; */
    for (let i = 0; i < message.perReleaseVars.length; i++)
      ExtractedVariantsPerRelease.internalBinaryWrite(
        message.perReleaseVars[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.ClinvarPerGeneRecord
 */
export const ClinvarPerGeneRecord = new ClinvarPerGeneRecord$Type()

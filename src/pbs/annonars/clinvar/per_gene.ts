// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix
// @generated from protobuf file "annonars/clinvar/per_gene.proto" (package "annonars.clinvar.per_gene", syntax proto3)
// tslint:disable
//
// Detailed ClinVar per-gene information.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { Record } from './minimal'

/**
 * Counts of variants by impact.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.GeneImpactRecordCounts
 */
export interface GeneImpactRecordCounts {
  /**
   * Impact
   *
   * @generated from protobuf field: annonars.clinvar.per_gene.Impact impact = 1;
   */
  impact: Impact
  /**
   * Counts for ACMG1..5
   *
   * @generated from protobuf field: repeated uint32 counts = 2;
   */
  counts: number[]
}
/**
 * Counts per frequency and impact.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.GeneFreqRecordCounts
 */
export interface GeneFreqRecordCounts {
  /**
   * Frequency
   *
   * @generated from protobuf field: annonars.clinvar.per_gene.CoarseClinicalSignificance coarse_clinsig = 1;
   */
  coarseClinsig: CoarseClinicalSignificance
  /**
   * Counts for ACMG1..5
   *
   * @generated from protobuf field: repeated uint32 counts = 2;
   */
  counts: number[]
}
/**
 * Variants for a given genome release / assembly.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.GeneVariantsForRelease
 */
export interface GeneVariantsForRelease {
  /**
   * Genome release / assembly
   *
   * @generated from protobuf field: string genome_release = 1;
   */
  genomeRelease: string
  /**
   * Variants
   *
   * @generated from protobuf field: repeated annonars.clinvar.minimal.Record variants = 2;
   */
  variants: Record[]
}
/**
 * ClinVar detailed information per gene.
 *
 * @generated from protobuf message annonars.clinvar.per_gene.ClinvarPerGeneRecord
 */
export interface ClinvarPerGeneRecord {
  /**
   * Counts of variants per impact
   *
   * @generated from protobuf field: repeated annonars.clinvar.per_gene.GeneImpactRecordCounts per_impact_counts = 1;
   */
  perImpactCounts: GeneImpactRecordCounts[]
  /**
   * Counts of variants per impact / frequency
   *
   * @generated from protobuf field: repeated annonars.clinvar.per_gene.GeneFreqRecordCounts per_freq_counts = 2;
   */
  perFreqCounts: GeneFreqRecordCounts[]
  /**
   * Variants for the given gene.
   *
   * @generated from protobuf field: repeated annonars.clinvar.per_gene.GeneVariantsForRelease variants = 3;
   */
  variants: GeneVariantsForRelease[]
}
/**
 * Impact on gene in ClinVar.
 *
 * @generated from protobuf enum annonars.clinvar.per_gene.Impact
 */
export enum Impact {
  /**
   * unknown
   *
   * @generated from protobuf enum value: IMPACT_UNKNOWN = 0;
   */
  IMPACT_UNKNOWN = 0,
  /**
   * 3' UTR variant
   *
   * @generated from protobuf enum value: IMPACT_THREE_PRIME_UTR_VARIANT = 1;
   */
  IMPACT_THREE_PRIME_UTR_VARIANT = 1,
  /**
   * 5' UTR variant
   *
   * @generated from protobuf enum value: IMPACT_FIVE_PRIME_UTR_VARIANT = 2;
   */
  IMPACT_FIVE_PRIME_UTR_VARIANT = 2,
  /**
   * downstream gene variant
   *
   * @generated from protobuf enum value: IMPACT_DOWNSTREAM_TRANSCRIPT_VARIANT = 3;
   */
  IMPACT_DOWNSTREAM_TRANSCRIPT_VARIANT = 3,
  /**
   * frameshift variant
   *
   * @generated from protobuf enum value: IMPACT_FRAMESHIFT_VARIANT = 4;
   */
  IMPACT_FRAMESHIFT_VARIANT = 4,
  /**
   * inframe indel
   *
   * @generated from protobuf enum value: IMPACT_INFRAME_INDEL = 5;
   */
  IMPACT_INFRAME_INDEL = 5,
  /**
   * start lost
   *
   * @generated from protobuf enum value: IMPACT_START_LOST = 6;
   */
  IMPACT_START_LOST = 6,
  /**
   * intron variant
   *
   * @generated from protobuf enum value: IMPACT_INTRON_VARIANT = 7;
   */
  IMPACT_INTRON_VARIANT = 7,
  /**
   * missense variant
   *
   * @generated from protobuf enum value: IMPACT_MISSENSE_VARIANT = 8;
   */
  IMPACT_MISSENSE_VARIANT = 8,
  /**
   * non-coding transcript variant
   *
   * @generated from protobuf enum value: IMPACT_NON_CODING_TRANSCRIPT_VARIANT = 9;
   */
  IMPACT_NON_CODING_TRANSCRIPT_VARIANT = 9,
  /**
   * stop gained
   *
   * @generated from protobuf enum value: IMPACT_STOP_GAINED = 10;
   */
  IMPACT_STOP_GAINED = 10,
  /**
   * no sequence alteration
   *
   * @generated from protobuf enum value: IMPACT_NO_SEQUENCE_ALTERATION = 11;
   */
  IMPACT_NO_SEQUENCE_ALTERATION = 11,
  /**
   * splice acceptor variant
   *
   * @generated from protobuf enum value: IMPACT_SPLICE_ACCEPTOR_VARIANT = 12;
   */
  IMPACT_SPLICE_ACCEPTOR_VARIANT = 12,
  /**
   * splice donor variant
   *
   * @generated from protobuf enum value: IMPACT_SPLICE_DONOR_VARIANT = 13;
   */
  IMPACT_SPLICE_DONOR_VARIANT = 13,
  /**
   * stop lost
   *
   * @generated from protobuf enum value: IMPACT_STOP_LOST = 14;
   */
  IMPACT_STOP_LOST = 14,
  /**
   * synonymous variant
   *
   * @generated from protobuf enum value: IMPACT_SYNONYMOUS_VARIANT = 15;
   */
  IMPACT_SYNONYMOUS_VARIANT = 15,
  /**
   * upstream gene variant
   *
   * @generated from protobuf enum value: IMPACT_UPSTREAM_TRANSCRIPT_VARIANT = 16;
   */
  IMPACT_UPSTREAM_TRANSCRIPT_VARIANT = 16
}
/**
 * Coarsened clinical significance
 *
 * @generated from protobuf enum annonars.clinvar.per_gene.CoarseClinicalSignificance
 */
export enum CoarseClinicalSignificance {
  /**
   * unknown
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_UNKNOWN = 0;
   */
  COARSE_CLINICAL_SIGNIFICANCE_UNKNOWN = 0,
  /**
   * benign / likely benign
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_BENIGN = 1;
   */
  COARSE_CLINICAL_SIGNIFICANCE_BENIGN = 1,
  /**
   * uncertain signifiance
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_UNCERTAIN = 2;
   */
  COARSE_CLINICAL_SIGNIFICANCE_UNCERTAIN = 2,
  /**
   * pathogenic / likely pathogenic
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_PATHOGENIC = 3;
   */
  COARSE_CLINICAL_SIGNIFICANCE_PATHOGENIC = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GeneImpactRecordCounts$Type extends MessageType<GeneImpactRecordCounts> {
  constructor() {
    super('annonars.clinvar.per_gene.GeneImpactRecordCounts', [
      {
        no: 1,
        name: 'impact',
        kind: 'enum',
        T: () => ['annonars.clinvar.per_gene.Impact', Impact]
      },
      {
        no: 2,
        name: 'counts',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/
      }
    ])
  }
  create(value?: PartialMessage<GeneImpactRecordCounts>): GeneImpactRecordCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.impact = 0
    message.counts = []
    if (value !== undefined) reflectionMergePartial<GeneImpactRecordCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneImpactRecordCounts
  ): GeneImpactRecordCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.clinvar.per_gene.Impact impact */ 1:
          message.impact = reader.int32()
          break
        case /* repeated uint32 counts */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.counts.push(reader.uint32())
          else message.counts.push(reader.uint32())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneImpactRecordCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.clinvar.per_gene.Impact impact = 1; */
    if (message.impact !== 0) writer.tag(1, WireType.Varint).int32(message.impact)
    /* repeated uint32 counts = 2; */
    if (message.counts.length) {
      writer.tag(2, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.counts.length; i++) writer.uint32(message.counts[i])
      writer.join()
    }
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.GeneImpactRecordCounts
 */
export const GeneImpactRecordCounts = new GeneImpactRecordCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GeneFreqRecordCounts$Type extends MessageType<GeneFreqRecordCounts> {
  constructor() {
    super('annonars.clinvar.per_gene.GeneFreqRecordCounts', [
      {
        no: 1,
        name: 'coarse_clinsig',
        kind: 'enum',
        T: () => [
          'annonars.clinvar.per_gene.CoarseClinicalSignificance',
          CoarseClinicalSignificance
        ]
      },
      {
        no: 2,
        name: 'counts',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/
      }
    ])
  }
  create(value?: PartialMessage<GeneFreqRecordCounts>): GeneFreqRecordCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.coarseClinsig = 0
    message.counts = []
    if (value !== undefined) reflectionMergePartial<GeneFreqRecordCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneFreqRecordCounts
  ): GeneFreqRecordCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.clinvar.per_gene.CoarseClinicalSignificance coarse_clinsig */ 1:
          message.coarseClinsig = reader.int32()
          break
        case /* repeated uint32 counts */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.counts.push(reader.uint32())
          else message.counts.push(reader.uint32())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneFreqRecordCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.clinvar.per_gene.CoarseClinicalSignificance coarse_clinsig = 1; */
    if (message.coarseClinsig !== 0) writer.tag(1, WireType.Varint).int32(message.coarseClinsig)
    /* repeated uint32 counts = 2; */
    if (message.counts.length) {
      writer.tag(2, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.counts.length; i++) writer.uint32(message.counts[i])
      writer.join()
    }
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.GeneFreqRecordCounts
 */
export const GeneFreqRecordCounts = new GeneFreqRecordCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GeneVariantsForRelease$Type extends MessageType<GeneVariantsForRelease> {
  constructor() {
    super('annonars.clinvar.per_gene.GeneVariantsForRelease', [
      { no: 1, name: 'genome_release', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'variants', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => Record }
    ])
  }
  create(value?: PartialMessage<GeneVariantsForRelease>): GeneVariantsForRelease {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.genomeRelease = ''
    message.variants = []
    if (value !== undefined) reflectionMergePartial<GeneVariantsForRelease>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneVariantsForRelease
  ): GeneVariantsForRelease {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string genome_release */ 1:
          message.genomeRelease = reader.string()
          break
        case /* repeated annonars.clinvar.minimal.Record variants */ 2:
          message.variants.push(Record.internalBinaryRead(reader, reader.uint32(), options))
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneVariantsForRelease,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string genome_release = 1; */
    if (message.genomeRelease !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.genomeRelease)
    /* repeated annonars.clinvar.minimal.Record variants = 2; */
    for (let i = 0; i < message.variants.length; i++)
      Record.internalBinaryWrite(
        message.variants[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.GeneVariantsForRelease
 */
export const GeneVariantsForRelease = new GeneVariantsForRelease$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ClinvarPerGeneRecord$Type extends MessageType<ClinvarPerGeneRecord> {
  constructor() {
    super('annonars.clinvar.per_gene.ClinvarPerGeneRecord', [
      {
        no: 1,
        name: 'per_impact_counts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GeneImpactRecordCounts
      },
      {
        no: 2,
        name: 'per_freq_counts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GeneFreqRecordCounts
      },
      {
        no: 3,
        name: 'variants',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GeneVariantsForRelease
      }
    ])
  }
  create(value?: PartialMessage<ClinvarPerGeneRecord>): ClinvarPerGeneRecord {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.perImpactCounts = []
    message.perFreqCounts = []
    message.variants = []
    if (value !== undefined) reflectionMergePartial<ClinvarPerGeneRecord>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ClinvarPerGeneRecord
  ): ClinvarPerGeneRecord {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated annonars.clinvar.per_gene.GeneImpactRecordCounts per_impact_counts */ 1:
          message.perImpactCounts.push(
            GeneImpactRecordCounts.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        case /* repeated annonars.clinvar.per_gene.GeneFreqRecordCounts per_freq_counts */ 2:
          message.perFreqCounts.push(
            GeneFreqRecordCounts.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        case /* repeated annonars.clinvar.per_gene.GeneVariantsForRelease variants */ 3:
          message.variants.push(
            GeneVariantsForRelease.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ClinvarPerGeneRecord,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated annonars.clinvar.per_gene.GeneImpactRecordCounts per_impact_counts = 1; */
    for (let i = 0; i < message.perImpactCounts.length; i++)
      GeneImpactRecordCounts.internalBinaryWrite(
        message.perImpactCounts[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* repeated annonars.clinvar.per_gene.GeneFreqRecordCounts per_freq_counts = 2; */
    for (let i = 0; i < message.perFreqCounts.length; i++)
      GeneFreqRecordCounts.internalBinaryWrite(
        message.perFreqCounts[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* repeated annonars.clinvar.per_gene.GeneVariantsForRelease variants = 3; */
    for (let i = 0; i < message.variants.length; i++)
      GeneVariantsForRelease.internalBinaryWrite(
        message.variants[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.per_gene.ClinvarPerGeneRecord
 */
export const ClinvarPerGeneRecord = new ClinvarPerGeneRecord$Type()

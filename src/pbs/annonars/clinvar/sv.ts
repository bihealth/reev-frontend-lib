// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix
// @generated from protobuf file "annonars/clinvar/sv.proto" (package "annonars.clinvar.sv", syntax proto3)
// tslint:disable
//
// Detailed ClinVar Structural Variants.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { ReferenceAssertion } from './minimal'
import { VariantType } from './minimal'

/**
 * Record for storing minimal information on ClinVar for Mehari.
 *
 * @generated from protobuf message annonars.clinvar.sv.Record
 */
export interface Record {
  /**
   * Genome release.
   *
   * @generated from protobuf field: string release = 1;
   */
  release: string
  /**
   * Chromosome name.
   *
   * @generated from protobuf field: string chromosome = 2;
   */
  chromosome: string
  /**
   * 1-based start position.
   *
   * @generated from protobuf field: uint32 start = 3;
   */
  start: number
  /**
   * 1-based end position.
   *
   * @generated from protobuf field: uint32 stop = 4;
   */
  stop: number
  /**
   * Reference allele bases in VCF notation; optional.
   *
   * @generated from protobuf field: optional string reference = 5;
   */
  reference?: string
  /**
   * Alternative allele bases in VCF notation; optional.
   *
   * @generated from protobuf field: optional string alternative = 6;
   */
  alternative?: string
  /**
   * 1-based inner start position.
   *
   * @generated from protobuf field: optional uint32 inner_start = 7;
   */
  innerStart?: number
  /**
   * 1-based inner stop position.
   *
   * @generated from protobuf field: optional uint32 inner_stop = 8;
   */
  innerStop?: number
  /**
   * 1-based outer start position.
   *
   * @generated from protobuf field: optional uint32 outer_start = 9;
   */
  outerStart?: number
  /**
   * 1-based outer stop position.
   *
   * @generated from protobuf field: optional uint32 outer_stop = 10;
   */
  outerStop?: number
  /**
   * The variant type.
   *
   * @generated from protobuf field: annonars.clinvar.minimal.VariantType variant_type = 11;
   */
  variantType: VariantType
  /**
   * VCV accession identifier.
   *
   * @generated from protobuf field: string vcv = 12;
   */
  vcv: string
  /**
   * The reference assertions, sorted by (ClinicalSignificance, ReviewStatus).
   *
   * @generated from protobuf field: repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions = 13;
   */
  referenceAssertions: ReferenceAssertion[]
}
/**
 * Record with overlap information.
 *
 * @generated from protobuf message annonars.clinvar.sv.ResponseRecord
 */
export interface ResponseRecord {
  /**
   * The record.
   *
   * @generated from protobuf field: annonars.clinvar.sv.Record record = 1;
   */
  record?: Record
  /**
   * The reciprocal overlap with the query.
   *
   * @generated from protobuf field: double overlap = 2;
   */
  overlap: number
}
/**
 * Information regarding the pagination.
 *
 * @generated from protobuf message annonars.clinvar.sv.PageInfo
 */
export interface PageInfo {
  /**
   * The total number of records.
   *
   * @generated from protobuf field: uint32 total = 1;
   */
  total: number
  /**
   * The number of records per page.
   *
   * @generated from protobuf field: uint32 per_page = 2;
   */
  perPage: number
  /**
   * The current page number.
   *
   * @generated from protobuf field: uint32 current_page = 3;
   */
  currentPage: number
  /**
   * The total number of pages.
   *
   * @generated from protobuf field: uint32 total_pages = 4;
   */
  totalPages: number
}
/**
 * One page of results as returned by the server.
 *
 * @generated from protobuf message annonars.clinvar.sv.ResponsePage
 */
export interface ResponsePage {
  /**
   * The records in this page.
   *
   * @generated from protobuf field: repeated annonars.clinvar.sv.ResponseRecord records = 1;
   */
  records: ResponseRecord[]
  /**
   * Pagination information.
   *
   * @generated from protobuf field: annonars.clinvar.sv.PageInfo page_info = 2;
   */
  pageInfo?: PageInfo
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.clinvar.sv.Record', [
      { no: 1, name: 'release', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'chromosome', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'start', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'stop', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 5, name: 'reference', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'alternative', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: 'inner_start', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
      { no: 8, name: 'inner_stop', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
      { no: 9, name: 'outer_start', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
      { no: 10, name: 'outer_stop', kind: 'scalar', opt: true, T: 13 /*ScalarType.UINT32*/ },
      {
        no: 11,
        name: 'variant_type',
        kind: 'enum',
        T: () => ['annonars.clinvar.minimal.VariantType', VariantType]
      },
      { no: 12, name: 'vcv', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 13,
        name: 'reference_assertions',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReferenceAssertion
      }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.release = ''
    message.chromosome = ''
    message.start = 0
    message.stop = 0
    message.variantType = 0
    message.vcv = ''
    message.referenceAssertions = []
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string release */ 1:
          message.release = reader.string()
          break
        case /* string chromosome */ 2:
          message.chromosome = reader.string()
          break
        case /* uint32 start */ 3:
          message.start = reader.uint32()
          break
        case /* uint32 stop */ 4:
          message.stop = reader.uint32()
          break
        case /* optional string reference */ 5:
          message.reference = reader.string()
          break
        case /* optional string alternative */ 6:
          message.alternative = reader.string()
          break
        case /* optional uint32 inner_start */ 7:
          message.innerStart = reader.uint32()
          break
        case /* optional uint32 inner_stop */ 8:
          message.innerStop = reader.uint32()
          break
        case /* optional uint32 outer_start */ 9:
          message.outerStart = reader.uint32()
          break
        case /* optional uint32 outer_stop */ 10:
          message.outerStop = reader.uint32()
          break
        case /* annonars.clinvar.minimal.VariantType variant_type */ 11:
          message.variantType = reader.int32()
          break
        case /* string vcv */ 12:
          message.vcv = reader.string()
          break
        case /* repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions */ 13:
          message.referenceAssertions.push(
            ReferenceAssertion.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string release = 1; */
    if (message.release !== '') writer.tag(1, WireType.LengthDelimited).string(message.release)
    /* string chromosome = 2; */
    if (message.chromosome !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.chromosome)
    /* uint32 start = 3; */
    if (message.start !== 0) writer.tag(3, WireType.Varint).uint32(message.start)
    /* uint32 stop = 4; */
    if (message.stop !== 0) writer.tag(4, WireType.Varint).uint32(message.stop)
    /* optional string reference = 5; */
    if (message.reference !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.reference)
    /* optional string alternative = 6; */
    if (message.alternative !== undefined)
      writer.tag(6, WireType.LengthDelimited).string(message.alternative)
    /* optional uint32 inner_start = 7; */
    if (message.innerStart !== undefined) writer.tag(7, WireType.Varint).uint32(message.innerStart)
    /* optional uint32 inner_stop = 8; */
    if (message.innerStop !== undefined) writer.tag(8, WireType.Varint).uint32(message.innerStop)
    /* optional uint32 outer_start = 9; */
    if (message.outerStart !== undefined) writer.tag(9, WireType.Varint).uint32(message.outerStart)
    /* optional uint32 outer_stop = 10; */
    if (message.outerStop !== undefined) writer.tag(10, WireType.Varint).uint32(message.outerStop)
    /* annonars.clinvar.minimal.VariantType variant_type = 11; */
    if (message.variantType !== 0) writer.tag(11, WireType.Varint).int32(message.variantType)
    /* string vcv = 12; */
    if (message.vcv !== '') writer.tag(12, WireType.LengthDelimited).string(message.vcv)
    /* repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions = 13; */
    for (let i = 0; i < message.referenceAssertions.length; i++)
      ReferenceAssertion.internalBinaryWrite(
        message.referenceAssertions[i],
        writer.tag(13, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.sv.Record
 */
export const Record = new Record$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ResponseRecord$Type extends MessageType<ResponseRecord> {
  constructor() {
    super('annonars.clinvar.sv.ResponseRecord', [
      { no: 1, name: 'record', kind: 'message', T: () => Record },
      { no: 2, name: 'overlap', kind: 'scalar', T: 1 /*ScalarType.DOUBLE*/ }
    ])
  }
  create(value?: PartialMessage<ResponseRecord>): ResponseRecord {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.overlap = 0
    if (value !== undefined) reflectionMergePartial<ResponseRecord>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ResponseRecord
  ): ResponseRecord {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.clinvar.sv.Record record */ 1:
          message.record = Record.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.record
          )
          break
        case /* double overlap */ 2:
          message.overlap = reader.double()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ResponseRecord,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.clinvar.sv.Record record = 1; */
    if (message.record)
      Record.internalBinaryWrite(
        message.record,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* double overlap = 2; */
    if (message.overlap !== 0) writer.tag(2, WireType.Bit64).double(message.overlap)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.sv.ResponseRecord
 */
export const ResponseRecord = new ResponseRecord$Type()
// @generated message type with reflection information, may provide speed optimized methods
class PageInfo$Type extends MessageType<PageInfo> {
  constructor() {
    super('annonars.clinvar.sv.PageInfo', [
      { no: 1, name: 'total', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: 'per_page', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'current_page', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'total_pages', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ }
    ])
  }
  create(value?: PartialMessage<PageInfo>): PageInfo {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.total = 0
    message.perPage = 0
    message.currentPage = 0
    message.totalPages = 0
    if (value !== undefined) reflectionMergePartial<PageInfo>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PageInfo
  ): PageInfo {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* uint32 total */ 1:
          message.total = reader.uint32()
          break
        case /* uint32 per_page */ 2:
          message.perPage = reader.uint32()
          break
        case /* uint32 current_page */ 3:
          message.currentPage = reader.uint32()
          break
        case /* uint32 total_pages */ 4:
          message.totalPages = reader.uint32()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: PageInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 total = 1; */
    if (message.total !== 0) writer.tag(1, WireType.Varint).uint32(message.total)
    /* uint32 per_page = 2; */
    if (message.perPage !== 0) writer.tag(2, WireType.Varint).uint32(message.perPage)
    /* uint32 current_page = 3; */
    if (message.currentPage !== 0) writer.tag(3, WireType.Varint).uint32(message.currentPage)
    /* uint32 total_pages = 4; */
    if (message.totalPages !== 0) writer.tag(4, WireType.Varint).uint32(message.totalPages)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.sv.PageInfo
 */
export const PageInfo = new PageInfo$Type()
// @generated message type with reflection information, may provide speed optimized methods
class ResponsePage$Type extends MessageType<ResponsePage> {
  constructor() {
    super('annonars.clinvar.sv.ResponsePage', [
      {
        no: 1,
        name: 'records',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ResponseRecord
      },
      { no: 2, name: 'page_info', kind: 'message', T: () => PageInfo }
    ])
  }
  create(value?: PartialMessage<ResponsePage>): ResponsePage {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.records = []
    if (value !== undefined) reflectionMergePartial<ResponsePage>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ResponsePage
  ): ResponsePage {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated annonars.clinvar.sv.ResponseRecord records */ 1:
          message.records.push(ResponseRecord.internalBinaryRead(reader, reader.uint32(), options))
          break
        case /* annonars.clinvar.sv.PageInfo page_info */ 2:
          message.pageInfo = PageInfo.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.pageInfo
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ResponsePage,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated annonars.clinvar.sv.ResponseRecord records = 1; */
    for (let i = 0; i < message.records.length; i++)
      ResponseRecord.internalBinaryWrite(
        message.records[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* annonars.clinvar.sv.PageInfo page_info = 2; */
    if (message.pageInfo)
      PageInfo.internalBinaryWrite(
        message.pageInfo,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.sv.ResponsePage
 */
export const ResponsePage = new ResponsePage$Type()

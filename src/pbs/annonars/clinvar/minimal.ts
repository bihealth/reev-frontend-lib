// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/clinvar/minimal.proto" (package "annonars.clinvar.minimal", syntax proto3)
// tslint:disable
//
// Minimal ClinVar variant information for use in Mehari.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { ExtractedVcvRecord } from '../clinvar_data/extracted_vars'

/**
 * Record with overlap information.
 *
 * @generated from protobuf message annonars.clinvar.minimal.ExtractedVcvRecordList
 */
export interface ExtractedVcvRecordList {
  /**
   * The list of VCV records that may share a global variant.
   *
   * @generated from protobuf field: repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord records = 1;
   */
  records: ExtractedVcvRecord[]
}
// @generated message type with reflection information, may provide speed optimized methods
class ExtractedVcvRecordList$Type extends MessageType<ExtractedVcvRecordList> {
  constructor() {
    super('annonars.clinvar.minimal.ExtractedVcvRecordList', [
      {
        no: 1,
        name: 'records',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ExtractedVcvRecord
      }
    ])
  }
  create(value?: PartialMessage<ExtractedVcvRecordList>): ExtractedVcvRecordList {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.records = []
    if (value !== undefined) reflectionMergePartial<ExtractedVcvRecordList>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ExtractedVcvRecordList
  ): ExtractedVcvRecordList {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord records */ 1:
          message.records.push(
            ExtractedVcvRecord.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ExtractedVcvRecordList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated annonars.clinvar_data.extracted_vars.ExtractedVcvRecord records = 1; */
    for (let i = 0; i < message.records.length; i++)
      ExtractedVcvRecord.internalBinaryWrite(
        message.records[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.minimal.ExtractedVcvRecordList
 */
export const ExtractedVcvRecordList = new ExtractedVcvRecordList$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix
// @generated from protobuf file "annonars/clinvar/minimal.proto" (package "annonars.clinvar.minimal", syntax proto3)
// tslint:disable
//
// Minimal ClinVar variant information for use in Mehari.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Record for storing information about a reference clinvar assertion.
 *
 * @generated from protobuf message annonars.clinvar.minimal.ReferenceAssertion
 */
export interface ReferenceAssertion {
  /**
   * RCV accession identifier.
   *
   * @generated from protobuf field: string rcv = 1;
   */
  rcv: string
  /**
   * Title of the reference assertion, includes phenotype / disease.
   *
   * @generated from protobuf field: string title = 2;
   */
  title: string
  /**
   * Clinical significance for variant.
   *
   * @generated from protobuf field: annonars.clinvar.minimal.ClinicalSignificance clinical_significance = 3;
   */
  clinicalSignificance: ClinicalSignificance
  /**
   * Review status.
   *
   * @generated from protobuf field: annonars.clinvar.minimal.ReviewStatus review_status = 4;
   */
  reviewStatus: ReviewStatus
}
/**
 * Record for storing minimal information on ClinVar for Mehari.
 *
 * @generated from protobuf message annonars.clinvar.minimal.Record
 */
export interface Record {
  /**
   * Genome release.
   *
   * @generated from protobuf field: string release = 1;
   */
  release: string
  /**
   * Chromosome name.
   *
   * @generated from protobuf field: string chromosome = 2;
   */
  chromosome: string
  /**
   * 1-based start position.
   *
   * @generated from protobuf field: uint32 start = 3;
   */
  start: number
  /**
   * 1-based end position.
   *
   * @generated from protobuf field: uint32 stop = 4;
   */
  stop: number
  /**
   * Reference allele bases in VCF notation.
   *
   * @generated from protobuf field: string reference = 5;
   */
  reference: string
  /**
   * Alternative allele bases in VCF notation.
   *
   * @generated from protobuf field: string alternative = 6;
   */
  alternative: string
  /**
   * VCV accession identifier.
   *
   * @generated from protobuf field: string vcv = 7;
   */
  vcv: string
  /**
   * The reference assertions, sorted by (ClinicalSignificance, ReviewStatus).
   *
   * @generated from protobuf field: repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions = 8;
   */
  referenceAssertions: ReferenceAssertion[]
}
/**
 * Enumeration for variant type.
 *
 * @generated from protobuf enum annonars.clinvar.minimal.VariantType
 */
export enum VariantType {
  /**
   * unknown
   *
   * @generated from protobuf enum value: VARIANT_TYPE_UNKNOWN = 0;
   */
  VARIANT_TYPE_UNKNOWN = 0,
  /**
   * deletion
   *
   * @generated from protobuf enum value: VARIANT_TYPE_DELETION = 1;
   */
  VARIANT_TYPE_DELETION = 1,
  /**
   * duplication
   *
   * @generated from protobuf enum value: VARIANT_TYPE_DUPLICATION = 2;
   */
  VARIANT_TYPE_DUPLICATION = 2,
  /**
   * indel
   *
   * @generated from protobuf enum value: VARIANT_TYPE_INDEL = 3;
   */
  VARIANT_TYPE_INDEL = 3,
  /**
   * insertion
   *
   * @generated from protobuf enum value: VARIANT_TYPE_INSERTION = 4;
   */
  VARIANT_TYPE_INSERTION = 4,
  /**
   * inversion
   *
   * @generated from protobuf enum value: VARIANT_TYPE_INVERSION = 5;
   */
  VARIANT_TYPE_INVERSION = 5,
  /**
   * single nucleotide variant
   *
   * @generated from protobuf enum value: VARIANT_TYPE_SNV = 6;
   */
  VARIANT_TYPE_SNV = 6
}
/**
 * Enumeration for ClinVar pathogenicity.
 *
 * @generated from protobuf enum annonars.clinvar.minimal.ClinicalSignificance
 */
export enum ClinicalSignificance {
  /**
   * unknown
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_UNKNOWN = 0;
   */
  CLINICAL_SIGNIFICANCE_UNKNOWN = 0,
  /**
   * Pathogenic.
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_PATHOGENIC = 1;
   */
  CLINICAL_SIGNIFICANCE_PATHOGENIC = 1,
  /**
   * Likely pathogenic.
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_LIKELY_PATHOGENIC = 2;
   */
  CLINICAL_SIGNIFICANCE_LIKELY_PATHOGENIC = 2,
  /**
   * Uncertain significance.
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_UNCERTAIN_SIGNIFICANCE = 3;
   */
  CLINICAL_SIGNIFICANCE_UNCERTAIN_SIGNIFICANCE = 3,
  /**
   * Likely benign.
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_LIKELY_BENIGN = 4;
   */
  CLINICAL_SIGNIFICANCE_LIKELY_BENIGN = 4,
  /**
   * Benign.
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_BENIGN = 5;
   */
  CLINICAL_SIGNIFICANCE_BENIGN = 5
}
/**
 * / Enumeration for ClinVar review status.
 *
 * @generated from protobuf enum annonars.clinvar.minimal.ReviewStatus
 */
export enum ReviewStatus {
  /**
   * unknown
   *
   * @generated from protobuf enum value: REVIEW_STATUS_PRACTICE_UNKNOWN = 0;
   */
  REVIEW_STATUS_PRACTICE_UNKNOWN = 0,
  /**
   * "practice guideline"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_PRACTICE_GUIDELINE = 1;
   */
  REVIEW_STATUS_PRACTICE_GUIDELINE = 1,
  /**
   * "reviewed by expert panel"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_REVIEWED_BY_EXPERT_PANEL = 2;
   */
  REVIEW_STATUS_REVIEWED_BY_EXPERT_PANEL = 2,
  /**
   * "criteria provided, multiple submitters, no conflicts"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_CRITERIA_PROVIDED_MULTIPLE_SUBMITTERS_NO_CONFLICTS = 3;
   */
  REVIEW_STATUS_CRITERIA_PROVIDED_MULTIPLE_SUBMITTERS_NO_CONFLICTS = 3,
  /**
   * "criteria provided, single submitter"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_CRITERIA_PROVIDED_SINGLE_SUBMITTER = 4;
   */
  REVIEW_STATUS_CRITERIA_PROVIDED_SINGLE_SUBMITTER = 4,
  /**
   * "criteria provided, conflicting interpretations"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_CRITERIA_PROVIDED_CONFLICTING_INTERPRETATIONS = 5;
   */
  REVIEW_STATUS_CRITERIA_PROVIDED_CONFLICTING_INTERPRETATIONS = 5,
  /**
   * "no assertion criteria provided"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_NO_ASSERTION_CRITERIA_PROVIDED = 6;
   */
  REVIEW_STATUS_NO_ASSERTION_CRITERIA_PROVIDED = 6,
  /**
   * "no assertion provided"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_NO_ASSERTION_PROVIDED = 7;
   */
  REVIEW_STATUS_NO_ASSERTION_PROVIDED = 7,
  /**
   * "flagged submission"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_FLAGGED_SUBMISSION = 8;
   */
  REVIEW_STATUS_FLAGGED_SUBMISSION = 8,
  /**
   * "no classifications from unflagged records"
   *
   * @generated from protobuf enum value: REVIEW_STATUS_NO_CLASSIFICATIONS_FROM_UNFLAGGED_RECORDS = 9;
   */
  REVIEW_STATUS_NO_CLASSIFICATIONS_FROM_UNFLAGGED_RECORDS = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class ReferenceAssertion$Type extends MessageType<ReferenceAssertion> {
  constructor() {
    super('annonars.clinvar.minimal.ReferenceAssertion', [
      { no: 1, name: 'rcv', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'title', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: 'clinical_significance',
        kind: 'enum',
        T: () => ['annonars.clinvar.minimal.ClinicalSignificance', ClinicalSignificance]
      },
      {
        no: 4,
        name: 'review_status',
        kind: 'enum',
        T: () => ['annonars.clinvar.minimal.ReviewStatus', ReviewStatus]
      }
    ])
  }
  create(value?: PartialMessage<ReferenceAssertion>): ReferenceAssertion {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.rcv = ''
    message.title = ''
    message.clinicalSignificance = 0
    message.reviewStatus = 0
    if (value !== undefined) reflectionMergePartial<ReferenceAssertion>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReferenceAssertion
  ): ReferenceAssertion {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string rcv */ 1:
          message.rcv = reader.string()
          break
        case /* string title */ 2:
          message.title = reader.string()
          break
        case /* annonars.clinvar.minimal.ClinicalSignificance clinical_significance */ 3:
          message.clinicalSignificance = reader.int32()
          break
        case /* annonars.clinvar.minimal.ReviewStatus review_status */ 4:
          message.reviewStatus = reader.int32()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: ReferenceAssertion,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string rcv = 1; */
    if (message.rcv !== '') writer.tag(1, WireType.LengthDelimited).string(message.rcv)
    /* string title = 2; */
    if (message.title !== '') writer.tag(2, WireType.LengthDelimited).string(message.title)
    /* annonars.clinvar.minimal.ClinicalSignificance clinical_significance = 3; */
    if (message.clinicalSignificance !== 0)
      writer.tag(3, WireType.Varint).int32(message.clinicalSignificance)
    /* annonars.clinvar.minimal.ReviewStatus review_status = 4; */
    if (message.reviewStatus !== 0) writer.tag(4, WireType.Varint).int32(message.reviewStatus)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.minimal.ReferenceAssertion
 */
export const ReferenceAssertion = new ReferenceAssertion$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.clinvar.minimal.Record', [
      { no: 1, name: 'release', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'chromosome', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'start', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'stop', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 5, name: 'reference', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'alternative', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: 'vcv', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 8,
        name: 'reference_assertions',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ReferenceAssertion
      }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.release = ''
    message.chromosome = ''
    message.start = 0
    message.stop = 0
    message.reference = ''
    message.alternative = ''
    message.vcv = ''
    message.referenceAssertions = []
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string release */ 1:
          message.release = reader.string()
          break
        case /* string chromosome */ 2:
          message.chromosome = reader.string()
          break
        case /* uint32 start */ 3:
          message.start = reader.uint32()
          break
        case /* uint32 stop */ 4:
          message.stop = reader.uint32()
          break
        case /* string reference */ 5:
          message.reference = reader.string()
          break
        case /* string alternative */ 6:
          message.alternative = reader.string()
          break
        case /* string vcv */ 7:
          message.vcv = reader.string()
          break
        case /* repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions */ 8:
          message.referenceAssertions.push(
            ReferenceAssertion.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string release = 1; */
    if (message.release !== '') writer.tag(1, WireType.LengthDelimited).string(message.release)
    /* string chromosome = 2; */
    if (message.chromosome !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.chromosome)
    /* uint32 start = 3; */
    if (message.start !== 0) writer.tag(3, WireType.Varint).uint32(message.start)
    /* uint32 stop = 4; */
    if (message.stop !== 0) writer.tag(4, WireType.Varint).uint32(message.stop)
    /* string reference = 5; */
    if (message.reference !== '') writer.tag(5, WireType.LengthDelimited).string(message.reference)
    /* string alternative = 6; */
    if (message.alternative !== '')
      writer.tag(6, WireType.LengthDelimited).string(message.alternative)
    /* string vcv = 7; */
    if (message.vcv !== '') writer.tag(7, WireType.LengthDelimited).string(message.vcv)
    /* repeated annonars.clinvar.minimal.ReferenceAssertion reference_assertions = 8; */
    for (let i = 0; i < message.referenceAssertions.length; i++)
      ReferenceAssertion.internalBinaryWrite(
        message.referenceAssertions[i],
        writer.tag(8, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar.minimal.Record
 */
export const Record = new Record$Type()

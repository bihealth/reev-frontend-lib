// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix
// @generated from protobuf file "annonars/functional/refseq.proto" (package "annonars.functional.refseq", syntax proto3)
// tslint:disable
//
// Protocolbuffers definition for RefSeq functional elements.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Message for storing a RefSeq regulatory element.
 *
 * @generated from protobuf message annonars.functional.refseq.Record
 */
export interface Record {
  /**
   * Chromosome
   *
   * @generated from protobuf field: string chromosome = 1;
   */
  chromosome: string
  /**
   * Start position (1-based)
   *
   * @generated from protobuf field: int32 start = 2;
   */
  start: number
  /**
   * Stop position (1-based)
   *
   * @generated from protobuf field: int32 stop = 3;
   */
  stop: number
  /**
   * ID
   *
   * @generated from protobuf field: string id = 4;
   */
  id: string
  /**
   * Dbxref
   *
   * @generated from protobuf field: string dbxref = 5;
   */
  dbxref: string
  /**
   * Category of record.
   *
   * @generated from protobuf field: annonars.functional.refseq.Category category = 6;
   */
  category: Category
  /**
   * Regulatory class of record.
   *
   * @generated from protobuf field: optional annonars.functional.refseq.RegulatoryClass regulatory_class = 7;
   */
  regulatoryClass?: RegulatoryClass
  /**
   * note
   *
   * @generated from protobuf field: optional string note = 8;
   */
  note?: string
  /**
   * experiment
   *
   * @generated from protobuf field: optional string experiment = 9;
   */
  experiment?: string
  /**
   * function
   *
   * @generated from protobuf field: optional string function = 10;
   */
  function?: string
}
/**
 * Message for storing multiple Gbxref IDs.
 *
 * @generated from protobuf message annonars.functional.refseq.DbxrefList
 */
export interface DbxrefList {
  /**
   * Dbxref IDs.
   *
   * @generated from protobuf field: repeated string dbxref = 1;
   */
  dbxref: string[]
}
/**
 * Enumeration for `gbkey` field.
 *
 * @generated from protobuf enum annonars.functional.refseq.Category
 */
export enum Category {
  /**
   * unknown
   *
   * @generated from protobuf enum value: CATEGORY_UNKNOWN = 0;
   */
  CATEGORY_UNKNOWN = 0,
  /**
   * Miscaellaneous feature.
   *
   * @generated from protobuf enum value: CATEGORY_MISC_FEATURE = 1;
   */
  CATEGORY_MISC_FEATURE = 1,
  /**
   * Miscaellaneous recombination feature.
   *
   * @generated from protobuf enum value: CATEGORY_MISC_RECOMB = 2;
   */
  CATEGORY_MISC_RECOMB = 2,
  /**
   * Miscaellaneous structure.
   *
   * @generated from protobuf enum value: CATEGORY_MISC_STRUCTURE = 3;
   */
  CATEGORY_MISC_STRUCTURE = 3,
  /**
   * Mobile element.
   *
   * @generated from protobuf enum value: CATEGORY_MOBILE_ELEMENT = 4;
   */
  CATEGORY_MOBILE_ELEMENT = 4,
  /**
   * Protein binding annotation.
   *
   * @generated from protobuf enum value: CATEGORY_PROTEIN_BIND = 5;
   */
  CATEGORY_PROTEIN_BIND = 5,
  /**
   * Region.
   *
   * @generated from protobuf enum value: CATEGORY_REGION = 6;
   */
  CATEGORY_REGION = 6,
  /**
   * Regulatory element.
   *
   * @generated from protobuf enum value: CATEGORY_REGULATORY = 7;
   */
  CATEGORY_REGULATORY = 7,
  /**
   * Repeat region
   *
   * @generated from protobuf enum value: CATEGORY_REPEAT_REGION = 8;
   */
  CATEGORY_REPEAT_REGION = 8,
  /**
   * Replication origin.
   *
   * @generated from protobuf enum value: CATEGORY_REP_ORIGIN = 9;
   */
  CATEGORY_REP_ORIGIN = 9
}
/**
 * Enumeration for `regulatory_class` field.
 *
 * @generated from protobuf enum annonars.functional.refseq.RegulatoryClass
 */
export enum RegulatoryClass {
  /**
   * unknown
   *
   * @generated from protobuf enum value: REGULATORY_UNKNOWN = 0;
   */
  REGULATORY_UNKNOWN = 0,
  /**
   * CCAAT signal.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_CAAT_SIGNAL = 1;
   */
  REGULATORY_CLASS_CAAT_SIGNAL = 1,
  /**
   * DNase I hypersensitive site.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_DNASE_I_HYPERSENSITIVE_SITE = 2;
   */
  REGULATORY_CLASS_DNASE_I_HYPERSENSITIVE_SITE = 2,
  /**
   * Enhancer.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_ENHANCER = 3;
   */
  REGULATORY_CLASS_ENHANCER = 3,
  /**
   * Enhancer blocking element.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_ENHANCER_BLOCKING_ELEMENT = 4;
   */
  REGULATORY_CLASS_ENHANCER_BLOCKING_ELEMENT = 4,
  /**
   * Epigenetically modified region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_EPIGENETICALLY_MODIFIED_REGION = 5;
   */
  REGULATORY_CLASS_EPIGENETICALLY_MODIFIED_REGION = 5,
  /**
   * GC signal.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_GC_SIGNAL = 6;
   */
  REGULATORY_CLASS_GC_SIGNAL = 6,
  /**
   * Imprinting control region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_IMPRINTING_CONTROL_REGION = 7;
   */
  REGULATORY_CLASS_IMPRINTING_CONTROL_REGION = 7,
  /**
   * Insulator.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_INSULATOR = 8;
   */
  REGULATORY_CLASS_INSULATOR = 8,
  /**
   * Locus control region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_LOCUS_CONTROL_REGION = 9;
   */
  REGULATORY_CLASS_LOCUS_CONTROL_REGION = 9,
  /**
   * Matrix attachment region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_MATRIX_ATTACHMENT_REGION = 10;
   */
  REGULATORY_CLASS_MATRIX_ATTACHMENT_REGION = 10,
  /**
   * Micrococcal nuclease hypersensitive site.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_MICROCOCCAL_NUCLEASE_HYPERSENSITIVE_SITE = 11;
   */
  REGULATORY_CLASS_MICROCOCCAL_NUCLEASE_HYPERSENSITIVE_SITE = 11,
  /**
   * Promoter.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_PROMOTER = 12;
   */
  REGULATORY_CLASS_PROMOTER = 12,
  /**
   * Replication regulatory region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_REPLICATION_REGULATORY_REGION = 13;
   */
  REGULATORY_CLASS_REPLICATION_REGULATORY_REGION = 13,
  /**
   * Response element.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_RESPONSE_ELEMENT = 14;
   */
  REGULATORY_CLASS_RESPONSE_ELEMENT = 14,
  /**
   * Silencer.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_SILENCER = 15;
   */
  REGULATORY_CLASS_SILENCER = 15,
  /**
   * TATA box.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_TATA_BOX = 16;
   */
  REGULATORY_CLASS_TATA_BOX = 16,
  /**
   * Transcriptional cis regulatory region.
   *
   * @generated from protobuf enum value: REGULATORY_CLASS_TRANSCRIPTIONAL_CIS_REGULATORY_REGION = 17;
   */
  REGULATORY_CLASS_TRANSCRIPTIONAL_CIS_REGULATORY_REGION = 17
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.functional.refseq.Record', [
      { no: 1, name: 'chromosome', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 4, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'dbxref', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 6,
        name: 'category',
        kind: 'enum',
        T: () => ['annonars.functional.refseq.Category', Category]
      },
      {
        no: 7,
        name: 'regulatory_class',
        kind: 'enum',
        opt: true,
        T: () => ['annonars.functional.refseq.RegulatoryClass', RegulatoryClass]
      },
      { no: 8, name: 'note', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 9, name: 'experiment', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 10, name: 'function', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.chromosome = ''
    message.start = 0
    message.stop = 0
    message.id = ''
    message.dbxref = ''
    message.category = 0
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string chromosome */ 1:
          message.chromosome = reader.string()
          break
        case /* int32 start */ 2:
          message.start = reader.int32()
          break
        case /* int32 stop */ 3:
          message.stop = reader.int32()
          break
        case /* string id */ 4:
          message.id = reader.string()
          break
        case /* string dbxref */ 5:
          message.dbxref = reader.string()
          break
        case /* annonars.functional.refseq.Category category */ 6:
          message.category = reader.int32()
          break
        case /* optional annonars.functional.refseq.RegulatoryClass regulatory_class */ 7:
          message.regulatoryClass = reader.int32()
          break
        case /* optional string note */ 8:
          message.note = reader.string()
          break
        case /* optional string experiment */ 9:
          message.experiment = reader.string()
          break
        case /* optional string function */ 10:
          message.function = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string chromosome = 1; */
    if (message.chromosome !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.chromosome)
    /* int32 start = 2; */
    if (message.start !== 0) writer.tag(2, WireType.Varint).int32(message.start)
    /* int32 stop = 3; */
    if (message.stop !== 0) writer.tag(3, WireType.Varint).int32(message.stop)
    /* string id = 4; */
    if (message.id !== '') writer.tag(4, WireType.LengthDelimited).string(message.id)
    /* string dbxref = 5; */
    if (message.dbxref !== '') writer.tag(5, WireType.LengthDelimited).string(message.dbxref)
    /* annonars.functional.refseq.Category category = 6; */
    if (message.category !== 0) writer.tag(6, WireType.Varint).int32(message.category)
    /* optional annonars.functional.refseq.RegulatoryClass regulatory_class = 7; */
    if (message.regulatoryClass !== undefined)
      writer.tag(7, WireType.Varint).int32(message.regulatoryClass)
    /* optional string note = 8; */
    if (message.note !== undefined) writer.tag(8, WireType.LengthDelimited).string(message.note)
    /* optional string experiment = 9; */
    if (message.experiment !== undefined)
      writer.tag(9, WireType.LengthDelimited).string(message.experiment)
    /* optional string function = 10; */
    if (message.function !== undefined)
      writer.tag(10, WireType.LengthDelimited).string(message.function)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.functional.refseq.Record
 */
export const Record = new Record$Type()
// @generated message type with reflection information, may provide speed optimized methods
class DbxrefList$Type extends MessageType<DbxrefList> {
  constructor() {
    super('annonars.functional.refseq.DbxrefList', [
      {
        no: 1,
        name: 'dbxref',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      }
    ])
  }
  create(value?: PartialMessage<DbxrefList>): DbxrefList {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.dbxref = []
    if (value !== undefined) reflectionMergePartial<DbxrefList>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DbxrefList
  ): DbxrefList {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated string dbxref */ 1:
          message.dbxref.push(reader.string())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: DbxrefList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated string dbxref = 1; */
    for (let i = 0; i < message.dbxref.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.dbxref[i])
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.functional.refseq.DbxrefList
 */
export const DbxrefList = new DbxrefList$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/gnomad/vep_common.proto" (package "annonars.gnomad.vep_common", syntax proto3)
// tslint:disable
//
// Common protocol buffer definitions for VEP records.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Protocol buffer for `Vep.domains`
 *
 * @generated from protobuf message annonars.gnomad.vep_common.Domain
 */
export interface Domain {
  /**
   * Domain ID.
   *
   * @generated from protobuf field: string id = 1;
   */
  id: string
  /**
   * Domain source.
   *
   * @generated from protobuf field: string source = 2;
   */
  source: string
}
/**
 * Protocol buffer for `Vep.sift` and `Vep.polyphen`.
 *
 * @generated from protobuf message annonars.gnomad.vep_common.Prediction
 */
export interface Prediction {
  /**
   * Prediction.
   *
   * @generated from protobuf field: string prediction = 1;
   */
  prediction: string
  /**
   * Score.
   *
   * @generated from protobuf field: float score = 2;
   */
  score: number
}
// @generated message type with reflection information, may provide speed optimized methods
class Domain$Type extends MessageType<Domain> {
  constructor() {
    super('annonars.gnomad.vep_common.Domain', [
      { no: 1, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'source', kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
    ])
  }
  create(value?: PartialMessage<Domain>): Domain {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.id = ''
    message.source = ''
    if (value !== undefined) reflectionMergePartial<Domain>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Domain
  ): Domain {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string()
          break
        case /* string source */ 2:
          message.source = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Domain,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== '') writer.tag(1, WireType.LengthDelimited).string(message.id)
    /* string source = 2; */
    if (message.source !== '') writer.tag(2, WireType.LengthDelimited).string(message.source)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.vep_common.Domain
 */
export const Domain = new Domain$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Prediction$Type extends MessageType<Prediction> {
  constructor() {
    super('annonars.gnomad.vep_common.Prediction', [
      { no: 1, name: 'prediction', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'score', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ }
    ])
  }
  create(value?: PartialMessage<Prediction>): Prediction {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.prediction = ''
    message.score = 0
    if (value !== undefined) reflectionMergePartial<Prediction>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Prediction
  ): Prediction {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string prediction */ 1:
          message.prediction = reader.string()
          break
        case /* float score */ 2:
          message.score = reader.float()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Prediction,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string prediction = 1; */
    if (message.prediction !== '')
      writer.tag(1, WireType.LengthDelimited).string(message.prediction)
    /* float score = 2; */
    if (message.score !== 0) writer.tag(2, WireType.Bit32).float(message.score)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.vep_common.Prediction
 */
export const Prediction = new Prediction$Type()

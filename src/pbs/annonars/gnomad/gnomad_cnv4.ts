// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/gnomad/gnomad_cnv4.proto" (package "annonars.gnomad.gnomad_cnv4", syntax proto3)
// tslint:disable
//
// Protocol buffers for representing gnomAD-CNV v4 data.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { CnvType } from './exac_cnv'

/**
 * Carrier counts
 *
 * @generated from protobuf message annonars.gnomad.gnomad_cnv4.CarrierCounts
 */
export interface CarrierCounts {
  /**
   * Number of releaseable samples with a variant at this site.
   *
   * @generated from protobuf field: int32 sc = 1;
   */
  sc: number
  /**
   * Proportion of releaseable samples (site frequency) with a variant at
   * this site.
   *
   * @generated from protobuf field: float sf = 2;
   */
  sf: number
  /**
   * Total number of releaseable samples considered at this site.
   *
   * @generated from protobuf field: int32 sn = 3;
   */
  sn: number
}
/**
 * Store the carrier counts for the given sub cohort and sub cohort factored by sex.
 *
 * @generated from protobuf message annonars.gnomad.gnomad_cnv4.CarrierCountsBySex
 */
export interface CarrierCountsBySex {
  /**
   * Overall carrier counts in the sub cohort.
   *
   * @generated from protobuf field: annonars.gnomad.gnomad_cnv4.CarrierCounts overall = 1;
   */
  overall?: CarrierCounts
  /**
   * Carrier counts in female/XX karyotype individuals of sub cohort.
   *
   * @generated from protobuf field: optional annonars.gnomad.gnomad_cnv4.CarrierCounts xx = 2;
   */
  xx?: CarrierCounts
  /**
   * Carrier counts in male/XY karyotype individuals of sub cohort.
   *
   * @generated from protobuf field: optional annonars.gnomad.gnomad_cnv4.CarrierCounts xy = 3;
   */
  xy?: CarrierCounts
}
/**
 * Store the carrier counts for a population.
 *
 * @generated from protobuf message annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts
 */
export interface PopulationCarrierCounts {
  /**
   * The population.
   *
   * @generated from protobuf field: annonars.gnomad.gnomad_cnv4.Population population = 1;
   */
  population: Population
  /**
   * The overall allele counts and the one by sex.
   *
   * @generated from protobuf field: annonars.gnomad.gnomad_cnv4.CarrierCountsBySex counts = 2;
   */
  counts?: CarrierCountsBySex
}
/**
 * Store the allele counts for the given cohort.
 *
 * @generated from protobuf message annonars.gnomad.gnomad_cnv4.CohortCarrierCounts
 */
export interface CohortCarrierCounts {
  /**
   * Name of the cohort, empty for global.
   *
   * @generated from protobuf field: optional string cohort = 1;
   */
  cohort?: string
  /**
   * The overall carrier counts and the one by sex.
   *
   * @generated from protobuf field: annonars.gnomad.gnomad_cnv4.CarrierCountsBySex by_sex = 2;
   */
  bySex?: CarrierCountsBySex
  /**
   * Carrier counts for each population.
   *
   * @generated from protobuf field: repeated annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts by_population = 3;
   */
  byPopulation: PopulationCarrierCounts[]
}
/**
 * One record in the gnomAD-CNV v4 dataset.
 *
 * @generated from protobuf message annonars.gnomad.gnomad_cnv4.Record
 */
export interface Record {
  /**
   * Chromosome name.
   *
   * @generated from protobuf field: string chrom = 1;
   */
  chrom: string
  /**
   * 1-based start position.
   *
   * @generated from protobuf field: int32 start = 2;
   */
  start: number
  /**
   * 1-based stop position.
   *
   * @generated from protobuf field: int32 stop = 3;
   */
  stop: number
  /**
   * 1-based inner start position.
   *
   * @generated from protobuf field: int32 inner_start = 4;
   */
  innerStart: number
  /**
   * 1-based inner stop position.
   *
   * @generated from protobuf field: int32 inner_stop = 5;
   */
  innerStop: number
  /**
   * 1-based outer start position.
   *
   * @generated from protobuf field: int32 outer_start = 6;
   */
  outerStart: number
  /**
   * 1-based inner stop position.
   *
   * @generated from protobuf field: int32 outer_stop = 7;
   */
  outerStop: number
  /**
   * Unique identifier for the variant.
   *
   * @generated from protobuf field: string id = 8;
   */
  id: string
  /**
   * Length of the SV.
   *
   * @generated from protobuf field: int32 sv_len = 9;
   */
  svLen: number
  /**
   * The type of the variant.
   *
   * @generated from protobuf field: annonars.gnomad.exac_cnv.CnvType sv_type = 10;
   */
  svType: CnvType
  /**
   * Median number of callable exons spanned by variant passing QS
   * threshold.
   *
   * @generated from protobuf field: int32 n_exn_var = 11;
   */
  nExnVar: number
  /**
   * Median number of callable intervals spanned by variant passing
   * QS threshold.
   *
   * @generated from protobuf field: int32 n_int_var = 12;
   */
  nIntVar: number
  /**
   * Symbols of genes predicted to be impacted by variant
   *
   * @generated from protobuf field: repeated string genes = 13;
   */
  genes: string[]
  /**
   * Carrier counts in the different population.
   *
   * The populations in gnomAD CNV v4 are: empty for global, "non_neuro",
   * and "non_neuro_coontrols".
   *
   * @generated from protobuf field: repeated annonars.gnomad.gnomad_cnv4.CohortCarrierCounts carrier_counts = 14;
   */
  carrierCounts: CohortCarrierCounts[]
}
/**
 * ExAC population.
 *
 * @generated from protobuf enum annonars.gnomad.gnomad_cnv4.Population
 */
export enum Population {
  /**
   * unknown
   *
   * @generated from protobuf enum value: POPULATION_UNKNOWN = 0;
   */
  POPULATION_UNKNOWN = 0,
  /**
   * African
   *
   * @generated from protobuf enum value: POPULATION_AFR = 1;
   */
  POPULATION_AFR = 1,
  /**
   * Ad Mixed American
   *
   * @generated from protobuf enum value: POPULATION_AMR = 2;
   */
  POPULATION_AMR = 2,
  /**
   * Ashkenazi Jewish
   *
   * @generated from protobuf enum value: POPULATION_ASJ = 3;
   */
  POPULATION_ASJ = 3,
  /**
   * East Asian
   *
   * @generated from protobuf enum value: POPULATION_EAS = 4;
   */
  POPULATION_EAS = 4,
  /**
   * Finnish
   *
   * @generated from protobuf enum value: POPULATION_FIN = 5;
   */
  POPULATION_FIN = 5,
  /**
   * Middle Eastern
   *
   * @generated from protobuf enum value: POPULATION_MID = 6;
   */
  POPULATION_MID = 6,
  /**
   * Non-Finnish European
   *
   * @generated from protobuf enum value: POPULATION_NFE = 7;
   */
  POPULATION_NFE = 7,
  /**
   * South Asian
   *
   * @generated from protobuf enum value: POPULATION_SAS = 8;
   */
  POPULATION_SAS = 8
}
// @generated message type with reflection information, may provide speed optimized methods
class CarrierCounts$Type extends MessageType<CarrierCounts> {
  constructor() {
    super('annonars.gnomad.gnomad_cnv4.CarrierCounts', [
      { no: 1, name: 'sc', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 2, name: 'sf', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },
      { no: 3, name: 'sn', kind: 'scalar', T: 5 /*ScalarType.INT32*/ }
    ])
  }
  create(value?: PartialMessage<CarrierCounts>): CarrierCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.sc = 0
    message.sf = 0
    message.sn = 0
    if (value !== undefined) reflectionMergePartial<CarrierCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CarrierCounts
  ): CarrierCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* int32 sc */ 1:
          message.sc = reader.int32()
          break
        case /* float sf */ 2:
          message.sf = reader.float()
          break
        case /* int32 sn */ 3:
          message.sn = reader.int32()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: CarrierCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* int32 sc = 1; */
    if (message.sc !== 0) writer.tag(1, WireType.Varint).int32(message.sc)
    /* float sf = 2; */
    if (message.sf !== 0) writer.tag(2, WireType.Bit32).float(message.sf)
    /* int32 sn = 3; */
    if (message.sn !== 0) writer.tag(3, WireType.Varint).int32(message.sn)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.gnomad_cnv4.CarrierCounts
 */
export const CarrierCounts = new CarrierCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CarrierCountsBySex$Type extends MessageType<CarrierCountsBySex> {
  constructor() {
    super('annonars.gnomad.gnomad_cnv4.CarrierCountsBySex', [
      { no: 1, name: 'overall', kind: 'message', T: () => CarrierCounts },
      { no: 2, name: 'xx', kind: 'message', T: () => CarrierCounts },
      { no: 3, name: 'xy', kind: 'message', T: () => CarrierCounts }
    ])
  }
  create(value?: PartialMessage<CarrierCountsBySex>): CarrierCountsBySex {
    const message = globalThis.Object.create(this.messagePrototype!)
    if (value !== undefined) reflectionMergePartial<CarrierCountsBySex>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CarrierCountsBySex
  ): CarrierCountsBySex {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.gnomad.gnomad_cnv4.CarrierCounts overall */ 1:
          message.overall = CarrierCounts.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.overall
          )
          break
        case /* optional annonars.gnomad.gnomad_cnv4.CarrierCounts xx */ 2:
          message.xx = CarrierCounts.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.xx
          )
          break
        case /* optional annonars.gnomad.gnomad_cnv4.CarrierCounts xy */ 3:
          message.xy = CarrierCounts.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.xy
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: CarrierCountsBySex,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.gnomad.gnomad_cnv4.CarrierCounts overall = 1; */
    if (message.overall)
      CarrierCounts.internalBinaryWrite(
        message.overall,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* optional annonars.gnomad.gnomad_cnv4.CarrierCounts xx = 2; */
    if (message.xx)
      CarrierCounts.internalBinaryWrite(
        message.xx,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* optional annonars.gnomad.gnomad_cnv4.CarrierCounts xy = 3; */
    if (message.xy)
      CarrierCounts.internalBinaryWrite(
        message.xy,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.gnomad_cnv4.CarrierCountsBySex
 */
export const CarrierCountsBySex = new CarrierCountsBySex$Type()
// @generated message type with reflection information, may provide speed optimized methods
class PopulationCarrierCounts$Type extends MessageType<PopulationCarrierCounts> {
  constructor() {
    super('annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts', [
      {
        no: 1,
        name: 'population',
        kind: 'enum',
        T: () => ['annonars.gnomad.gnomad_cnv4.Population', Population]
      },
      { no: 2, name: 'counts', kind: 'message', T: () => CarrierCountsBySex }
    ])
  }
  create(value?: PartialMessage<PopulationCarrierCounts>): PopulationCarrierCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.population = 0
    if (value !== undefined) reflectionMergePartial<PopulationCarrierCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PopulationCarrierCounts
  ): PopulationCarrierCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.gnomad.gnomad_cnv4.Population population */ 1:
          message.population = reader.int32()
          break
        case /* annonars.gnomad.gnomad_cnv4.CarrierCountsBySex counts */ 2:
          message.counts = CarrierCountsBySex.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.counts
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: PopulationCarrierCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.gnomad.gnomad_cnv4.Population population = 1; */
    if (message.population !== 0) writer.tag(1, WireType.Varint).int32(message.population)
    /* annonars.gnomad.gnomad_cnv4.CarrierCountsBySex counts = 2; */
    if (message.counts)
      CarrierCountsBySex.internalBinaryWrite(
        message.counts,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts
 */
export const PopulationCarrierCounts = new PopulationCarrierCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class CohortCarrierCounts$Type extends MessageType<CohortCarrierCounts> {
  constructor() {
    super('annonars.gnomad.gnomad_cnv4.CohortCarrierCounts', [
      { no: 1, name: 'cohort', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'by_sex', kind: 'message', T: () => CarrierCountsBySex },
      {
        no: 3,
        name: 'by_population',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => PopulationCarrierCounts
      }
    ])
  }
  create(value?: PartialMessage<CohortCarrierCounts>): CohortCarrierCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.byPopulation = []
    if (value !== undefined) reflectionMergePartial<CohortCarrierCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CohortCarrierCounts
  ): CohortCarrierCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* optional string cohort */ 1:
          message.cohort = reader.string()
          break
        case /* annonars.gnomad.gnomad_cnv4.CarrierCountsBySex by_sex */ 2:
          message.bySex = CarrierCountsBySex.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.bySex
          )
          break
        case /* repeated annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts by_population */ 3:
          message.byPopulation.push(
            PopulationCarrierCounts.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: CohortCarrierCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string cohort = 1; */
    if (message.cohort !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.cohort)
    /* annonars.gnomad.gnomad_cnv4.CarrierCountsBySex by_sex = 2; */
    if (message.bySex)
      CarrierCountsBySex.internalBinaryWrite(
        message.bySex,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* repeated annonars.gnomad.gnomad_cnv4.PopulationCarrierCounts by_population = 3; */
    for (let i = 0; i < message.byPopulation.length; i++)
      PopulationCarrierCounts.internalBinaryWrite(
        message.byPopulation[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.gnomad_cnv4.CohortCarrierCounts
 */
export const CohortCarrierCounts = new CohortCarrierCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.gnomad.gnomad_cnv4.Record', [
      { no: 1, name: 'chrom', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 4, name: 'inner_start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 5, name: 'inner_stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 6, name: 'outer_start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 7, name: 'outer_stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 8, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 9, name: 'sv_len', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      {
        no: 10,
        name: 'sv_type',
        kind: 'enum',
        T: () => ['annonars.gnomad.exac_cnv.CnvType', CnvType]
      },
      { no: 11, name: 'n_exn_var', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 12, name: 'n_int_var', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      {
        no: 13,
        name: 'genes',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 14,
        name: 'carrier_counts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => CohortCarrierCounts
      }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.chrom = ''
    message.start = 0
    message.stop = 0
    message.innerStart = 0
    message.innerStop = 0
    message.outerStart = 0
    message.outerStop = 0
    message.id = ''
    message.svLen = 0
    message.svType = 0
    message.nExnVar = 0
    message.nIntVar = 0
    message.genes = []
    message.carrierCounts = []
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string chrom */ 1:
          message.chrom = reader.string()
          break
        case /* int32 start */ 2:
          message.start = reader.int32()
          break
        case /* int32 stop */ 3:
          message.stop = reader.int32()
          break
        case /* int32 inner_start */ 4:
          message.innerStart = reader.int32()
          break
        case /* int32 inner_stop */ 5:
          message.innerStop = reader.int32()
          break
        case /* int32 outer_start */ 6:
          message.outerStart = reader.int32()
          break
        case /* int32 outer_stop */ 7:
          message.outerStop = reader.int32()
          break
        case /* string id */ 8:
          message.id = reader.string()
          break
        case /* int32 sv_len */ 9:
          message.svLen = reader.int32()
          break
        case /* annonars.gnomad.exac_cnv.CnvType sv_type */ 10:
          message.svType = reader.int32()
          break
        case /* int32 n_exn_var */ 11:
          message.nExnVar = reader.int32()
          break
        case /* int32 n_int_var */ 12:
          message.nIntVar = reader.int32()
          break
        case /* repeated string genes */ 13:
          message.genes.push(reader.string())
          break
        case /* repeated annonars.gnomad.gnomad_cnv4.CohortCarrierCounts carrier_counts */ 14:
          message.carrierCounts.push(
            CohortCarrierCounts.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string chrom = 1; */
    if (message.chrom !== '') writer.tag(1, WireType.LengthDelimited).string(message.chrom)
    /* int32 start = 2; */
    if (message.start !== 0) writer.tag(2, WireType.Varint).int32(message.start)
    /* int32 stop = 3; */
    if (message.stop !== 0) writer.tag(3, WireType.Varint).int32(message.stop)
    /* int32 inner_start = 4; */
    if (message.innerStart !== 0) writer.tag(4, WireType.Varint).int32(message.innerStart)
    /* int32 inner_stop = 5; */
    if (message.innerStop !== 0) writer.tag(5, WireType.Varint).int32(message.innerStop)
    /* int32 outer_start = 6; */
    if (message.outerStart !== 0) writer.tag(6, WireType.Varint).int32(message.outerStart)
    /* int32 outer_stop = 7; */
    if (message.outerStop !== 0) writer.tag(7, WireType.Varint).int32(message.outerStop)
    /* string id = 8; */
    if (message.id !== '') writer.tag(8, WireType.LengthDelimited).string(message.id)
    /* int32 sv_len = 9; */
    if (message.svLen !== 0) writer.tag(9, WireType.Varint).int32(message.svLen)
    /* annonars.gnomad.exac_cnv.CnvType sv_type = 10; */
    if (message.svType !== 0) writer.tag(10, WireType.Varint).int32(message.svType)
    /* int32 n_exn_var = 11; */
    if (message.nExnVar !== 0) writer.tag(11, WireType.Varint).int32(message.nExnVar)
    /* int32 n_int_var = 12; */
    if (message.nIntVar !== 0) writer.tag(12, WireType.Varint).int32(message.nIntVar)
    /* repeated string genes = 13; */
    for (let i = 0; i < message.genes.length; i++)
      writer.tag(13, WireType.LengthDelimited).string(message.genes[i])
    /* repeated annonars.gnomad.gnomad_cnv4.CohortCarrierCounts carrier_counts = 14; */
    for (let i = 0; i < message.carrierCounts.length; i++)
      CohortCarrierCounts.internalBinaryWrite(
        message.carrierCounts[i],
        writer.tag(14, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.gnomad_cnv4.Record
 */
export const Record = new Record$Type()

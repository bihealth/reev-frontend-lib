// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/gnomad/exac_cnv.proto" (package "annonars.gnomad.exac_cnv", syntax proto3)
// tslint:disable
//
// Protocol buffers for representing ExAC CNV data.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Protocol buffer for the ExAC CNV data.
 *
 * The more specialized fields from the INFO column are stored in separate, optional fields such
 * that we don't end up with a humongous message.
 *
 * @generated from protobuf message annonars.gnomad.exac_cnv.Record
 */
export interface Record {
  /**
   * Chromosome name.
   *
   * @generated from protobuf field: string chrom = 1;
   */
  chrom: string
  /**
   * 1-based start position.
   *
   * @generated from protobuf field: int32 start = 2;
   */
  start: number
  /**
   * 1-based stop position.
   *
   * @generated from protobuf field: int32 stop = 3;
   */
  stop: number
  /**
   * / The type of the variant.
   *
   * @generated from protobuf field: annonars.gnomad.exac_cnv.CnvType sv_type = 4;
   */
  svType: CnvType
  /**
   * / The population.
   *
   * @generated from protobuf field: annonars.gnomad.exac_cnv.Population population = 5;
   */
  population: Population
}
/**
 * Enumeration for the CNV type.
 *
 * @generated from protobuf enum annonars.gnomad.exac_cnv.CnvType
 */
export enum CnvType {
  /**
   * unknown
   *
   * @generated from protobuf enum value: CNV_TYPE_UNKNOWN = 0;
   */
  CNV_TYPE_UNKNOWN = 0,
  /**
   * Deletion.
   *
   * @generated from protobuf enum value: CNV_TYPE_DEL = 1;
   */
  CNV_TYPE_DEL = 1,
  /**
   * Duplication.
   *
   * @generated from protobuf enum value: CNV_TYPE_DUP = 2;
   */
  CNV_TYPE_DUP = 2
}
/**
 * ExAC population.
 *
 * @generated from protobuf enum annonars.gnomad.exac_cnv.Population
 */
export enum Population {
  /**
   * unknown
   *
   * @generated from protobuf enum value: POPULATION_UNKNOWN = 0;
   */
  POPULATION_UNKNOWN = 0,
  /**
   * African
   *
   * @generated from protobuf enum value: POPULATION_AFR = 1;
   */
  POPULATION_AFR = 1,
  /**
   * Ad Mixed American
   *
   * @generated from protobuf enum value: POPULATION_AMR = 2;
   */
  POPULATION_AMR = 2,
  /**
   * East Asian
   *
   * @generated from protobuf enum value: POPULATION_EAS = 3;
   */
  POPULATION_EAS = 3,
  /**
   * Finnish
   *
   * @generated from protobuf enum value: POPULATION_FIN = 4;
   */
  POPULATION_FIN = 4,
  /**
   * Non-Finnish European
   *
   * @generated from protobuf enum value: POPULATION_NFE = 5;
   */
  POPULATION_NFE = 5,
  /**
   * South Asian
   *
   * @generated from protobuf enum value: POPULATION_SAS = 6;
   */
  POPULATION_SAS = 6,
  /**
   * Other,
   *
   * @generated from protobuf enum value: POPULATION_OTHER = 7;
   */
  POPULATION_OTHER = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.gnomad.exac_cnv.Record', [
      { no: 1, name: 'chrom', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      {
        no: 4,
        name: 'sv_type',
        kind: 'enum',
        T: () => ['annonars.gnomad.exac_cnv.CnvType', CnvType]
      },
      {
        no: 5,
        name: 'population',
        kind: 'enum',
        T: () => ['annonars.gnomad.exac_cnv.Population', Population]
      }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.chrom = ''
    message.start = 0
    message.stop = 0
    message.svType = 0
    message.population = 0
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string chrom */ 1:
          message.chrom = reader.string()
          break
        case /* int32 start */ 2:
          message.start = reader.int32()
          break
        case /* int32 stop */ 3:
          message.stop = reader.int32()
          break
        case /* annonars.gnomad.exac_cnv.CnvType sv_type */ 4:
          message.svType = reader.int32()
          break
        case /* annonars.gnomad.exac_cnv.Population population */ 5:
          message.population = reader.int32()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string chrom = 1; */
    if (message.chrom !== '') writer.tag(1, WireType.LengthDelimited).string(message.chrom)
    /* int32 start = 2; */
    if (message.start !== 0) writer.tag(2, WireType.Varint).int32(message.start)
    /* int32 stop = 3; */
    if (message.stop !== 0) writer.tag(3, WireType.Varint).int32(message.stop)
    /* annonars.gnomad.exac_cnv.CnvType sv_type = 4; */
    if (message.svType !== 0) writer.tag(4, WireType.Varint).int32(message.svType)
    /* annonars.gnomad.exac_cnv.Population population = 5; */
    if (message.population !== 0) writer.tag(5, WireType.Varint).int32(message.population)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.gnomad.exac_cnv.Record
 */
export const Record = new Record$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/clinvar_data/phenotype_link.proto" (package "annonars.clinvar_data.phenotype_link", syntax proto3)
// tslint:disable
//
// Protocol buffers to store the gene-to-phenotype links extracted from ClinVar.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { VersionedAccession } from './extracted_vars'

/**
 * A record linking gene to phenotype.
 *
 * @generated from protobuf message annonars.clinvar_data.phenotype_link.GenePhenotypeRecord
 */
export interface GenePhenotypeRecord {
  /**
   * VCV
   *
   * @generated from protobuf field: annonars.clinvar_data.extracted_vars.VersionedAccession vcv = 1;
   */
  vcv?: VersionedAccession
  /**
   * SCV
   *
   * @generated from protobuf field: annonars.clinvar_data.extracted_vars.VersionedAccession scv = 2;
   */
  scv?: VersionedAccession
  /**
   * Clinical germline classification.
   *
   * @generated from protobuf field: string germline_classification = 3;
   */
  germlineClassification: string
  /**
   * Submitter
   *
   * @generated from protobuf field: string submitter_name = 4;
   */
  submitterName: string
  /**
   * Gene HGNC ID
   *
   * @generated from protobuf field: repeated string hgnc_ids = 5;
   */
  hgncIds: string[]
  /**
   * Linked OMIM terms
   *
   * @generated from protobuf field: repeated string omim_terms = 6;
   */
  omimTerms: string[]
  /**
   * Linked MONDO terms
   *
   * @generated from protobuf field: repeated string mondo_terms = 7;
   */
  mondoTerms: string[]
  /**
   * Linked HPO terms
   *
   * @generated from protobuf field: repeated string hpo_terms = 8;
   */
  hpoTerms: string[]
}
// @generated message type with reflection information, may provide speed optimized methods
class GenePhenotypeRecord$Type extends MessageType<GenePhenotypeRecord> {
  constructor() {
    super('annonars.clinvar_data.phenotype_link.GenePhenotypeRecord', [
      { no: 1, name: 'vcv', kind: 'message', T: () => VersionedAccession },
      { no: 2, name: 'scv', kind: 'message', T: () => VersionedAccession },
      { no: 3, name: 'germline_classification', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'submitter_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 5,
        name: 'hgnc_ids',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 6,
        name: 'omim_terms',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: 'mondo_terms',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 8,
        name: 'hpo_terms',
        kind: 'scalar',
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/
      }
    ])
  }
  create(value?: PartialMessage<GenePhenotypeRecord>): GenePhenotypeRecord {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.germlineClassification = ''
    message.submitterName = ''
    message.hgncIds = []
    message.omimTerms = []
    message.mondoTerms = []
    message.hpoTerms = []
    if (value !== undefined) reflectionMergePartial<GenePhenotypeRecord>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GenePhenotypeRecord
  ): GenePhenotypeRecord {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.clinvar_data.extracted_vars.VersionedAccession vcv */ 1:
          message.vcv = VersionedAccession.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.vcv
          )
          break
        case /* annonars.clinvar_data.extracted_vars.VersionedAccession scv */ 2:
          message.scv = VersionedAccession.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.scv
          )
          break
        case /* string germline_classification */ 3:
          message.germlineClassification = reader.string()
          break
        case /* string submitter_name */ 4:
          message.submitterName = reader.string()
          break
        case /* repeated string hgnc_ids */ 5:
          message.hgncIds.push(reader.string())
          break
        case /* repeated string omim_terms */ 6:
          message.omimTerms.push(reader.string())
          break
        case /* repeated string mondo_terms */ 7:
          message.mondoTerms.push(reader.string())
          break
        case /* repeated string hpo_terms */ 8:
          message.hpoTerms.push(reader.string())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GenePhenotypeRecord,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.clinvar_data.extracted_vars.VersionedAccession vcv = 1; */
    if (message.vcv)
      VersionedAccession.internalBinaryWrite(
        message.vcv,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* annonars.clinvar_data.extracted_vars.VersionedAccession scv = 2; */
    if (message.scv)
      VersionedAccession.internalBinaryWrite(
        message.scv,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* string germline_classification = 3; */
    if (message.germlineClassification !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.germlineClassification)
    /* string submitter_name = 4; */
    if (message.submitterName !== '')
      writer.tag(4, WireType.LengthDelimited).string(message.submitterName)
    /* repeated string hgnc_ids = 5; */
    for (let i = 0; i < message.hgncIds.length; i++)
      writer.tag(5, WireType.LengthDelimited).string(message.hgncIds[i])
    /* repeated string omim_terms = 6; */
    for (let i = 0; i < message.omimTerms.length; i++)
      writer.tag(6, WireType.LengthDelimited).string(message.omimTerms[i])
    /* repeated string mondo_terms = 7; */
    for (let i = 0; i < message.mondoTerms.length; i++)
      writer.tag(7, WireType.LengthDelimited).string(message.mondoTerms[i])
    /* repeated string hpo_terms = 8; */
    for (let i = 0; i < message.hpoTerms.length; i++)
      writer.tag(8, WireType.LengthDelimited).string(message.hpoTerms[i])
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar_data.phenotype_link.GenePhenotypeRecord
 */
export const GenePhenotypeRecord = new GenePhenotypeRecord$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/clinvar_data/class_by_freq.proto" (package "annonars.clinvar_data.class_by_freq", syntax proto3)
// tslint:disable
//
// Protocol buffers for types for class-by-freq tool.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Output record.
 *
 * @generated from protobuf message annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts
 */
export interface GeneCoarseClinsigFrequencyCounts {
  /**
   * The gene HGNC ID.
   *
   * @generated from protobuf field: string hgnc_id = 1;
   */
  hgncId: string
  /**
   * The counts for (likely) pathogenic.
   *
   * @generated from protobuf field: repeated uint32 pathogenic_counts = 2;
   */
  pathogenicCounts: number[]
  /**
   * The counts for uncertain significance.
   *
   * @generated from protobuf field: repeated uint32 uncertain_counts = 3;
   */
  uncertainCounts: number[]
  /**
   * The counts for (likely) benign.
   *
   * @generated from protobuf field: repeated uint32 benign_counts = 4;
   */
  benignCounts: number[]
}
/**
 * Enumeration for coarse-grain classification.
 *
 * @generated from protobuf enum annonars.clinvar_data.class_by_freq.CoarseClinicalSignificance
 */
export enum CoarseClinicalSignificance {
  /**
   * unspecified coarse clinical significance
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_UNSPECIFIED = 0;
   */
  COARSE_CLINICAL_SIGNIFICANCE_UNSPECIFIED = 0,
  /**
   * Corresponds to "benign".
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_BENIGN = 1;
   */
  COARSE_CLINICAL_SIGNIFICANCE_BENIGN = 1,
  /**
   * Corresponds to "uncertain".
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_UNCERTAIN = 2;
   */
  COARSE_CLINICAL_SIGNIFICANCE_UNCERTAIN = 2,
  /**
   * Corresponds to "pathogenic".
   *
   * @generated from protobuf enum value: COARSE_CLINICAL_SIGNIFICANCE_PATHOGENIC = 3;
   */
  COARSE_CLINICAL_SIGNIFICANCE_PATHOGENIC = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GeneCoarseClinsigFrequencyCounts$Type extends MessageType<GeneCoarseClinsigFrequencyCounts> {
  constructor() {
    super('annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts', [
      { no: 1, name: 'hgnc_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'pathogenic_counts',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/
      },
      {
        no: 3,
        name: 'uncertain_counts',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/
      },
      {
        no: 4,
        name: 'benign_counts',
        kind: 'scalar',
        repeat: 1 /*RepeatType.PACKED*/,
        T: 13 /*ScalarType.UINT32*/
      }
    ])
  }
  create(
    value?: PartialMessage<GeneCoarseClinsigFrequencyCounts>
  ): GeneCoarseClinsigFrequencyCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.hgncId = ''
    message.pathogenicCounts = []
    message.uncertainCounts = []
    message.benignCounts = []
    if (value !== undefined)
      reflectionMergePartial<GeneCoarseClinsigFrequencyCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneCoarseClinsigFrequencyCounts
  ): GeneCoarseClinsigFrequencyCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string hgnc_id */ 1:
          message.hgncId = reader.string()
          break
        case /* repeated uint32 pathogenic_counts */ 2:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.pathogenicCounts.push(reader.uint32())
          else message.pathogenicCounts.push(reader.uint32())
          break
        case /* repeated uint32 uncertain_counts */ 3:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.uncertainCounts.push(reader.uint32())
          else message.uncertainCounts.push(reader.uint32())
          break
        case /* repeated uint32 benign_counts */ 4:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.benignCounts.push(reader.uint32())
          else message.benignCounts.push(reader.uint32())
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneCoarseClinsigFrequencyCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string hgnc_id = 1; */
    if (message.hgncId !== '') writer.tag(1, WireType.LengthDelimited).string(message.hgncId)
    /* repeated uint32 pathogenic_counts = 2; */
    if (message.pathogenicCounts.length) {
      writer.tag(2, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.pathogenicCounts.length; i++)
        writer.uint32(message.pathogenicCounts[i])
      writer.join()
    }
    /* repeated uint32 uncertain_counts = 3; */
    if (message.uncertainCounts.length) {
      writer.tag(3, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.uncertainCounts.length; i++)
        writer.uint32(message.uncertainCounts[i])
      writer.join()
    }
    /* repeated uint32 benign_counts = 4; */
    if (message.benignCounts.length) {
      writer.tag(4, WireType.LengthDelimited).fork()
      for (let i = 0; i < message.benignCounts.length; i++) writer.uint32(message.benignCounts[i])
      writer.join()
    }
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar_data.class_by_freq.GeneCoarseClinsigFrequencyCounts
 */
export const GeneCoarseClinsigFrequencyCounts = new GeneCoarseClinsigFrequencyCounts$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/clinvar_data/gene_impact.proto" (package "annonars.clinvar_data.gene_impact", syntax proto3)
// tslint:disable
//
// Protocol buffers for types for per-gene impact.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * Entry for storing counts of `GeneImpact` and `ClinicalSignificance`.
 *
 * @generated from protobuf message annonars.clinvar_data.gene_impact.GeneImpactCounts
 */
export interface GeneImpactCounts {
  /**
   * The gene HGNC ID.
   *
   * @generated from protobuf field: string hgnc_id = 1;
   */
  hgncId: string
  /**
   * The impact counts.
   *
   * @generated from protobuf field: repeated annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts impact_counts = 2;
   */
  impactCounts: GeneImpactCounts_ImpactCounts[]
}
/**
 * Stores the counts for a gene impact.
 *
 * @generated from protobuf message annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts
 */
export interface GeneImpactCounts_ImpactCounts {
  /**
   * The gene impact.
   *
   * @generated from protobuf field: annonars.clinvar_data.gene_impact.GeneImpact gene_impact = 1;
   */
  geneImpact: GeneImpact
  /**
   * The counts for the benign impact.
   *
   * @generated from protobuf field: uint32 count_benign = 2;
   */
  countBenign: number
  /**
   * The counts for the likely benign impact.
   *
   * @generated from protobuf field: uint32 count_likely_benign = 3;
   */
  countLikelyBenign: number
  /**
   * The counts for the uncertain significance impact.
   *
   * @generated from protobuf field: uint32 count_uncertain_significance = 4;
   */
  countUncertainSignificance: number
  /**
   * The counts for the likely pathogenic impact.
   *
   * @generated from protobuf field: uint32 count_likely_pathogenic = 5;
   */
  countLikelyPathogenic: number
  /**
   * The counts for the pathogenic impact.
   *
   * @generated from protobuf field: uint32 count_pathogenic = 6;
   */
  countPathogenic: number
}
/**
 * Enumeration with the variant consequence.
 *
 * @generated from protobuf enum annonars.clinvar_data.gene_impact.GeneImpact
 */
export enum GeneImpact {
  /**
   * unspecified impact
   *
   * @generated from protobuf enum value: GENE_IMPACT_UNSPECIFIED = 0;
   */
  GENE_IMPACT_UNSPECIFIED = 0,
  /**
   * Corresponds to "3_prime_UTR_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_THREE_PRIME_UTR_VARIANT = 1;
   */
  GENE_IMPACT_THREE_PRIME_UTR_VARIANT = 1,
  /**
   * Corresponds to "5_prime_UTR_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_FIVE_PRIME_UTR_VARIANT = 2;
   */
  GENE_IMPACT_FIVE_PRIME_UTR_VARIANT = 2,
  /**
   * Corresponds to "downstream_gene_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_DOWNSTREAM_TRANSCRIPT_VARIANT = 3;
   */
  GENE_IMPACT_DOWNSTREAM_TRANSCRIPT_VARIANT = 3,
  /**
   * Corresponds to "frameshift_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_FRAMESHIFT_VARIANT = 4;
   */
  GENE_IMPACT_FRAMESHIFT_VARIANT = 4,
  /**
   * Corresponds to "inframe_indel"
   *
   * @generated from protobuf enum value: GENE_IMPACT_INFRAME_INDEL = 5;
   */
  GENE_IMPACT_INFRAME_INDEL = 5,
  /**
   * Corresponds to "start_lost"
   *
   * @generated from protobuf enum value: GENE_IMPACT_START_LOST = 6;
   */
  GENE_IMPACT_START_LOST = 6,
  /**
   * Corresponds to "intron_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_INTRON_VARIANT = 7;
   */
  GENE_IMPACT_INTRON_VARIANT = 7,
  /**
   * Corresponds to "missense_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_MISSENSE_VARIANT = 8;
   */
  GENE_IMPACT_MISSENSE_VARIANT = 8,
  /**
   * Corresponds to "non_codnig_transcript_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_NON_CODING_TRANSCRIPT_VARIANT = 9;
   */
  GENE_IMPACT_NON_CODING_TRANSCRIPT_VARIANT = 9,
  /**
   * Corresponds to "stop_gained"
   *
   * @generated from protobuf enum value: GENE_IMPACT_STOP_GAINED = 10;
   */
  GENE_IMPACT_STOP_GAINED = 10,
  /**
   * Corresponds to "no_sequence_alteration"
   *
   * @generated from protobuf enum value: GENE_IMPACT_NO_SEQUENCE_ALTERATION = 11;
   */
  GENE_IMPACT_NO_SEQUENCE_ALTERATION = 11,
  /**
   * Corresponds to "splice_acceptor_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_SPLICE_ACCEPTOR_VARIANT = 12;
   */
  GENE_IMPACT_SPLICE_ACCEPTOR_VARIANT = 12,
  /**
   * Corresponds to "splice_donor_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_SPLICE_DONOR_VARIANT = 13;
   */
  GENE_IMPACT_SPLICE_DONOR_VARIANT = 13,
  /**
   * Corresponds to "stop_lost"
   *
   * @generated from protobuf enum value: GENE_IMPACT_STOP_LOST = 14;
   */
  GENE_IMPACT_STOP_LOST = 14,
  /**
   * Corresponds to "synonymous_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_SYNONYMOUS_VARIANT = 15;
   */
  GENE_IMPACT_SYNONYMOUS_VARIANT = 15,
  /**
   * Corresponds to "upstream_gene_variant"
   *
   * @generated from protobuf enum value: GENE_IMPACT_UPSTREAM_TRANSCRIPT_VARIANT = 16;
   */
  GENE_IMPACT_UPSTREAM_TRANSCRIPT_VARIANT = 16
}
/**
 * Enumeration for ACMG clinical significance.
 *
 * @generated from protobuf enum annonars.clinvar_data.gene_impact.ClinicalSignificance
 */
export enum ClinicalSignificance {
  /**
   * unspecified clinical significance
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_UNSPECIFIED = 0;
   */
  CLINICAL_SIGNIFICANCE_UNSPECIFIED = 0,
  /**
   * Corresponds to "Benign"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_BENIGN = 1;
   */
  CLINICAL_SIGNIFICANCE_BENIGN = 1,
  /**
   * Corresponds to "Likely benign"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_LIKELY_BENIGN = 2;
   */
  CLINICAL_SIGNIFICANCE_LIKELY_BENIGN = 2,
  /**
   * Corresponds to "Uncertain significance"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_UNCERTAIN_SIGNIFICANCE = 3;
   */
  CLINICAL_SIGNIFICANCE_UNCERTAIN_SIGNIFICANCE = 3,
  /**
   * Corresponds to "Likely pathogenic"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_LIKELY_PATHOGENIC = 4;
   */
  CLINICAL_SIGNIFICANCE_LIKELY_PATHOGENIC = 4,
  /**
   * Corresponds to "Pathogenic"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_PATHOGENIC = 5;
   */
  CLINICAL_SIGNIFICANCE_PATHOGENIC = 5,
  /**
   * Corresponds to "not provided"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_NOT_PROVIDED = 6;
   */
  CLINICAL_SIGNIFICANCE_NOT_PROVIDED = 6,
  /**
   * Corresponds to "other"
   *
   * @generated from protobuf enum value: CLINICAL_SIGNIFICANCE_OTHER = 7;
   */
  CLINICAL_SIGNIFICANCE_OTHER = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class GeneImpactCounts$Type extends MessageType<GeneImpactCounts> {
  constructor() {
    super('annonars.clinvar_data.gene_impact.GeneImpactCounts', [
      { no: 1, name: 'hgnc_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'impact_counts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => GeneImpactCounts_ImpactCounts
      }
    ])
  }
  create(value?: PartialMessage<GeneImpactCounts>): GeneImpactCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.hgncId = ''
    message.impactCounts = []
    if (value !== undefined) reflectionMergePartial<GeneImpactCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneImpactCounts
  ): GeneImpactCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string hgnc_id */ 1:
          message.hgncId = reader.string()
          break
        case /* repeated annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts impact_counts */ 2:
          message.impactCounts.push(
            GeneImpactCounts_ImpactCounts.internalBinaryRead(reader, reader.uint32(), options)
          )
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneImpactCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string hgnc_id = 1; */
    if (message.hgncId !== '') writer.tag(1, WireType.LengthDelimited).string(message.hgncId)
    /* repeated annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts impact_counts = 2; */
    for (let i = 0; i < message.impactCounts.length; i++)
      GeneImpactCounts_ImpactCounts.internalBinaryWrite(
        message.impactCounts[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar_data.gene_impact.GeneImpactCounts
 */
export const GeneImpactCounts = new GeneImpactCounts$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GeneImpactCounts_ImpactCounts$Type extends MessageType<GeneImpactCounts_ImpactCounts> {
  constructor() {
    super('annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts', [
      {
        no: 1,
        name: 'gene_impact',
        kind: 'enum',
        T: () => ['annonars.clinvar_data.gene_impact.GeneImpact', GeneImpact]
      },
      { no: 2, name: 'count_benign', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 3, name: 'count_likely_benign', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 4, name: 'count_uncertain_significance', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 5, name: 'count_likely_pathogenic', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },
      { no: 6, name: 'count_pathogenic', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ }
    ])
  }
  create(value?: PartialMessage<GeneImpactCounts_ImpactCounts>): GeneImpactCounts_ImpactCounts {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.geneImpact = 0
    message.countBenign = 0
    message.countLikelyBenign = 0
    message.countUncertainSignificance = 0
    message.countLikelyPathogenic = 0
    message.countPathogenic = 0
    if (value !== undefined)
      reflectionMergePartial<GeneImpactCounts_ImpactCounts>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneImpactCounts_ImpactCounts
  ): GeneImpactCounts_ImpactCounts {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* annonars.clinvar_data.gene_impact.GeneImpact gene_impact */ 1:
          message.geneImpact = reader.int32()
          break
        case /* uint32 count_benign */ 2:
          message.countBenign = reader.uint32()
          break
        case /* uint32 count_likely_benign */ 3:
          message.countLikelyBenign = reader.uint32()
          break
        case /* uint32 count_uncertain_significance */ 4:
          message.countUncertainSignificance = reader.uint32()
          break
        case /* uint32 count_likely_pathogenic */ 5:
          message.countLikelyPathogenic = reader.uint32()
          break
        case /* uint32 count_pathogenic */ 6:
          message.countPathogenic = reader.uint32()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneImpactCounts_ImpactCounts,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* annonars.clinvar_data.gene_impact.GeneImpact gene_impact = 1; */
    if (message.geneImpact !== 0) writer.tag(1, WireType.Varint).int32(message.geneImpact)
    /* uint32 count_benign = 2; */
    if (message.countBenign !== 0) writer.tag(2, WireType.Varint).uint32(message.countBenign)
    /* uint32 count_likely_benign = 3; */
    if (message.countLikelyBenign !== 0)
      writer.tag(3, WireType.Varint).uint32(message.countLikelyBenign)
    /* uint32 count_uncertain_significance = 4; */
    if (message.countUncertainSignificance !== 0)
      writer.tag(4, WireType.Varint).uint32(message.countUncertainSignificance)
    /* uint32 count_likely_pathogenic = 5; */
    if (message.countLikelyPathogenic !== 0)
      writer.tag(5, WireType.Varint).uint32(message.countLikelyPathogenic)
    /* uint32 count_pathogenic = 6; */
    if (message.countPathogenic !== 0)
      writer.tag(6, WireType.Varint).uint32(message.countPathogenic)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.clinvar_data.gene_impact.GeneImpactCounts.ImpactCounts
 */
export const GeneImpactCounts_ImpactCounts = new GeneImpactCounts_ImpactCounts$Type()

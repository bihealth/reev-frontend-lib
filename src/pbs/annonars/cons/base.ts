// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/cons/base.proto" (package "annonars.cons.base", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

/**
 * List of `Record`s.
 *
 * @generated from protobuf message annonars.cons.base.RecordList
 */
export interface RecordList {
  /**
   * The records in the list.
   *
   * @generated from protobuf field: repeated annonars.cons.base.Record records = 1;
   */
  records: Record[]
}
/**
 * Protocol buffer for the UCSC conservation record.
 *
 * @generated from protobuf message annonars.cons.base.Record
 */
export interface Record {
  /**
   * Chromosome name.
   *
   * @generated from protobuf field: string chrom = 1;
   */
  chrom: string
  /**
   * 1-based, inclusive start position.
   *
   * @generated from protobuf field: int32 start = 2;
   */
  start: number
  /**
   * 1-based, inclusive stop position.
   *
   * @generated from protobuf field: int32 stop = 3;
   */
  stop: number
  /**
   * HGNC identifier.
   *
   * @generated from protobuf field: string hgnc_id = 4;
   */
  hgncId: string
  /**
   * ENST identifier.
   *
   * @generated from protobuf field: string enst_id = 5;
   */
  enstId: string
  /**
   * Exon number (1-based).
   *
   * @generated from protobuf field: int32 exon_num = 6;
   */
  exonNum: number
  /**
   * Exon count.
   *
   * @generated from protobuf field: int32 exon_count = 7;
   */
  exonCount: number
  /**
   * Alignment.
   *
   * @generated from protobuf field: string alignment = 8;
   */
  alignment: string
}
// @generated message type with reflection information, may provide speed optimized methods
class RecordList$Type extends MessageType<RecordList> {
  constructor() {
    super('annonars.cons.base.RecordList', [
      { no: 1, name: 'records', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => Record }
    ])
  }
  create(value?: PartialMessage<RecordList>): RecordList {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.records = []
    if (value !== undefined) reflectionMergePartial<RecordList>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: RecordList
  ): RecordList {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated annonars.cons.base.Record records */ 1:
          message.records.push(Record.internalBinaryRead(reader, reader.uint32(), options))
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: RecordList,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated annonars.cons.base.Record records = 1; */
    for (let i = 0; i < message.records.length; i++)
      Record.internalBinaryWrite(
        message.records[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.cons.base.RecordList
 */
export const RecordList = new RecordList$Type()
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
  constructor() {
    super('annonars.cons.base.Record', [
      { no: 1, name: 'chrom', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'start', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 3, name: 'stop', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 4, name: 'hgnc_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'enst_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 6, name: 'exon_num', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 7, name: 'exon_count', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },
      { no: 8, name: 'alignment', kind: 'scalar', T: 9 /*ScalarType.STRING*/ }
    ])
  }
  create(value?: PartialMessage<Record>): Record {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.chrom = ''
    message.start = 0
    message.stop = 0
    message.hgncId = ''
    message.enstId = ''
    message.exonNum = 0
    message.exonCount = 0
    message.alignment = ''
    if (value !== undefined) reflectionMergePartial<Record>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Record
  ): Record {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string chrom */ 1:
          message.chrom = reader.string()
          break
        case /* int32 start */ 2:
          message.start = reader.int32()
          break
        case /* int32 stop */ 3:
          message.stop = reader.int32()
          break
        case /* string hgnc_id */ 4:
          message.hgncId = reader.string()
          break
        case /* string enst_id */ 5:
          message.enstId = reader.string()
          break
        case /* int32 exon_num */ 6:
          message.exonNum = reader.int32()
          break
        case /* int32 exon_count */ 7:
          message.exonCount = reader.int32()
          break
        case /* string alignment */ 8:
          message.alignment = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Record,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string chrom = 1; */
    if (message.chrom !== '') writer.tag(1, WireType.LengthDelimited).string(message.chrom)
    /* int32 start = 2; */
    if (message.start !== 0) writer.tag(2, WireType.Varint).int32(message.start)
    /* int32 stop = 3; */
    if (message.stop !== 0) writer.tag(3, WireType.Varint).int32(message.stop)
    /* string hgnc_id = 4; */
    if (message.hgncId !== '') writer.tag(4, WireType.LengthDelimited).string(message.hgncId)
    /* string enst_id = 5; */
    if (message.enstId !== '') writer.tag(5, WireType.LengthDelimited).string(message.enstId)
    /* int32 exon_num = 6; */
    if (message.exonNum !== 0) writer.tag(6, WireType.Varint).int32(message.exonNum)
    /* int32 exon_count = 7; */
    if (message.exonCount !== 0) writer.tag(7, WireType.Varint).int32(message.exonCount)
    /* string alignment = 8; */
    if (message.alignment !== '') writer.tag(8, WireType.LengthDelimited).string(message.alignment)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.cons.base.Record
 */
export const Record = new Record$Type()

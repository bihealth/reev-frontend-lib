// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix,long_type_string
// @generated from protobuf file "annonars/regions/clingen.proto" (package "annonars.regions.clingen", syntax proto3)
// tslint:disable
//
// Genomic region annotation with ClinGen information.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { ClingenDosageScore } from '../genes/base'

/**
 * Dosage pathogenicity region annotation.
 *
 * @generated from protobuf message annonars.regions.clingen.Region
 */
export interface Region {
  /**
   * ISCA ID
   *
   * @generated from protobuf field: string isca_id = 1;
   */
  iscaId: string
  /**
   * ISCA Region Name
   *
   * @generated from protobuf field: string isca_region_name = 2;
   */
  iscaRegionName: string
  /**
   * Genomic locaion.
   *
   * @generated from protobuf field: string genomic_location = 3;
   */
  genomicLocation: string
  /**
   * Haploinsufficiency score.
   *
   * @generated from protobuf field: annonars.genes.base.ClingenDosageScore haploinsufficiency_score = 4;
   */
  haploinsufficiencyScore: ClingenDosageScore
  /**
   * Triplosensitivity score.
   *
   * @generated from protobuf field: annonars.genes.base.ClingenDosageScore triplosensitivity_score = 5;
   */
  triplosensitivityScore: ClingenDosageScore
  /**
   * Haploinsufficiency Disease ID.
   *
   * @generated from protobuf field: optional string haploinsufficiency_disease_id = 6;
   */
  haploinsufficiencyDiseaseId?: string
  /**
   * Haploinsufficiency Disease ID.
   *
   * @generated from protobuf field: optional string triplosensitivity_disease_id = 7;
   */
  triplosensitivityDiseaseId?: string
}
// @generated message type with reflection information, may provide speed optimized methods
class Region$Type extends MessageType<Region> {
  constructor() {
    super('annonars.regions.clingen.Region', [
      { no: 1, name: 'isca_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'isca_region_name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'genomic_location', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: 'haploinsufficiency_score',
        kind: 'enum',
        T: () => ['annonars.genes.base.ClingenDosageScore', ClingenDosageScore]
      },
      {
        no: 5,
        name: 'triplosensitivity_score',
        kind: 'enum',
        T: () => ['annonars.genes.base.ClingenDosageScore', ClingenDosageScore]
      },
      {
        no: 6,
        name: 'haploinsufficiency_disease_id',
        kind: 'scalar',
        opt: true,
        T: 9 /*ScalarType.STRING*/
      },
      {
        no: 7,
        name: 'triplosensitivity_disease_id',
        kind: 'scalar',
        opt: true,
        T: 9 /*ScalarType.STRING*/
      }
    ])
  }
  create(value?: PartialMessage<Region>): Region {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.iscaId = ''
    message.iscaRegionName = ''
    message.genomicLocation = ''
    message.haploinsufficiencyScore = 0
    message.triplosensitivityScore = 0
    if (value !== undefined) reflectionMergePartial<Region>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Region
  ): Region {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* string isca_id */ 1:
          message.iscaId = reader.string()
          break
        case /* string isca_region_name */ 2:
          message.iscaRegionName = reader.string()
          break
        case /* string genomic_location */ 3:
          message.genomicLocation = reader.string()
          break
        case /* annonars.genes.base.ClingenDosageScore haploinsufficiency_score */ 4:
          message.haploinsufficiencyScore = reader.int32()
          break
        case /* annonars.genes.base.ClingenDosageScore triplosensitivity_score */ 5:
          message.triplosensitivityScore = reader.int32()
          break
        case /* optional string haploinsufficiency_disease_id */ 6:
          message.haploinsufficiencyDiseaseId = reader.string()
          break
        case /* optional string triplosensitivity_disease_id */ 7:
          message.triplosensitivityDiseaseId = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: Region,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string isca_id = 1; */
    if (message.iscaId !== '') writer.tag(1, WireType.LengthDelimited).string(message.iscaId)
    /* string isca_region_name = 2; */
    if (message.iscaRegionName !== '')
      writer.tag(2, WireType.LengthDelimited).string(message.iscaRegionName)
    /* string genomic_location = 3; */
    if (message.genomicLocation !== '')
      writer.tag(3, WireType.LengthDelimited).string(message.genomicLocation)
    /* annonars.genes.base.ClingenDosageScore haploinsufficiency_score = 4; */
    if (message.haploinsufficiencyScore !== 0)
      writer.tag(4, WireType.Varint).int32(message.haploinsufficiencyScore)
    /* annonars.genes.base.ClingenDosageScore triplosensitivity_score = 5; */
    if (message.triplosensitivityScore !== 0)
      writer.tag(5, WireType.Varint).int32(message.triplosensitivityScore)
    /* optional string haploinsufficiency_disease_id = 6; */
    if (message.haploinsufficiencyDiseaseId !== undefined)
      writer.tag(6, WireType.LengthDelimited).string(message.haploinsufficiencyDiseaseId)
    /* optional string triplosensitivity_disease_id = 7; */
    if (message.triplosensitivityDiseaseId !== undefined)
      writer.tag(7, WireType.LengthDelimited).string(message.triplosensitivityDiseaseId)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message annonars.regions.clingen.Region
 */
export const Region = new Region$Type()

// @generated by protobuf-ts 2.9.3 with parameter keep_enum_prefix
// @generated from protobuf file "mehari/server.proto" (package "mehari.server", syntax proto3)
// tslint:disable
//
// Protobuf messages for the server.
//
import type { BinaryWriteOptions } from '@protobuf-ts/runtime'
import type { IBinaryWriter } from '@protobuf-ts/runtime'
import { WireType } from '@protobuf-ts/runtime'
import type { BinaryReadOptions } from '@protobuf-ts/runtime'
import type { IBinaryReader } from '@protobuf-ts/runtime'
import { UnknownFieldHandler } from '@protobuf-ts/runtime'
import type { PartialMessage } from '@protobuf-ts/runtime'
import { reflectionMergePartial } from '@protobuf-ts/runtime'
import { MessageType } from '@protobuf-ts/runtime'

import { Transcript } from './txs'
import { GenomeBuild } from './txs'

/**
 * Query for transcripts of a certain gene.
 *
 * @generated from protobuf message mehari.server.GeneTranscriptsQuery
 */
export interface GeneTranscriptsQuery {
  /**
   * Gene identifier to query for.
   *
   * @generated from protobuf field: optional string hgnc_id = 1;
   */
  hgncId?: string
  /**
   * Genome build to use.
   *
   * @generated from protobuf field: optional mehari.txs.GenomeBuild genome_build = 2;
   */
  genomeBuild?: GenomeBuild
  /**
   * The number of entries to return per page.
   *
   * @generated from protobuf field: optional int32 page_size = 3;
   */
  pageSize?: number
  /**
   * The token to continue from a previous query.
   *
   * @generated from protobuf field: optional string next_page_token = 4;
   */
  nextPageToken?: string
}
/**
 * Container for a response to `GeneTranscriptsQuery`.
 *
 * @generated from protobuf message mehari.server.GeneTranscriptsResponse
 */
export interface GeneTranscriptsResponse {
  /**
   * The transcripts for the gene.
   *
   * @generated from protobuf field: repeated mehari.txs.Transcript transcripts = 1;
   */
  transcripts: Transcript[]
  /**
   * The token to continue from a previous query.
   *
   * @generated from protobuf field: optional string next_page_token = 2;
   */
  nextPageToken?: string
}
// @generated message type with reflection information, may provide speed optimized methods
class GeneTranscriptsQuery$Type extends MessageType<GeneTranscriptsQuery> {
  constructor() {
    super('mehari.server.GeneTranscriptsQuery', [
      { no: 1, name: 'hgnc_id', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: 'genome_build',
        kind: 'enum',
        opt: true,
        T: () => ['mehari.txs.GenomeBuild', GenomeBuild]
      },
      { no: 3, name: 'page_size', kind: 'scalar', opt: true, T: 5 /*ScalarType.INT32*/ },
      { no: 4, name: 'next_page_token', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ }
    ])
  }
  create(value?: PartialMessage<GeneTranscriptsQuery>): GeneTranscriptsQuery {
    const message = globalThis.Object.create(this.messagePrototype!)
    if (value !== undefined) reflectionMergePartial<GeneTranscriptsQuery>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneTranscriptsQuery
  ): GeneTranscriptsQuery {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* optional string hgnc_id */ 1:
          message.hgncId = reader.string()
          break
        case /* optional mehari.txs.GenomeBuild genome_build */ 2:
          message.genomeBuild = reader.int32()
          break
        case /* optional int32 page_size */ 3:
          message.pageSize = reader.int32()
          break
        case /* optional string next_page_token */ 4:
          message.nextPageToken = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneTranscriptsQuery,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* optional string hgnc_id = 1; */
    if (message.hgncId !== undefined) writer.tag(1, WireType.LengthDelimited).string(message.hgncId)
    /* optional mehari.txs.GenomeBuild genome_build = 2; */
    if (message.genomeBuild !== undefined) writer.tag(2, WireType.Varint).int32(message.genomeBuild)
    /* optional int32 page_size = 3; */
    if (message.pageSize !== undefined) writer.tag(3, WireType.Varint).int32(message.pageSize)
    /* optional string next_page_token = 4; */
    if (message.nextPageToken !== undefined)
      writer.tag(4, WireType.LengthDelimited).string(message.nextPageToken)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message mehari.server.GeneTranscriptsQuery
 */
export const GeneTranscriptsQuery = new GeneTranscriptsQuery$Type()
// @generated message type with reflection information, may provide speed optimized methods
class GeneTranscriptsResponse$Type extends MessageType<GeneTranscriptsResponse> {
  constructor() {
    super('mehari.server.GeneTranscriptsResponse', [
      {
        no: 1,
        name: 'transcripts',
        kind: 'message',
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Transcript
      },
      { no: 2, name: 'next_page_token', kind: 'scalar', opt: true, T: 9 /*ScalarType.STRING*/ }
    ])
  }
  create(value?: PartialMessage<GeneTranscriptsResponse>): GeneTranscriptsResponse {
    const message = globalThis.Object.create(this.messagePrototype!)
    message.transcripts = []
    if (value !== undefined) reflectionMergePartial<GeneTranscriptsResponse>(this, message, value)
    return message
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GeneTranscriptsResponse
  ): GeneTranscriptsResponse {
    const message = target ?? this.create(),
      end = reader.pos + length
    while (reader.pos < end) {
      const [fieldNo, wireType] = reader.tag()
      switch (fieldNo) {
        case /* repeated mehari.txs.Transcript transcripts */ 1:
          message.transcripts.push(Transcript.internalBinaryRead(reader, reader.uint32(), options))
          break
        case /* optional string next_page_token */ 2:
          message.nextPageToken = reader.string()
          break
        default:
          const u = options.readUnknownField
          if (u === 'throw')
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            )
          const d = reader.skip(wireType)
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            )
      }
    }
    return message
  }
  internalBinaryWrite(
    message: GeneTranscriptsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated mehari.txs.Transcript transcripts = 1; */
    for (let i = 0; i < message.transcripts.length; i++)
      Transcript.internalBinaryWrite(
        message.transcripts[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join()
    /* optional string next_page_token = 2; */
    if (message.nextPageToken !== undefined)
      writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken)
    const u = options.writeUnknownFields
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer)
    return writer
  }
}
/**
 * @generated MessageType for protobuf message mehari.server.GeneTranscriptsResponse
 */
export const GeneTranscriptsResponse = new GeneTranscriptsResponse$Type()
